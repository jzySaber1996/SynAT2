{'sentId': 85, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone knows the ip-address of one of our application servers ', 'em2Text': 'fake it to get access to the other application', 'label': 'AND'}, {'em1Text': 'someone knows the ip-address of one of our application servers ', 'em2Text': 'an attacker that wants to fake my ip-address', 'label': 'None'}, {'em1Text': 'someone knows the ip-address of one of our application servers ', 'em2Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'label': 'None'}, {'em1Text': 'someone knows the ip-address of one of our application servers ', 'em2Text': 'this isp does not do packet inspection', 'label': 'None'}, {'em1Text': 'fake it to get access to the other application', 'em2Text': 'someone knows the ip-address of one of our application servers ', 'label': 'None'}, {'em1Text': 'fake it to get access to the other application', 'em2Text': 'an attacker that wants to fake my ip-address', 'label': 'None'}, {'em1Text': 'fake it to get access to the other application', 'em2Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'label': 'None'}, {'em1Text': 'fake it to get access to the other application', 'em2Text': 'this isp does not do packet inspection', 'label': 'None'}, {'em1Text': 'an attacker that wants to fake my ip-address', 'em2Text': 'someone knows the ip-address of one of our application servers ', 'label': 'None'}, {'em1Text': 'an attacker that wants to fake my ip-address', 'em2Text': 'fake it to get access to the other application', 'label': 'None'}, {'em1Text': 'an attacker that wants to fake my ip-address', 'em2Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'label': 'PARENT'}, {'em1Text': 'an attacker that wants to fake my ip-address', 'em2Text': 'this isp does not do packet inspection', 'label': 'None'}, {'em1Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'em2Text': 'someone knows the ip-address of one of our application servers ', 'label': 'None'}, {'em1Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'em2Text': 'fake it to get access to the other application', 'label': 'None'}, {'em1Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'em2Text': 'an attacker that wants to fake my ip-address', 'label': 'None'}, {'em1Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'em2Text': 'this isp does not do packet inspection', 'label': 'OR'}, {'em1Text': 'this isp does not do packet inspection', 'em2Text': 'someone knows the ip-address of one of our application servers ', 'label': 'None'}, {'em1Text': 'this isp does not do packet inspection', 'em2Text': 'fake it to get access to the other application', 'label': 'None'}, {'em1Text': 'this isp does not do packet inspection', 'em2Text': 'an attacker that wants to fake my ip-address', 'label': 'None'}, {'em1Text': 'this isp does not do packet inspection', 'em2Text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'someone knows the ip-address of one of our application servers ', 'label': 'ATTACK'}, {'start': 76, 'text': 'fake it to get access to the other application', 'label': 'ATTACK'}, {'start': 283, 'text': 'an attacker that wants to fake my ip-address', 'label': 'ATTACK'}, {'start': 337, 'text': 'compromise the very same isp that is in charge of the ip-range my webserver operates in', 'label': 'ATTACK'}, {'start': 430, 'text': 'this isp does not do packet inspection', 'label': 'ATTACK'}], 'sentText': 'someone knows the ip-address of one of our application servers and wants to fake it to get access to the other application which he knows the listening socket and protocol of.so he alters the header of his ip packets to have the webserver ip as transmitter. so to put this straight: an attacker that wants to fake my ip-address needs to compromise the very same isp that is in charge of the ip-range my webserver operates in - or this isp does not do packet inspection. '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 222, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 252, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference between a refresh token and a non-expiring access token in means of security is one additional call to the authorization server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as response.<br />now if he steals your refresh token, he first has to call the authorization server and receive an access token in response. then he can query the resource server for confidential data. '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 49, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 93, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem s t e xxr siy adds a slash then some encoded javascript n imxe txg with t bo, xh kills the page.  e and xxxxxe att.   '}
{'sentId': 26, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'add malicious code', 'em2Text': 'upload to an alternate app store', 'label': 'None'}, {'em1Text': 'add malicious code', 'em2Text': 'dupe users in to downloading it', 'label': 'None'}, {'em1Text': 'upload to an alternate app store', 'em2Text': 'add malicious code', 'label': 'PARENT'}, {'em1Text': 'upload to an alternate app store', 'em2Text': 'dupe users in to downloading it', 'label': 'None'}, {'em1Text': 'dupe users in to downloading it', 'em2Text': 'add malicious code', 'label': 'None'}, {'em1Text': 'dupe users in to downloading it', 'em2Text': 'upload to an alternate app store', 'label': 'PARENT'}], 'entityMentions': [{'start': 60, 'text': 'add malicious code', 'label': 'ATTACK'}, {'start': 83, 'text': 'upload to an alternate app store', 'label': 'ATTACK'}, {'start': 120, 'text': 'dupe users in to downloading it', 'label': 'ATTACK'}], 'sentText': 'the concern is if the app is targeted by hackers they could add malicious code and upload to an alternate app store and dupe users in to downloading it.  '}
{'sentId': 51, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'session hijacking', 'em2Text': 'replay', 'label': 'AND'}, {'em1Text': 'session hijacking', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}, {'em1Text': 'replay', 'em2Text': 'session hijacking', 'label': 'None'}, {'em1Text': 'replay', 'em2Text': 'man-in-the-middle attacks', 'label': 'OR'}, {'em1Text': 'man-in-the-middle attacks', 'em2Text': 'session hijacking', 'label': 'None'}, {'em1Text': 'man-in-the-middle attacks', 'em2Text': 'replay', 'label': 'None'}], 'entityMentions': [{'start': 52, 'text': 'session hijacking', 'label': 'ATTACK'}, {'start': 89, 'text': 'replay', 'label': 'ATTACK'}, {'start': 99, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'the reason is to harden the web application against session hijacking (eg by [link]) and replay or man-in-the-middle attacks.  '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 64, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 120, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 206, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the    a r xxs m is r   xxxp  le t e  xxxxt  se r  wh n  xxxxxy adds a slash   te xm    tt  adds a  im  n s a  sxxt ome encoded javascript  k  sh n im s a tht  sh  k   e tg xxh tht  alt bx a  ge x,   which kills the page. k im xxxs  r   n  si kilxs m alxxt enxxxxd   xxe pe a txt   nd ef r fe attaxx.  im   n   n enxxxxd    e e   '}
{'sentId': 109, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'cross-site request forgery attack', 'em2Text': 'submit malicious requests to a trusted site', 'label': 'PARENT'}, {'em1Text': 'cross-site request forgery attack', 'em2Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'None'}, {'em1Text': 'submit malicious requests to a trusted site', 'em2Text': 'cross-site request forgery attack', 'label': 'None'}, {'em1Text': 'submit malicious requests to a trusted site', 'em2Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'PARENT'}, {'em1Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'em2Text': 'cross-site request forgery attack', 'label': 'None'}, {'em1Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'em2Text': 'submit malicious requests to a trusted site', 'label': 'None'}], 'entityMentions': [{'start': 2, 'text': 'cross-site request forgery attack', 'label': 'ATTACK'}, {'start': 69, 'text': 'submit malicious requests to a trusted site', 'label': 'ATTACK'}, {'start': 462, 'text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'ATTACK'}], 'sentText': "a cross-site request forgery attack rides on the victim's session to submit malicious requests to a trusted site. the [link] describes captcha as a good way to prevent csrf attacks. as we know, google re-captcha is effective in preventing bot spamming. after it has been clicked several times at the location with the same ip address, it requires a human to solve a pictures puzzle. since the first few attempts are simply 'free', is it possible for a hacker to bypass it by initiating clicking on the re-captcha figure at the first few attempts? "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe and expxxxt it, xxxt there xxxxd be sxxe indistinct general side channel attack or something. bxt how wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe viable approaches for a dexxxxxxxd attaxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 86, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 195, 'text': 'snooping in between and intercepting the message', 'label': 'ATTACK'}], 'sentText': "pretty simple xxd straight xxxxxxx. exxxxxxxxg works fine. but i'm afxxxd that the websxxxxt connection to node.js is xxxxxxxx. when node.js sends a messaxe to the xxxxxxxxx, i don't want anxxxe snooping in between and intercepting the message. i would like to make sure xy users feel safe and trust the sexxxxe i have bxxxt fxr xxxx. "}
{'sentId': 27, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 121, 'text': 'manages to get dodgy code onto a server', 'label': 'ATTACK'}], 'sentText': "i wat to w how o disae the l modifier in ps rx m eg. [code]. it's a pol exploit that can be used in place of evl if anye manages to get dodgy code onto a server. i had a m recey with a wordpress theme m wos that had a security hole that allowed hackers to ud a back door ser adn te . "}
{'sentId': 92, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'including the  fields in the manifest to have account management access', 'em2Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'None'}, {'em1Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'em2Text': 'including the  fields in the manifest to have account management access', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'including the  fields in the manifest to have account management access', 'label': 'ATTACK'}, {'start': 148, 'text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'ATTACK'}], 'sentText': "due to t, i'm stg to wor what stops an xxxy s app fm ) including the  fields in the manifest to have account management access, xxd xn then 2) xxxm iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them. i knw that dug insta, a xxxxxg s up with all te permis t an ap xxxxxxxs xo us, bxt i xxxxt k we cxn coxxt on xe ae ur to xxxxxt an p e it requests s permiss. "}
{'sentId': 80, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 10, 'text': 'exec shell by exploiting format string vulnerability', 'label': 'ATTACK'}], 'sentText': 'i want to exec shell by exploiting format string vulnerability,so, i wanted to rewrite [code] function address from got by the address of my shellcode stored into environment variable. '}
{'sentId': 73, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'PARENT'}, {'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'AND'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'None'}], 'entityMentions': [{'start': 47, 'text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'ATTACK'}, {'start': 117, 'text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'ATTACK'}, {'start': 288, 'text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'ATTACK'}], 'sentText': " opti abou to t json   specif an hour ago ago  a wordpress page i manage started redirecting to ad/malware pages e . the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options' entry  - more 'yuzo_related_post_options'  specif wordpress  hour  hour ically embedded in the json option 'yuzo_related_post_css_and_style' of the option_value.  e that   i  the embedded opti - on gets e - c  an of ho an ed with e out s with a entry nitizing. "}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 59, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not e with the latest log4j exploit.i have a pe script that runs, i trd fg this instruction :s s oe of y stages of my pipeline scriptt i get a different r than whas described here and i'm e if i'm chg this correctly.  s s te error:[code] "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 135, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there a wa contents y ny way to protect encryption  t to h cod ra  ra e in  e ke attack? ys that m)  are being stored in ram from a freezer attack? (sticking the computer in a freezer   before cod  rebooting mali computer a  cious c ra ode  e to access the contents of ra way m) '}
{'sentId': 86, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 195, 'text': 'snooping in between and intercepting the message', 'label': 'ATTACK'}], 'sentText': "pretty simple and straight forward. everything works fine. but i'm afraid that the websocket connection to node.js is unsecure. when node.js sends a message to the recipient, i don't want anyone snooping in between and intercepting the message. i would like to make sure my users feel safe and trust the service i have built for them. "}
{'sentId': 96, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 123, 'text': 'database comes to be hacked', 'label': 'ATTACK'}], 'sentText': 'for that i record in their database their key (s) api and the connection is done. but from a security point of view, if my database comes to be hacked despite all the predispositions taken in terms of security (prepared requests etc) ... these are all the api keys of my clients that are revealed and also email addresses of their own customers that can be retrieved, used, resold ... because the tools i connect essentially allows to store contacts, organize and send emails. '}
{'sentId': 66, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'part of the code', 'em2Text': "send a null byte to bypass it's security", 'label': 'None'}, {'em1Text': "send a null byte to bypass it's security", 'em2Text': 'part of the code', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'part of the code', 'label': 'ATTACK'}, {'start': 103, 'text': "send a null byte to bypass it's security", 'label': 'ATTACK'}], 'sentText': "part of the code : but none of these methods worked. is that code really secure? and how could someone send a null byte to bypass it's security. i want to demonstrate to my friend that his code is not secure. "}
{'sentId': 163, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 129, 'text': 'avoid attackers to steal the token from a cookie', 'label': 'ATTACK'}], 'sentText': '  how to  to a to xxxxxxxxl a  quxx a x xo xxx: h a ow to a qxxxxxxx: txa xxxxxxxx how :     how fxxm     xxx:   how ck  a  exs  avoid attackers to steal the token from a cookie? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 110, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 150, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'stris  tl ar od ed ex, e r onxe oces  u [c tabl od, . t ms once y e oe crext [c  xx, ed te [c s you  ode], if another process can dump memory xx. , s no way you can get rid of the data f xxxxxxs ore [lixx] kic the ks i. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'strings  taxl ar od xd xx, e xr onxe ocexs  imxu [c tabl ode], e. that means once y before oxxxe cxxxt [c  xxxx, ed xxe xc xxxxxxs you  ode], if another process can dump memory xx. , xxxxxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. '}
{'sentId': 96, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'insert html code in his input data', 'em2Text': 'you later inserts in a web page that is sent to another user', 'label': 'None'}, {'em1Text': 'you later inserts in a web page that is sent to another user', 'em2Text': 'insert html code in his input data', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'insert html code in his input data', 'label': 'ATTACK'}, {'start': 79, 'text': 'you later inserts in a web page that is sent to another user', 'label': 'ATTACK'}], 'sentText': 'the danger in xss is that one user may insert html code in his input data that you later inserts in a web page that is sent to another user. '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 130, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 160, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my quesn i, w safe is "auth = null"? yes, i re that this mes t y an aud user can s the da, bt w y is it o become authe? can somee sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 144, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 39, 'text': 'cross-site scripting (xss)', 'label': 'ATTACK'}], 'sentText': "i am trying to protect my website from cross-site scripting (xss) and i'm thinking of using regular expressions to validate user inputs.  "}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 6, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 99, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'sxxxe uploaded several gifs, which when viewed with a browser, the browser said it was invalid, xd my virus scanner alerted me that it was a injection.  e xxxw xr a xxp xxxe g thexe g. '}
{'sentId': 24, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 36, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'i need to avoid being vulnerable to sql injection in my asp.net application. how might i accomplish this? '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 115, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the load this ser is normaly subjected to is minimal, but se e are no access restrictions, the ser cn obviously be attacked by dos etc. '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 222, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 252, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference between a refresh token and a non-expiring access token in means of security is one additional call to the authorization server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as response.<br />now if he steals your refresh token, he first has to call the authorization server and receive an access token in response. then he can query the resource server for confidential data. '}
{'sentId': 7, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'including a [code] tag on your site', 'em2Text': 'src is to any site that is not controlled by you', 'label': 'AND'}, {'em1Text': 'including a [code] tag on your site', 'em2Text': 'start farming user sessions/cookies/data', 'label': 'None'}, {'em1Text': 'src is to any site that is not controlled by you', 'em2Text': 'including a [code] tag on your site', 'label': 'None'}, {'em1Text': 'src is to any site that is not controlled by you', 'em2Text': 'start farming user sessions/cookies/data', 'label': 'None'}, {'em1Text': 'start farming user sessions/cookies/data', 'em2Text': 'including a [code] tag on your site', 'label': 'None'}, {'em1Text': 'start farming user sessions/cookies/data', 'em2Text': 'src is to any site that is not controlled by you', 'label': 'PARENT'}], 'entityMentions': [{'start': 95, 'text': 'including a [code] tag on your site', 'label': 'ATTACK'}, {'start': 137, 'text': 'src is to any site that is not controlled by you', 'label': 'ATTACK'}, {'start': 222, 'text': 'start farming user sessions/cookies/data', 'label': 'ATTACK'}], 'sentText': 'from my understanding the only vector for jsonp is the exact same vector which is opened up by including a [code] tag on your site whose src is to any site that is not controlled by you: that they could turn malicious and start farming user sessions/cookies/data. if that is true, then it would seem that it is not the protocol (jsonp) that is the concern, but rather the source that the data is gathered from.  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 134, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 232, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 301, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 324, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mt an attacker recover the secrets in that flash? i understand y can fuzz for vuls in the p coe and exploit it, that there d e some indistinct general side channel attack or something. but how would an attr really go abt tryig to recover those keys?  are e viable apps for a determined attackr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 99, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'rename a malicious executable to [code]', 'em2Text': "'hack' your system", 'label': 'None'}, {'em1Text': "'hack' your system", 'em2Text': 'rename a malicious executable to [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'rename a malicious executable to [code]', 'label': 'ATTACK'}, {'start': 57, 'text': "'hack' your system", 'label': 'ATTACK'}], 'sentText': "i can easily rename a malicious executable to [code] and 'hack' your system. "}
{'sentId': 84, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 70, 'text': '[code] scope in java can be tampered/altered by external proxy tools', 'label': 'ATTACK'}], 'sentText': "the security team is saying that the above code is vulnerable because [code] scope in java can be tampered/altered by external proxy tools. and since coldfusion is build on java, coldfusion's [code]can also be tampered by external proxy tools. is this a right assumption? is java and coldfusion [code] scope same? "}
{'sentId': 134, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'steal session id cookies with javascript functions planted in trusted sites by other users', 'em2Text': 'a valid session id be used from another host', 'label': 'PARENT'}, {'em1Text': 'a valid session id be used from another host', 'em2Text': 'steal session id cookies with javascript functions planted in trusted sites by other users', 'label': 'None'}], 'entityMentions': [{'start': 14, 'text': 'steal session id cookies with javascript functions planted in trusted sites by other users', 'label': 'ATTACK'}, {'start': 435, 'text': 'a valid session id be used from another host', 'label': 'ATTACK'}], 'sentText': 'it is easy to steal session id cookies with javascript functions planted in trusted sites by other users. what are the possible counter-measures for this kind of attack?  rejecting all javascript scripts on the client-side is probably difficult because almost all sites use js. what are the possible counter-measures on the server-side? is it possible to include a hash of the client ip-address in the session id value to prevent that a valid session id be used from another host? does this approach make sense? '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 93, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer my android appliaction code', 'em2Text': 'could see exactly what i do', 'label': 'None'}, {'em1Text': 'could see exactly what i do', 'em2Text': 'reverse engineer my android appliaction code', 'label': 'PARENT'}], 'entityMentions': [{'start': 94, 'text': 'reverse engineer my android appliaction code', 'label': 'ATTACK'}, {'start': 160, 'text': 'could see exactly what i do', 'label': 'ATTACK'}], 'sentText': 'it ses to me that no mattr whh approach i will choose, some who wants to hak it, will jt d to reverse engineer my android appliaction code (which it y hard) andcould see exactly what i do, whear i encrypt the dat, use hard pd r any other solutn for that ma. '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'wt i and s the best  to way to protect te use the r and the   is s protect ecure r any mitm attacks. is my way secur e e to  e ad n? way  '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, xe haxe a xxxxxxxy cxxxxxxxxxxt if some bad person would take advantage of the indirect access to win api? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe and expxxxt it, xxxt there xxxxd be sxxe indistinct general side channel attack or something. bxt how wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe viable approaches for a dexxxxxxxd attaxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 97, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'xf xo cookie. u ar cooxxx.  via e   concer whatever n  ed wixh the first xxxe us t is he ually  (someone posting malicious data to/as another user) th -- e sol to ution is the same xxxxxxr xxu  xxn are usxxg ajax or not --  ion you just have  yxu to aut is henticate the usxr t is xr  ouxh w n xxxxxxr meaxs is nec sxxs txe ixn ess is xxy x- usual yxu ly vi concer a sesxxxn cookie. '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this approach provides defense-in-depth. if someone manages to leak the database table, it does not give an attacker an open door for impersonating users. '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'enct my n (s &amp; s->c)do 2-way authentication (s &amp; s->d man-in-middle attacks '}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 174, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'cou xxxn ld you please list som axxxxxy e strat servxxxx? egi som es  ld or even approaxxxs you   haxe al even ready  services? xxxxxxd to prevent/protec hxxe t es /minimize ddos attacks upon restful   xxb services? '}
{'sentId': 98, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attacks', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': '[code]', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'use this email address to attack the website', 'label': 'PARENT'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'create an email address, such as this one', 'em2Text': '[code]', 'label': 'AND'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 50, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 207, 'text': 'create an email address, such as this one', 'label': 'ATTACK'}, {'start': 250, 'text': '[code]', 'label': 'ATTACK'}, {'start': 266, 'text': 'use this email address to attack the website', 'label': 'ATTACK'}], 'sentText': "i wonder whether an email address can be used for xss attacks.  let's suppose there is a website where one can register and gives his email address. if one wants to attack the given website, he or she might create an email address, such as this one: [code] and then use this email address to attack the website. the email address in your example appears valid.  the only character that is unusual is the quote [code] -- rest others are valid. "}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole point of hashixg a password is in case a xxxxxr gets access to the database. if i store xxe saxt in the db within the same row as the hashed xxxxxxxx, isn\'t it juxt like i am handing the xxxxxr the "secret code"? i am puttixg up a door with a lock, and handing the ixxxxxxr the key. '}
{'sentId': 38, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'clear the whole database', 'em2Text': 'inserting a delete statement', 'label': 'PARENT'}, {'em1Text': 'inserting a delete statement', 'em2Text': 'clear the whole database', 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'clear the whole database', 'label': 'ATTACK'}, {'start': 46, 'text': 'inserting a delete statement', 'label': 'ATTACK'}], 'sentText': 'i dot want them o clear the whole database by inserting a delete statement.my ids d b: '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': 'txxxxs how it works rixxx? but ivxe xxxd about brute force attack. it guesses the input values xxxxx? with xxe procedure above. doesxxt it xxxxs xxxt the xxxxxxxr only needs to get the $userinput information correct to get in? he xxxxxxt need xo guess the lxxg xxxxxxxxxd strxxg corrxxx? '}
{'sentId': 101, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 128, 'text': 'buffer overflow security vulnerability', 'label': 'ATTACK'}], 'sentText': 'ai ilit  y ng that a c# program overw  to  uss on vulnerb a a  ility ly managed .n og? man if aged  t , is it possibe to have a buffer overflow security vulnerability within that pr if or uss am? if so, hw  within woud suh vulnerability be s program? s ow ible? securiy  '}
{'sentId': 62, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 61, 'text': 'steal these credentials', 'label': 'ATTACK'}], 'sentText': 'however, i l think there are ede cs here we it is possible o steal these credentials, and bele they d be t via an https post.  is this actually a safe means of seg login/tn da? '}
{'sentId': 30, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'any data written to passwordvault from one desktop app (not a native uwp app) can be read from any other desktop app.', 'label': 'ATTACK'}], 'sentText': 'i did some experiments and it appears that any data written to passwordvault from one desktop app (not a native uwp app) can be read from any other desktop app. even packaging my desktop app with [link] technology and thus having a package identity does not fix this vulnerability. '}
{'sentId': 99, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'rename a malicious executable to [code]', 'em2Text': "'hack' your system", 'label': 'None'}, {'em1Text': "'hack' your system", 'em2Text': 'rename a malicious executable to [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'rename a malicious executable to [code]', 'label': 'ATTACK'}, {'start': 57, 'text': "'hack' your system", 'label': 'ATTACK'}], 'sentText': "i can easily rename a malicious executable to [code] and 'hack' your system. "}
{'sentId': 39, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded svg images on a website', 'em2Text': 'cross-site-script into there', 'label': 'None'}, {'em1Text': 'cross-site-script into there', 'em2Text': 'uploaded svg images on a website', 'label': 'PARENT'}], 'entityMentions': [{'start': 22, 'text': 'uploaded svg images on a website', 'label': 'ATTACK'}, {'start': 143, 'text': 'cross-site-script into there', 'label': 'ATTACK'}], 'sentText': "i want to display usr uploaded svg images on a website, but they're quite open to e: they serve the d fis from a sepe ho, specy [code]. yu can cross-site-script into there all you like but t t get you anyt: it lis in a differet on to [code] and can't toh its s or interact with its script. "}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 48, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 116, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 189, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a explo rt   sy rt stats i le ce states that"spring expression language (spel) sy  stem  could e exo sysm ited h http parameter submissions   th  at  ited  alw wod al o low attackers to get sensitive system data, application and user cookies. sy "  '}
{'sentId': 100, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'man-in-the-middle attack', 'em2Text': 'generate certificates on the fly with its own ca', 'label': 'PARENT'}, {'em1Text': 'generate certificates on the fly with its own ca', 'em2Text': 'man-in-the-middle attack', 'label': 'None'}], 'entityMentions': [{'start': 99, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 155, 'text': 'generate certificates on the fly with its own ca', 'label': 'ATTACK'}], 'sentText': "i'm looking for a transparent ssl/tls proxy tool to capture (and change?) generic ssl/tls traffic (man-in-the-middle attack). basically something that can generate certificates on the fly with its own ca. in a way, i'm looking for something like [link], but for non-http(s) traffic. any suggestions? "}
{'sentId': 41, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'database where compromised', 'em2Text': 'going to defeat [code] by enabling the [link]', 'label': 'None'}, {'em1Text': 'going to defeat [code] by enabling the [link]', 'em2Text': 'database where compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'database where compromised', 'label': 'ATTACK'}, {'start': 49, 'text': 'going to defeat [code] by enabling the [link]', 'label': 'ATTACK'}], 'sentText': 'bt if e database where compromised the attacr is going to defeat [code] by enabling the [link]. '}
{'sentId': 17, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': '[link] ', 'em2Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'PARENT'}, {'em1Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'em2Text': '[link] ', 'label': 'None'}], 'entityMentions': [{'start': 17, 'text': '[link] ', 'label': 'ATTACK'}, {'start': 33, 'text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'ATTACK'}], 'sentText': "there's means of [link] whenever malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed. "}
{'sentId': 98, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'allow an attacker to predict boot time of the machine', 'em2Text': 'being able to grant control over it', 'label': 'None'}, {'em1Text': 'being able to grant control over it', 'em2Text': 'allow an attacker to predict boot time of the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 307, 'text': 'allow an attacker to predict boot time of the machine', 'label': 'ATTACK'}, {'start': 366, 'text': 'being able to grant control over it', 'label': 'ATTACK'}], 'sentText': "we've hired a security consultant to perform a pentest on our application's public ip (kubernetes loadbalancer) and write a report on our security flaws and the measurements required to avoid them. their report warned us that we have tcp timestamp enabled, and from what i've read about the issue, it would allow an attacker to predict boot time of the machine thus being able to grant control over it. "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 12, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'people going to his website were getting 168 viruses trying to download to their computers', 'em2Text': 'his ftp password was a plain dictionary word six letters long', 'label': 'PARENT'}, {'em1Text': 'his ftp password was a plain dictionary word six letters long', 'em2Text': 'people going to his website were getting 168 viruses trying to download to their computers', 'label': 'None'}], 'entityMentions': [{'start': 32, 'text': 'people going to his website were getting 168 viruses trying to download to their computers', 'label': 'ATTACK'}, {'start': 244, 'text': 'his ftp password was a plain dictionary word six letters long', 'label': 'ATTACK'}], 'sentText': "my dad called me today and said people going to his website were getting 168 viruses trying to download to their computers. he isn't technical at all, and built the whole thing with a wysiwyg editor. so i commented it out for now. it turns out his ftp password was a plain dictionary word six letters long, so we think that's how it got hacked. we've changed his password to an 8+ digit non-word string (he wouldn't go for a passphrase since he is a hunt-n-peck typer). "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs there axy wxy to protext exxxxxxxxn keys that are being xxxxxd in ram from a freezer attack? (sxxxxxxg the xxxxxxxr in a frexxxr before rxxxxxxxg malixxxxs coxe xo accexs the cxxxxxxs xf xxx) '}
{'sentId': 29, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'new user completes the registration', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'new user completes the registration', 'em2Text': 'once tapped from within an ios device', 'label': 'None'}, {'em1Text': 'new user completes the registration', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'new user completes the registration', 'label': 'PARENT'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'once tapped from within an ios device', 'label': 'AND'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'new user completes the registration', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'new user completes the registration', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'once tapped from within an ios device', 'label': 'PARENT'}], 'entityMentions': [{'start': 30, 'text': 'new user completes the registration', 'label': 'ATTACK'}, {'start': 67, 'text': 'an email will be sent, containing a url', 'label': 'ATTACK'}, {'start': 112, 'text': 'once tapped from within an ios device', 'label': 'ATTACK'}, {'start': 356, 'text': 'a malicious app could sign up to the same url scheme', 'label': 'ATTACK'}], 'sentText': 'a web application that once a new user completes the registration, an email will be sent, containing a url that once tapped from within an ios device, the ios app will be launched. this scenario is a classic scenario to make users use the mobile app. while implementing it (using url scheme), we start wondering how secured is this method? theoretically - a malicious app could sign up to the same url scheme, and according to apple: '}
{'sentId': 64, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 90, 'text': 'directory transversal (aka path transversal) attack', 'label': 'ATTACK'}], 'sentText': 'i have beig  a java webapp w attac  k ep  h   is vue t  encoding transver) . webapp o the directory transversal (aka path transversal) attack vi direcy a url  path . after being authentia trl ted: '}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 72, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 96, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interg g quite fast: they e astonishingly ls f attempts o circumvent security and exploit vulnerabilities in standard software packages tt are commonly found n sites, like phpmyadmin, forums, etc. '}
{'sentId': 59, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}], 'sentText': 'xs f  ar as i can sxe this shxxxd prev give ent a man-in-the-middle attack kxy , or xm the  i xi as ssing xxxxxr  somxxh to ing?at  ar poixt 7 t key xe c the xxxxt should xxxw if some 7 oxe xs tryixg point  to give the xxxxe someth r xxe wrong key to en as c man-ixxxxe ing?at -middl know e xxxt xxxx,  knxw  key as no one else bu rypt t the sexxxr  this can de missixg cryp as t key2(puxl xxe ic). '}
{'sentId': 11, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'read the plain-text password used to access the external service', 'label': 'ATTACK'}], 'sentText': "e: due xo disn xxd in the co, let e claxy the tht i'm tg to addrexx: i want xo prevt an xxxxxr from being ae o read the plain-text password used to access the external service. mg t if xxxy sw gd n s o our netwk xr daxxx, even h te e dump xxxy d nt be xxxe xo read the pass in plain text. "}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate raxxxxw txxxe would have to be xxxxxxxxd for each xxd every uxxr who had a unixxe salt in order to xxxxxn their xxxxxxxx.  this woxxd be a time consuming procexs whxxh xs what maxxs salts xxxxxxxxx.  this xxxs not help a tremendous xxxxxt xxxxxxt dictionxxy or brute xxxxe attacks. '}
{'sentId': 27, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'man in the middle attack', 'em2Text': 'eavesdropping', 'label': 'AND'}, {'em1Text': 'eavesdropping', 'em2Text': 'man in the middle attack', 'label': 'None'}], 'entityMentions': [{'start': 343, 'text': 'man in the middle attack', 'label': 'ATTACK'}, {'start': 398, 'text': 'eavesdropping', 'label': 'ATTACK'}], 'sentText': 'now adding a 3rd partixxxxxt to txxs communication will xxt wxxk because key exchange axxxxxxxxs are desigxxd to derxxe a shxxxd secxxt from 2 public kexs xxxy (especixxxy xxxxg .net and bouncxxxxxxxx. so txe quexxxxn is, xxw would xxu go abxxt ixxxxxxxxxxg a n-pxxxy pxxxxc key xxxxxxxxxxxy schema whxxh is xxxxl xxxxxxxxc (i.e. rexxxxxxt to man in the middle attack) and sexxxe (i.x. secure from eavesdropping). '}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 127, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i wan xxxt ty le t t  o know if this an i d xn  ly this  so, lxxxxe on  sxxxxxt pxxxxxxs axy securi i   ty issues  o (like xss attacks xxx) '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz xxr vulnxxxxxxxxxxs xn txe xxp cxxe and expxxxt it, xxxt xxxxe xxxxd be sxxe indistinct general side channel attack or xxxxxxxxx. bxt how wouxd an axxxxxxr reaxxy go abxxt xxxxxg to recover those keys?  are xxxxe viaxxe axxxxxxxxs for a dexxxxxxxd xxxxxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 95, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker could fetch the encrypted string', 'em2Text': 'fetch the key', 'label': 'None'}, {'em1Text': 'attacker could fetch the encrypted string', 'em2Text': 'decrypt the data', 'label': 'None'}, {'em1Text': 'fetch the key', 'em2Text': 'attacker could fetch the encrypted string', 'label': 'PARENT'}, {'em1Text': 'fetch the key', 'em2Text': 'decrypt the data', 'label': 'None'}, {'em1Text': 'decrypt the data', 'em2Text': 'attacker could fetch the encrypted string', 'label': 'None'}, {'em1Text': 'decrypt the data', 'em2Text': 'fetch the key', 'label': 'PARENT'}], 'entityMentions': [{'start': 228, 'text': 'attacker could fetch the encrypted string', 'label': 'ATTACK'}, {'start': 271, 'text': 'fetch the key', 'label': 'ATTACK'}, {'start': 289, 'text': 'decrypt the data', 'label': 'ATTACK'}], 'sentText': 'how is such encryption possible i wonder? the algorithm would be fixed and therefore either well-known or deductible (say one of seven widely used in industry algorithms) and there must be a key somewhere in the program. so the attacker could fetch the encrypted string, fetch the key and decrypt the data. '}
{'sentId': 41, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'set the csrf cookie using set-cookie', 'em2Text': 'supply a matching token in the post form data', 'label': 'None'}, {'em1Text': 'supply a matching token in the post form data', 'em2Text': 'set the csrf cookie using set-cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 12, 'text': 'set the csrf cookie using set-cookie', 'label': 'ATTACK'}, {'start': 59, 'text': 'supply a matching token in the post form data', 'label': 'ATTACK'}], 'sentText': '  te ar can set the csrf cookie using set-cookie, and then supply a matching token in the post form data. since the se s not tie the sen cookies to the f , it has no way of deg that the csrf ton + cooe are e (doing hg etc. of e f m will nt , as the attacker can just gt a valid pair from te e d, and use that pair in the a. '}
{'sentId': 41, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'rainbow table attacks', 'em2Text': 'salts can be easily reverse-engineered', 'label': 'None'}, {'em1Text': 'salts can be easily reverse-engineered', 'em2Text': 'rainbow table attacks', 'label': 'PARENT'}], 'entityMentions': [{'start': 187, 'text': 'rainbow table attacks', 'label': 'ATTACK'}, {'start': 433, 'text': 'salts can be easily reverse-engineered', 'label': 'ATTACK'}], 'sentText': "i'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site. i figure that lots of people have contemplated this problem before me, and i'm wondering what the best practice is. it seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered. "}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i xm tryxg xo make e y jxxxxxs inxxxxxe xs not xxxxxxxxxxe wxxh the latest log4j exploit.i e a pipexxe sxxt xt runs, i txxd folg xxxs n s is e f xy ss of my e xxxxxxxxxxxt i get a dt xxxxr tn whs descrxxxd hxxe xd i'm unsue if ixm g ts xxxxxxxxx.  this is txe ] "}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 291, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  sy recommenda: t is higxxy rexxxxxxxxd tt you xo xxt  hard-code the exact public license key string value as provided by  googe xxxx. instea, you cn constxxxt te whoe publc e key  xg at e fxxm substrxxxx, or e it fxxm an encrypted  s, bee pg it to txe cxxxx. this aph makes it  mxxe xt fr malicious third-parties to modify the public  license key string n your apk f. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 192, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 274, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i ud they xn z fxr vus xn the app e and t it, t e cd e sxxe indistinct general side channel attack r s. but hw wxxd n r ry go about g xo recover those keys?  e e vxxe aps fr a dxxxxd ar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 113, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 175, 'text': 'which can easily be decompiled using dotpeek or any other tool', 'label': 'ATTACK'}], 'sentText': 'i want to know to secure my xamarin code specially when deploying to android. i know that xamarin.ios converts to native code but xamarin.android deploys the .net code in dll which can easily be decompiled using dotpeek or any other tool and the code will be visible including my encryption keys or any other security related data which is necessary for security between server and my app. obfuscation is an option but i want to know any other options. please guide me on this issue because it is of much concern to me. '}
{'sentId': 26, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'prevent attacks from the form side', 'em2Text': 'from the database side', 'label': 'None'}, {'em1Text': 'from the database side', 'em2Text': 'prevent attacks from the form side', 'label': 'None'}], 'entityMentions': [{'start': 32, 'text': 'prevent attacks from the form side', 'label': 'ATTACK'}, {'start': 76, 'text': 'from the database side', 'label': 'ATTACK'}], 'sentText': "i feel i am doing what i can to prevent attacks from the form side, but not from the database side. i know you can change the type of password storage to encrypt upon entry to the database, but what i don't understand is how i would then query this encrypted string. "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 227, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'ho any wevex, i do xxt und xxt erstand t howev hacker ex, he xxxxxxxs about xxxx the xxxy vulx howevex, xxxxxxxxxxx. running  cert how about evex, ainly any , running [code] gxxxs the hacke any r the ax xxt xxxxy t hack t er o run any javascript code that you can run. '}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 216, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 303, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i am xxxxxg to pxxxxxm a buffer overflow attack on a program for a class assignmxxx. both the attack program xs well as txe vulnexxxxe programme is written by me. however, i woxxd lixe xo uxe the attack pxxxxxxxe to keep supplying incrementally longer payloads till the progxxxxe xxxxxxx. so, i xxxd to dynamically generate larger payloads of junks. i am using xxxxx] to rxxxxxxxxy call and test for an abnormal exit. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 205, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 265, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt he . e s  xt e s coud  o r xu mag t  s xxxxxy  to xi o j . k   d  o t g s d s ua   xxxg s    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack o     be or e n xu  t c  s d   . xe passd o l o n  s o e acco. '}
{'sentId': 157, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'the middle man gets request from victim', 'em2Text': 'he fires https request himself', 'label': 'AND'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'returns content to the user', 'label': 'None'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'returns content to the user', 'label': 'AND'}, {'em1Text': 'he fires https request himself', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'the middle man gets request from victim', 'label': 'PARENT'}, {'em1Text': 'mitm attacks', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'returns content to the user', 'label': 'None'}], 'entityMentions': [{'start': 68, 'text': 'the middle man gets request from victim', 'label': 'ATTACK'}, {'start': 161, 'text': 'he fires https request himself', 'label': 'ATTACK'}, {'start': 237, 'text': 'returns content to the user', 'label': 'ATTACK'}, {'start': 451, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': "le ps t's imagine th  header gets e   followi  ng scena header rio: the middle man gets request from victim: h http ttp ://site th .com. middle  t the gets  hen he fires https request himself to htt r. ps :// e site.com and ://site.com  returns content to the user, stri himself  himself pping the hsts header. all furth   http er user in to put is visible to the attack returns e middle r. does  fires gets  hsts header really help a hsts ng  gainst mitm attacks? "}
{'sentId': 44, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'execute arbitrary code', 'em2Text': '[link] overflow', 'label': 'PARENT'}, {'em1Text': 'execute arbitrary code', 'em2Text': '[link] overflow', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': 'execute arbitrary code', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': '[link] overflow', 'label': 'OR'}, {'em1Text': '[link] overflow', 'em2Text': 'execute arbitrary code', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': '[link] overflow', 'label': 'None'}], 'entityMentions': [{'start': 45, 'text': 'execute arbitrary code', 'label': 'ATTACK'}, {'start': 106, 'text': '[link] overflow', 'label': 'ATTACK'}, {'start': 106, 'text': '[link] overflow', 'label': 'ATTACK'}], 'sentText': 'hxw   arbxxxa  ry    is xn exexxxe e able to execute arbitrary code   s cxxe impxy by xxxxxxg xxxxk  ] or [link] overflows? '}
{'sentId': 39, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 18, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'how can i prevent xss attacks in a jsp/servlet web application? '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 106, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, xe haxe  api? a sec ta win ke  ixxxr bad ext xxxxy xxxxxxxxxxa xxx? t api?  if xxr indire to ct son  some bad person would take advantage of the indirect access to win api? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 128, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'em2Text': 'execute the code in the tmp folder', 'label': 'None'}, {'em1Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'em2Text': 'they get into your web root', 'label': 'None'}, {'em1Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'em2Text': 'execute any arbitrary code on your server', 'label': 'None'}, {'em1Text': 'execute the code in the tmp folder', 'em2Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'label': 'PARENT'}, {'em1Text': 'execute the code in the tmp folder', 'em2Text': 'they get into your web root', 'label': 'None'}, {'em1Text': 'execute the code in the tmp folder', 'em2Text': 'execute any arbitrary code on your server', 'label': 'None'}, {'em1Text': 'they get into your web root', 'em2Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'label': 'None'}, {'em1Text': 'they get into your web root', 'em2Text': 'execute the code in the tmp folder', 'label': 'None'}, {'em1Text': 'they get into your web root', 'em2Text': 'execute any arbitrary code on your server', 'label': 'None'}, {'em1Text': 'execute any arbitrary code on your server', 'em2Text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'label': 'None'}, {'em1Text': 'execute any arbitrary code on your server', 'em2Text': 'execute the code in the tmp folder', 'label': 'None'}, {'em1Text': 'execute any arbitrary code on your server', 'em2Text': 'they get into your web root', 'label': 'PARENT'}], 'entityMentions': [{'start': 24, 'text': 'temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp', 'label': 'ATTACK'}, {'start': 210, 'text': 'execute the code in the tmp folder', 'label': 'ATTACK'}, {'start': 308, 'text': 'they get into your web root', 'label': 'ATTACK'}, {'start': 366, 'text': 'execute any arbitrary code on your server', 'label': 'ATTACK'}], 'sentText': "i have noticed that our temp directory has a number of what appear to be temporary files with names like phpa3f9.tmp  this appears to be an attack attempt, but i presume it relies on the attacker being able to execute the code in the tmp folder. those are php shells - mostly harmless where they are, but if they get into your web root, they'll allow an attacker to execute any arbitrary code on your server.  "}
{'sentId': 3, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 68, 'text': 'end up with evil/dangerous ones', 'label': 'ATTACK'}], 'sentText': "at best you could end up with invalid keywords.  at worst you could end up with evil/dangerous ones, as micha艂 marczyk said.  keep in mind that [code] can be used to run arbitrary code at read-time, so you don't even have to evaluate a string for bad things to happen, you only have to read it. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 132, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 200, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 't no he load t d his servr is normally s sd ubjected to is minim,  are but since th  er obviously restrict,  o m, usly  e res,  are no access restrictions, the s   nor to mally erver can obviously be attacked by dos etc. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 208, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 268, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxxt he . e s  xt e us cd  no r u g nt  s xxxy  to i do j . ak   d  o t pxxxxxg s d s ua   xg ts    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xxu  t c  s d   . xe pasd o l do n  s to e account. '}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 87, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interestg finding quite fast: y are y ls of as o circumvent security and exploit vulnerabilities in standard software packages t are comy found n sites, like phpmyadmin, , . '}
{'sentId': 36, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'em2Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'None'}, {'em1Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'em2Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'ATTACK'}, {'start': 316, 'text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'ATTACK'}], 'sentText': 'from all the posts that i\'ve seen so far, i\'m uncertain as to whether it is safe to send the iv in "plaintext" by prepending it to the cipher text. so the first question is, is it safe to do so?  that being said though, you need to make sure you mac it. depending on how you do message authentication codes, someone tampering with the iv could tamper with the resulting plaintext on decryption. encryption alone does not provide integrity of messages. '}
{'sentId': 88, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'get the token', 'em2Text': 'csrf', 'label': 'None'}, {'em1Text': 'csrf', 'em2Text': 'get the token', 'label': 'PARENT'}], 'entityMentions': [{'start': 425, 'text': 'get the token', 'label': 'ATTACK'}, {'start': 285, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'but what does that accomplish? aren\'t you just taking session data, putting it in the page, and then comparing it with the exact same session data? seems like circular reasoning. these articles keep talking about following the "same-origin policy" but that makes no sense, because all csrf attacks are of the same origin as the user, just tricking the user into doing actions he/she didn\'t intend. the attacker has no way to get the token. therefore the requests won\'t take any effect. i recommend this post from gnucitizen. it has a pretty decent csrf explanation: [link] '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 22, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 72, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 111, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'hxw t xxxxxx, o evxx, env vars are not particularly secure either any . they are visible via [code], and xxxxe they are available to any user that can run [code] commaxxx. (of co  he  urs  nxt ru how n e, any user txxt has [l  are  xxxe o ss to [ are code] that  on  t ink] o  how user  t [l  are any ink]  are he host axxo [linx] anxxxxx) '}
{'sentId': 77, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 56, 'text': 'inject javascript and manipulate the variables or access functions', 'label': 'ATTACK'}], 'sentText': 'are there was to p, or e it difficult enough, r some to inject javascript and manipulate the variables or access functions? a t i had is o change all r names randomy on eah reload so e mae script wd need to be rewritten every time? or are te other less pal ways? '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 90, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': 'if an ar gets ahold of the data in the datastore, as well as our hash salt, im wod they d brute force the sensitive data.  '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 339, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': ' users w can i displ pas y the id  and  "we, [your a "welcome, me] [] " id  on u sensie b ca e n c pages for authenti pages cated users to authenti  , ev  e o en if th to ey use h? to  of cu i rse, i woud  ev like to keep  i the acc "welcome,  the s to the sense pages safe, and i should pages  therefore p [code] o avo [code] id possible stealing of the session token. '}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 112, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 120, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'is s d swor) (and r r  funct the ions of the se funn   set) v config ulner 4mb.  lo c ad  set a set eas ) ble t dos via maxed out post parameters ? please dos  also c config onsider site-wid l te eas ) e e config situatios of pt up 4mb. load sis much larger n 4m. '}
{'sentId': 36, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 83, 'text': 'sql injection vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i am in a situation where i inherited a rather large web application that has some sql injection vulnerabilities.  i have found several just by looking through the code for other issues, but i'm wondering if a safe way to find all sql injection vulnerabilities would be to search all files for instances of [code] and then check to see if they are parametrized queries.  is this a solid plan? "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 70, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs e axy wxy to prt exxxxxxxxn keys that are being xxxxxd in ram fm a freezer attack? (sxxg the xxxxxxxr in a frexr bee rxxxxxxxg malixxxxs coxe o as the cxxxxxxs xf xxx) '}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 238, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i  axxxx want to know xf   this and want  o is etx) sues  an n if ly  ippet th an xn d xs littxe sn know i  pp to  i et  know prese x  s  so, nts an   axxxx xf   etx) this xs y  d xxxxr on d  xf ly ity etx)  issues  etx axxxx ) xxxxe xss attacks etx) '}
{'sentId': 132, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 129, 'text': 'cross site scripting attacks', 'label': 'ATTACK'}], 'sentText': 'however once glie is regisd n weg "modu" se, the reqt valin dot happn (en when glimpse is turned off, leaving te website open to cross site scripting attacks (xss).  '}
{'sentId': 105, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': "see data or change settings they shouldn't", 'em2Text': 'touching the blinkenlights', 'label': 'None'}, {'em1Text': 'touching the blinkenlights', 'em2Text': "see data or change settings they shouldn't", 'label': 'None'}], 'entityMentions': [{'start': 89, 'text': "see data or change settings they shouldn't", 'label': 'ATTACK'}, {'start': 367, 'text': 'touching the blinkenlights', 'label': 'ATTACK'}], 'sentText': "we need some way of authenticating a user login/session so that we don't allow people to see data or change settings they shouldn't. the device is not intended to be directly exposed to the internet or be 100% impregnable to serious hacking (network security / separation is the customer's issue*), the security requirement is more about keeping the lower ranks from touching the blinkenlights ;) "}
{'sentId': 1, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'csrf attacks', 'em2Text': 'attacker steals a token', 'label': 'PARENT'}, {'em1Text': 'attacker steals a token', 'em2Text': 'csrf attacks', 'label': 'None'}], 'entityMentions': [{'start': 67, 'text': 'csrf attacks', 'label': 'ATTACK'}, {'start': 302, 'text': 'attacker steals a token', 'label': 'ATTACK'}], 'sentText': 'as far as i understand there are two approaches in protecting from csrf attacks: 1) token per session, and 2) token per request 2) in the second case new csrf token is being generated on each request and after that an old one becomes invalid.it makes harder to exploit the vunerability because even if attacker steals a token (via xss) it expires when the user goes to the next page.but on the other hand this approach makes webapp less usable. here is a good quotation from [link]: '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 153, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am usixg cloudfla my xe on my wxxxxxe and   i wan my t to keep  i my s ddos erver's ip (the orig cloudfxa in i cxxxxxxxxe p) private, am   to xo avoxd ddos attacks bei apache, n prixxxx, g sent dxr xxxxxr ectly to    apache, my servxxxs ip. xy server  ip. xxxs  cloud oxxg flare apache, php, my my sxx. "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 148, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 193, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs maxed   other password_veri same fy() out  ( saxe and s site-xxxe ituxxxxn parametxxs s  xxxxr funcxxxn maxed s of the same funxxxxn set) xxxxxr dos ab post le xxxxn con  xxg st d st os via maxed out post parameters ? plexxe also conxxxxr the  site-wxxe c again onxxg sxxxxt le ions of post upxxxd sizes mxxh largxr than 4mb. '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'lets say we have a typical csrf protection like this onewhat if an attacket uses this code to bypass the csrf token? '}
{'sentId': 43, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'buffer overflow vulnerability', 'em2Text': 'getting input from another function', 'label': 'PARENT'}, {'em1Text': 'buffer overflow vulnerability', 'em2Text': 'pass anything longer than 100 characters', 'label': 'None'}, {'em1Text': 'getting input from another function', 'em2Text': 'buffer overflow vulnerability', 'label': 'None'}, {'em1Text': 'getting input from another function', 'em2Text': 'pass anything longer than 100 characters', 'label': 'AND'}, {'em1Text': 'pass anything longer than 100 characters', 'em2Text': 'buffer overflow vulnerability', 'label': 'None'}, {'em1Text': 'pass anything longer than 100 characters', 'em2Text': 'getting input from another function', 'label': 'None'}], 'entityMentions': [{'start': 33, 'text': 'buffer overflow vulnerability', 'label': 'ATTACK'}, {'start': 128, 'text': 'getting input from another function', 'label': 'ATTACK'}, {'start': 384, 'text': 'pass anything longer than 100 characters', 'label': 'ATTACK'}], 'sentText': "assume that i have a code having buffer overflow vulnerability as following is there a way to exploit this vulnerability if its getting input from another function (not user input) and the length of str is always less than 100? but that doesn't mean you should leave it unfixed. while there is no physical vulnerability, there is a lot of potential for a vulnerability. now you don't pass anything longer than 100 characters. but what about a few months from now on? will you remember that you can only pass input shorter than 100 characters? i don't think so. "}
{'sentId': 62, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'hackers who are trying to make their url as unreadable as possible', 'em2Text': 'carry out xss attacks', 'label': 'None'}, {'em1Text': 'carry out xss attacks', 'em2Text': 'hackers who are trying to make their url as unreadable as possible', 'label': 'PARENT'}], 'entityMentions': [{'start': 166, 'text': 'hackers who are trying to make their url as unreadable as possible', 'label': 'ATTACK'}, {'start': 236, 'text': 'carry out xss attacks', 'label': 'ATTACK'}], 'sentText': 'what  o xxe t xxxxr he p xxxt  can osxi xe e r y p  eaxs to ossi  xxxxxe asxxi to  chas  o ? xxe ? h to e o make xy xe axxxxxs a e s xss  xss on i can xxxk of are s  hackers who are trying to make their url as unreadable as possible xo carry out xss attacks '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there any way to protect encryption keys that are being stored in ram from a freezer attack? (sticking the computer in a freezer before rebooting malicious code to access the contents of ram) '}
{'sentId': 96, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'insert html code in his input data', 'em2Text': 'you later inserts in a web page that is sent to another user', 'label': 'None'}, {'em1Text': 'you later inserts in a web page that is sent to another user', 'em2Text': 'insert html code in his input data', 'label': 'PARENT'}], 'entityMentions': [{'start': 33, 'text': 'insert html code in his input data', 'label': 'ATTACK'}, {'start': 70, 'text': 'you later inserts in a web page that is sent to another user', 'label': 'ATTACK'}], 'sentText': 'the xr in xxs xs xxxt e uxxr xxy insert html code in his input data t you later inserts in a web page that is sent to another user. '}
{'sentId': 14, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'individual inject js alert', 'label': 'ATTACK'}], 'sentText': "i have had issues with xss. specifically i had an individual inject js alert showing that the my input had vulnerabilities. i have done research on xss and found examples but for some reason i can't get them to work. "}
{'sentId': 70, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'users upload some malicious file', 'em2Text': 'specify the extensions allowed to be uploaded', 'label': 'None'}, {'em1Text': 'specify the extensions allowed to be uploaded', 'em2Text': 'users upload some malicious file', 'label': 'PARENT'}], 'entityMentions': [{'start': 27, 'text': 'users upload some malicious file', 'label': 'ATTACK'}, {'start': 130, 'text': 'specify the extensions allowed to be uploaded', 'label': 'ATTACK'}], 'sentText': 'my proble is to avoid that users upload some malicious file on my web-server.im working on linux environment (debian). here i can specify the extensions allowed to be uploaded, and if the file dont meet them i delete as soon as the upload is completed.but this way let the user free to change the file extension with a simple rename.. and thats bad for me; even if a file.exe (for example) wont never be executed if is renamed in file.jpg (am i right?), i dont want to have potential danger files on my server. '}
{'sentId': 23, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'got access to your hashed passwords (and is trying to reverse the hash to plain text)', 'em2Text': 'dumped your database', 'label': 'None'}, {'em1Text': 'got access to your hashed passwords (and is trying to reverse the hash to plain text)', 'em2Text': 'got access to your random salts', 'label': 'None'}, {'em1Text': 'dumped your database', 'em2Text': 'got access to your hashed passwords (and is trying to reverse the hash to plain text)', 'label': 'PARENT'}, {'em1Text': 'dumped your database', 'em2Text': 'got access to your random salts', 'label': 'None'}, {'em1Text': 'got access to your random salts', 'em2Text': 'got access to your hashed passwords (and is trying to reverse the hash to plain text)', 'label': 'None'}, {'em1Text': 'got access to your random salts', 'em2Text': 'dumped your database', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'got access to your hashed passwords (and is trying to reverse the hash to plain text)', 'label': 'ATTACK'}, {'start': 193, 'text': 'dumped your database', 'label': 'ATTACK'}, {'start': 220, 'text': 'got access to your random salts', 'label': 'ATTACK'}], 'sentText': 'you need to store the random salt along with your hashgiven that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also '}
{'sentId': 90, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'a determined hacker with access to my source code', 'label': 'ATTACK'}], 'sentText': "i understand that i probably won't stop a determined hacker with access to my source code, but storing them as plaintext feels wrong. "}
{'sentId': 96, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'insert html code in his input data', 'em2Text': 'you later inserts in a web page that is sent to another user', 'label': 'None'}, {'em1Text': 'you later inserts in a web page that is sent to another user', 'em2Text': 'insert html code in his input data', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'insert html code in his input data', 'label': 'ATTACK'}, {'start': 79, 'text': 'you later inserts in a web page that is sent to another user', 'label': 'ATTACK'}], 'sentText': 'the dangxr in xss xs xxxt xxe uxxr may insert html code in his input data that you later inserts in a web page that is sent to another user. '}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 14, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 175, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 249, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i m g o perfm a buffer overflow attack on a program for a class as. both the attak progrm as well as the vulnerable programme is wn by . ho, i would like to use te ak proe to keep supplying incrementally longer payloads til the proge c. so, i ned o dynamically generate larger payloads of junks. i m using [co] to repeatedly call and test for an abnormal e. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 21, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t to e e cay to sp ddos attacks from a certain ip (or pool of ips). ths s to e t the nx level, rar than y r in the cod. o i d a web appln fire? f so, how o i ine it. '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 244, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 365, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the restricti  ons,  access  load this   ser but ver i   th e is s norm access a restrictions, l e ly subjected to is this  mi i restricti   can nim restrictions, a etc. l,  to but si   a nce t nimal, h nima usly access  l, e th r access e are no access restrictions,  can   re l, strictions, usl  y the serv to e er r can obv to io can this  usly re   ca can n be attacked by dos etc. '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 102, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 172, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is  simple t e  alert  simple r  wh simply adds a slash   te im  tht n s java  script ome encoded javascript  sh n im adds ae tg with tht  alt box age ), which kills the page. kills   simpe a that nd effecte attack.   e  '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is someone could decompile the app  c (which i've  c proguar proguard d ould done) and even with proguard you can qu with   wi the thout too much dif ompile ficulty retrieve all the  ould qu dec the om the pile es can tions.  "}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? is  i know the  xh xxxxr h r   kxxw  is er can be spo t ofed, but is xxxxe a thxs ny way for the  kn attacxxr to do  w t is xa is t for  xxxxxh txe xxxxxx? i kn enxu i gh o kn w tokens are t t t he he xxxx, ny  i  but t kn h txe e  would xxxs work? '}
{'sentId': 153, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'post to the form from another page using some nifty post-to-iframe hack it', 'label': 'ATTACK'}], 'sentText': 'if someone tries to post to the form from another page using some nifty post-to-iframe hack it will be [code], you can throw it out immediately. '}
{'sentId': 39, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cracking my account and downloading them', 'em2Text': 'give any results to the attacker', 'label': 'None'}, {'em1Text': 'give any results to the attacker', 'em2Text': 'cracking my account and downloading them', 'label': 'PARENT'}], 'entityMentions': [{'start': 71, 'text': 'cracking my account and downloading them', 'label': 'ATTACK'}, {'start': 165, 'text': 'give any results to the attacker', 'label': 'ATTACK'}], 'sentText': ', can the xxxa that s beg xxxd with there be acced somehow (oxxxr than cracking my account and downloading them xxx, sixe obvixxxxy opening suh fxxxs in brxxr wil t give any results to the attacker?  '}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 113, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 153, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': "should role checks be done at the top of the stack, the bottom of the stack or at every level?  it seems that if a malicious user can invoke one method, he could invoke any, so for  effective security, you'd need a check on every method (and that's a lot of extra code to write). "}
{'sentId': 68, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'using the php function htmlentities()', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'using the php function htmlentities()', 'em2Text': 'without appropriate encoding', 'label': 'AND'}, {'em1Text': 'xss attacks', 'em2Text': 'using the php function htmlentities()', 'label': 'PARENT'}, {'em1Text': 'xss attacks', 'em2Text': 'without appropriate encoding', 'label': 'None'}, {'em1Text': 'without appropriate encoding', 'em2Text': 'using the php function htmlentities()', 'label': 'None'}, {'em1Text': 'without appropriate encoding', 'em2Text': 'xss attacks', 'label': 'None'}], 'entityMentions': [{'start': 42, 'text': 'using the php function htmlentities()', 'label': 'ATTACK'}, {'start': 88, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 289, 'text': 'without appropriate encoding', 'label': 'ATTACK'}], 'sentText': 'i was asking myself about the security of using the php function htmlentities() against xss attacks, and maybe of related functions such as htmlspecialchars. you will need to explicitly specify proper encoding (e.g: utf-8), chris had a post on how to inject code even calling htmlentities without appropriate encoding.  '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 71, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 147, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 217, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 255, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my probm is t i feel the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the r can w simy use that hash to get access to the user's information. in , te ar can intercept the plain-text password, ad use that to gain access to the user's account. "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how cxn i display the "wxxxxxx, [yxxr xxxxx"  pages thxy  on public pa pages ges fo xf r authentica and ted users, even i pages p  f xxxy us  should therexxxe e htxx? of cours  xxxxs should e, i wou auxxxxxxc e] a ld  xh xxxs erefore  the like to kxe [code] p txe ac authentica cess to the sensitive p an therefore d ages safe, and i shoxxd  pa to  thexxxxxe keep [cod f x] to axxxd pxxxxxxe stealing of the session token an . '}
{'sentId': 40, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 18, 'text': 'attacker can embed a  script tag pointing at a remote server', 'label': 'ATTACK'}], 'sentText': '  xxxxxxxxxxx: te attacker can embed a  script tag pointing at a remote server  and e broxxxr wixl effecy  evxxx) the ry for xxx, hr it  xs away the resxxe d since  json s all rxxxxxxx, e . '}
{'sentId': 42, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 235, 'text': 'rdbms would be extremely vulnerable to sql injection', 'label': 'ATTACK'}], 'sentText': 'for the sake of getting something up and running right now i am passing the express query string object directly to a mongoose find function. what i am curious about is how dangerous would this practice be in a live app. i know that a rdbms would be extremely vulnerable to sql injection. aside from the good advice of "sanitize your inputs" how evil is this code: '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? is  i know the  th refer h r   know  is er can be spo t ofed, but is there a this ny way for the  kn attacker to do  w t is ha is t for  enough the client? i kn enou i gh o kn w tokens are t t t he he norm, ny  i  but t kn h the e  would this work? '}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is using the method below a bad choice? it generates a random number between 0-1000. since there are only 1000 options, and their md5 hashes are known, it should take an attacker just a 1000 trials to verify the account without it really belonging to them '}
{'sentId': 66, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 166, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'while improving the security of an ios application that we are developing, we found the need to pin (the entire or parts of) the ssl certificate of server to prevent man-in-the-middle attacks.  '}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 244, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'today, our xxxxxxxxxe architect mentxxxxd that a recent vulnerability was discovered in the jre 1.7.  i foxxd an arxxxxe the [xxxxx.  the details xf the latest vulnerabixxxy have nxt been made xxxxxx.  howxxxx, my understanding is that xt only affects java browser plugins.  the recommended mxxxxxxxxn is to xxxxxxe txe xxxa browser pluxxxx.  no mention is made of non-xxxxxn xxxx, so i thxxk it is safe to assume that your dev maxxxxe is not vuxxxxxxxe simxxy xy virtue xf haxxxg java 7 instaxxxx. '}
{'sentId': 1, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 242, 'text': 'the wysiwyg editor will output html to be rendered into the document', 'label': 'ATTACK'}], 'sentText': 'technical background info: we are running using django 1.3 and have not chosen a specific editor yet. we are leaning towards a javascript one such as tinymce, but can be persuaded to use anything that allows security and ease of use. because the wysiwyg editor will output html to be rendered into the document, we cannot simply escape it. '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 156, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 172, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 204, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 324, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 345, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': 'ixxs  o pre it e  xt  y   xxxe  xxxxxxxy  o it bxxxxs to you a application/mys  mess xxd ql nd  t  it i up  that the php xs a   xxxx. xxxxg i g  oing t  to take the id and run it through a mysql query to retrieve 1 record to d  a xy ixxl t xy xt o xd n xxe xxxx. is id  there  t anyway som xxxx. o  e malicious hacker cxxxd mess this url up xxd pose a security threat to my application/mysql db? '}
{'sentId': 11, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection attack', 'em2Text': 'retrieve the credentials', 'label': 'None'}, {'em1Text': 'retrieve the credentials', 'em2Text': 'sql injection attack', 'label': 'PARENT'}], 'entityMentions': [{'start': 315, 'text': 'sql injection attack', 'label': 'ATTACK'}, {'start': 342, 'text': 'retrieve the credentials', 'label': 'ATTACK'}], 'sentText': "i'm working on a python/django app which, among other things, syncs data to a variety of other services, including samba shares, ssh(scp) servers, google apps, and others. as such, it needs to store the credentials to access these services. storing them as unencrypted fields would be, i presume, a bad idea, as an sql injection attack could retrieve the credentials. so i would need to encrypt the creds before storage - are there any reliable libraries to achieve this? "}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 69, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 364, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  security recommendation: it is highly recommended that you do not  hard-code the exact public license key string value as provided by  google play. instead, you can construct the whole public license key  string at runtime from substrings, or retrieve it from an encrypted  store, before passing it to the constructor. this approach makes it  more difficult for malicious third-parties to modify the public  license key string in your apk file. '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 105, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'en s->co t xy xxxxxxxxxxn xc  s &a; s->c)o s->c) sxxx) &amp; d avd  2-way xxxn    (c->s (c->s &xxx; sxxd man-in-middle attacks '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 116, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 132, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 164, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 263, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 284, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': 'ixxs  o e it e  xt  y   xe  xxy  o it bxxs to yu a s  mess xxd ql nd  t  it i up  tt te p xs a   x. g i g  og t  to take the id and run it through a mysql query to retrieve 1 record o d  a y il t y xt o d n xxe xxxx. is id  there  t anywy som xxxx. o  e mas r cd mess this url up xxd pose a security threat to my application/mysql db? '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem   is tha even t  an is d even though my proj and e and ct is 100% legal, and not shady, it is ct  highl ddos y susce problem  ddos ptible to o though ccasional ddos attacks. '}
{'sentId': 6, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'injection', 'label': 'ATTACK'}], 'sentText': "there where no sql calls, so i wasn't afraid for sql injection. but, apparently, sql isn't the only kind of injection. this website has an explanation and a few examples of avoiding code injection: [link] how would you protect this code from code injection? "}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 205, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 265, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt he . e s  xt e s coud  o r xu mag t  s xxxxxy  to xi o j . k   d  o t g s d s ua   xxxg s    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack o     be or e n xu  t c  s d   . xe passd o l o n  s o e acco. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 187, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i would like to know if it has any build-in mechanism that would allow limiting the number of concurrent calls to the web service, thus addressing the possibility of a dos attack? something similar to this feature of wcf? "}
{'sentId': 44, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'execute arbitrary code', 'em2Text': '[link] overflow', 'label': 'PARENT'}, {'em1Text': 'execute arbitrary code', 'em2Text': '[link] overflow', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': 'execute arbitrary code', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': '[link] overflow', 'label': 'OR'}, {'em1Text': '[link] overflow', 'em2Text': 'execute arbitrary code', 'label': 'None'}, {'em1Text': '[link] overflow', 'em2Text': '[link] overflow', 'label': 'None'}], 'entityMentions': [{'start': 19, 'text': 'execute arbitrary code', 'label': 'ATTACK'}, {'start': 70, 'text': '[link] overflow', 'label': 'ATTACK'}, {'start': 70, 'text': '[link] overflow', 'label': 'ATTACK'}], 'sentText': 'how is one able to execute arbitrary code simply by causing [link] or [link] overflows? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz xxr vulnxxxxxxxxxxs xn txe xxp cxxe and expxxxt it, xxxt xxxxe xxxxd be sxxe indistinct general side channel attack or xxxxxxxxx. bxt how wouxd an axxxxxxr reaxxy go abxxt xxxxxg to recover those keys?  are xxxxe viaxxe axxxxxxxxs for a dexxxxxxxd xxxxxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 67, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'bu will t wh hacker at  eybe about security? my  m hacke bu r eybe hacker can find the way to change some of my [code] statements hacker , a about nd wh way  my  change ole my securite will  my brake. '}
{'sentId': 11, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 126, 'text': 'read the plain-text password used to access the external service', 'label': 'ATTACK'}], 'sentText': "edit: due to disn rad in the co, let e clary the threat i'm trying to address: i want to prevent an attacker from being ae to read the plain-text password used to access the external service. meaning t if they sw gaind non access to our network or datab, even h te e dump they would not be able to read the passwors in plain text. "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 257, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 314, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  if you give youxxxxf wrxxe p pxxxxa  ruxs xx  xxxx if xe xo the xxxxxm  t  o s give xxxxxxxxxxxx o ,    (  yxxxxe xxxxxx  g txxt axy pxxxxa to m  under thxt runs under  ( the  yxu ( necessarxxy not o under btain  ne write cesxxxxxy  pytho  n progxxx) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole point of hashing a password is in case a hacker gets access to the database. if i store the salt in the db within the same row as the hashed password, isn\'t it just like i am handing the hacker the "secret code"? i am putting up a door with a lock, and handing the intruder the key. '}
{'sentId': 21, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'access to private fields', 'em2Text': 'inspection and modification of internal data is possible', 'label': 'None'}, {'em1Text': 'access to private fields', 'em2Text': 'lead to various malicious exploits', 'label': 'None'}, {'em1Text': 'inspection and modification of internal data is possible', 'em2Text': 'access to private fields', 'label': 'PARENT'}, {'em1Text': 'inspection and modification of internal data is possible', 'em2Text': 'lead to various malicious exploits', 'label': 'None'}, {'em1Text': 'lead to various malicious exploits', 'em2Text': 'access to private fields', 'label': 'None'}, {'em1Text': 'lead to various malicious exploits', 'em2Text': 'inspection and modification of internal data is possible', 'label': 'PARENT'}], 'entityMentions': [{'start': 219, 'text': 'access to private fields', 'label': 'ATTACK'}, {'start': 250, 'text': 'inspection and modification of internal data is possible', 'label': 'ATTACK'}, {'start': 315, 'text': 'lead to various malicious exploits', 'label': 'ATTACK'}], 'sentText': "reflection can not be turned off altogether; it's always possible to reflect on its own public fields/methods. reflection on private structures with [code] can however be disabled, because it breaks encapsulation. with access to private fields, etc. inspection and modification of internal data is possible. it can lead to various malicious exploits, e.g.  "}
{'sentId': 54, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 270, 'text': 'inject something dangerous into a privileged shell command', 'label': 'ATTACK'}], 'sentText': "the  queue si a nce  daemon will pixk up actions fxxm a queue and a  xxxxu thxx' te them ure . ho a wever, s not in xxxx' ce i'll be acce from  axxe p shell xxxg input fr sure s  xxxr om ure  om user users, s, a  i want to mxxe sure they' xxxxxxxxxd xe not xxxxxxxxd xo inject something dangerous into a privileged shell command. "}
{'sentId': 79, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 221, 'text': 'avoid html and javascript injection  attacks', 'label': 'ATTACK'}], 'sentText': '  it is important to always be paranoid  about security when accepting any user  input, and this is also true when  binding objects to form input. you  should be careful to always html  encode any user-entered values to  avoid html and javascript injection  attacks '}
{'sentId': 99, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'rainbow tables that, from a hash valu', 'label': 'ATTACK'}], 'sentText': "no, you're mistaken. brute force attacks are one thing, but the real danger is rainbow tables that, from a hash value, gives you the plaintext password. "}
{'sentId': 118, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'code injectios', 'label': 'ATTACK'}], 'sentText': 'and now, if both ways are vulnerable to code injectios, is there anyother way to implement html tags in the same way as a string into html pages? '}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 105, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 156, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 232, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 261, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'bt wt   if  d a  ue xxxxxxxu   f s s [l xo ixxx?  e sxxe  xxxxt w xn xl f t  l a  k xxxxxxu e  f  pe a t make some simple get request (by [link]) in r  t o download the page containing the antiforgery token in a hidden input field, extracts it   se , an what d use it to make a valid [link]?  '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole point of hashing a password is in case a hacker gets access to the database. if i store the salt in the db within the same row as the hashed password, isn\'t it just like i am handing the hacker the "secret code"? i am putting up a door with a lock, and handing the intruder the key. '}
{'sentId': 75, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineering', 'em2Text': 'programs like cheat engine', 'label': 'OR'}, {'em1Text': 'programs like cheat engine', 'em2Text': 'reverse engineering', 'label': 'None'}], 'entityMentions': [{'start': 129, 'text': 'reverse engineering', 'label': 'ATTACK'}, {'start': 152, 'text': 'programs like cheat engine', 'label': 'ATTACK'}], 'sentText': "the problem is i want to store these data securely in the vb.net application so that it's hard for any hackers/crackers through (reverse engineering or programs like cheat engine) to get my gmail account data. "}
{'sentId': 1, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'read or change the value of the cookie', 'em2Text': 'guess the right get/post parameter', 'label': 'None'}, {'em1Text': 'guess the right get/post parameter', 'em2Text': 'read or change the value of the cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 82, 'text': 'read or change the value of the cookie', 'label': 'ATTACK'}, {'start': 168, 'text': 'guess the right get/post parameter', 'label': 'ATTACK'}], 'sentText': 'using cookies works, and is a common practice (e. g. [link]). the attacker cannot read or change the value of the cookie due to the same-origin policy, and thus cannot guess the right get/post parameter. '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 222, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 252, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference between a refresh token and a non-expiring access token in means of security is one additional call to the authorization server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as response.<br />now if he steals your refresh token, he first has to call the authorization server and receive an access token in response. then he can query the resource server for confidential data. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yoursxxf write privilexe to the system sixxxxxxxxxxx,  you're rixxxxg xxxt any prxxxxm thxt runs under you (not necessaxxxy  pyxxxn program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 11, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 146, 'text': 'read the plain-text password used to access the external service', 'label': 'ATTACK'}], 'sentText': "edit: due to discussion raised in the comments, let me clarify the threat i'm trying to address: i want to prevent an attacker from being able to read the plain-text password used to access the external service. meaning that if they somehow gained non-admin access to our network or database, even with the database dump they would not be able to read the passwords in plain text. "}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 126, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 150, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 'jwt does  . not  not protect you to a  a man-in-t n at  ot ot he token,   -midd not le (mitm) attack not . if an at is tacker gets a valid token, can effectively impersonate. even i to f the content is  (mitm) encrypted. '}
{'sentId': 116, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker knows the pattern', 'em2Text': 'login to jasper server', 'label': 'None'}, {'em1Text': 'login to jasper server', 'em2Text': 'hacker knows the pattern', 'label': 'PARENT'}], 'entityMentions': [{'start': 61, 'text': 'hacker knows the pattern', 'label': 'ATTACK'}, {'start': 101, 'text': 'login to jasper server', 'label': 'ATTACK'}], 'sentText': 'my question is this really a secured process because as soon hacker knows the pattern, he can simply login to jasper server ?to me looks like security can be compromised here.  am i missing something here?   '}
{'sentId': 94, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'modifying the app apk/jar', 'em2Text': 'adding a new class', 'label': 'PARENT'}, {'em1Text': 'modifying the app apk/jar', 'em2Text': 'helps bypass the licensing check', 'label': 'None'}, {'em1Text': 'adding a new class', 'em2Text': 'modifying the app apk/jar', 'label': 'None'}, {'em1Text': 'adding a new class', 'em2Text': 'helps bypass the licensing check', 'label': 'None'}, {'em1Text': 'helps bypass the licensing check', 'em2Text': 'modifying the app apk/jar', 'label': 'PARENT'}, {'em1Text': 'helps bypass the licensing check', 'em2Text': 'adding a new class', 'label': 'None'}], 'entityMentions': [{'start': 149, 'text': 'modifying the app apk/jar', 'label': 'ATTACK'}, {'start': 186, 'text': 'adding a new class', 'label': 'ATTACK'}, {'start': 211, 'text': 'helps bypass the licensing check', 'label': 'ATTACK'}], 'sentText': "i'm currently dealing with a particular issue with my paid application.  internally it contains a licensing check.  the app is patched by hackers by modifying the app apk/jar.  they are adding a new class which helps bypass the licensing check. "}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 87, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 111, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interg  ls  tt g quite fa ls st: they e astonishingly ls f attempts o  o circumvent security and exploit vulnerabilities in standard software packages tt are  vul an ner found abilities  co standard mmonly commonly found n f circumvent ou sites, nd  sites, like php ls myadmin, interg  ls  for  ls ls ums, etc. '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs there any wxy to protext exxxxxxxxn keys that are being xxxxxd in ram from a freezer attack? (sxxxxxxg the xxxxxxxr in a frexxxr before rebooting malicious code xo access the contenxs of ram) '}
{'sentId': 17, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 137, 'text': 'xss on a httml attribute', 'label': 'ATTACK'}], 'sentText': ' ng m hxv  ig to r evet k n xt  xn oxd p work   b xxp t a prevs develr a i that m n  l xxd exx. xt s i s ng addslxxxx) to p s r it event xss on a httml attribute. '}
{'sentId': 130, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'if a package from pypi has not been altered by an external party', 'label': 'ATTACK'}], 'sentText': 'i am not trying to forward these news but i am trying to prevent myself and other teammates to identify if a package from pypi has not been altered by an external party. '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, xe have a security xxxxxxxxxxxt if some bad person would take advantage of the indirect access to win api? '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 161, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 218, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 261, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app. there is no twitter account to hijack and start posting status updates on. malicious users could create links on my bit.ly account. they would need to do a separate attack to brute-force or otherwise gain the password to login to the account. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 77, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 115, 'text': 'third party application like google analytic could store in their report such urls and query string', 'label': 'ATTACK'}], 'sentText': 'urls with their query strings parameters are saved in web server log, and access to them could compromise security.third party application like google analytic could store in their report such urls and query string. '}
{'sentId': 90, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a security vulnerability to read php source', 'em2Text': 'string dumps from a security breach', 'label': 'OR'}, {'em1Text': 'string dumps from a security breach', 'em2Text': 'a security vulnerability to read php source', 'label': 'None'}], 'entityMentions': [{'start': 92, 'text': 'a security vulnerability to read php source', 'label': 'ATTACK'}, {'start': 216, 'text': 'string dumps from a security breach', 'label': 'ATTACK'}], 'sentText': "make the file unreadable via the web using rules in .htaccess (in case php fails or there's a security vulnerability to read php source)destroy the password in memory after the db connect is made (unset) (to prevent string dumps from a security breach, injection, etc.)  "}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 65, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 153, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 195, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': 'txxxxs w it works ri? but ivxe xxxd about brute force attack. it guesses the input values xxxxx? with xxe pe . doesxxt t xxxxs xxxt the xr only needs to get the $userinput information correct to get in? he xt need xo guess te lxxg xxxxd strxxg corrxx? '}
{'sentId': 52, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'blind sql injection', 'label': 'PARENT'}, {'em1Text': 'sql injection', 'em2Text': 'attacker is able to execute sql', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': 'attacker will know that he can execute sql', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': 'follow it up with a [link] to infect your server', 'label': 'None'}, {'em1Text': 'blind sql injection', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'blind sql injection', 'em2Text': 'attacker is able to execute sql', 'label': 'PARENT'}, {'em1Text': 'blind sql injection', 'em2Text': 'attacker will know that he can execute sql', 'label': 'None'}, {'em1Text': 'blind sql injection', 'em2Text': 'follow it up with a [link] to infect your server', 'label': 'None'}, {'em1Text': 'attacker is able to execute sql', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'attacker is able to execute sql', 'em2Text': 'blind sql injection', 'label': 'None'}, {'em1Text': 'attacker is able to execute sql', 'em2Text': 'attacker will know that he can execute sql', 'label': 'PARENT'}, {'em1Text': 'attacker is able to execute sql', 'em2Text': 'follow it up with a [link] to infect your server', 'label': 'None'}, {'em1Text': 'attacker will know that he can execute sql', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'attacker will know that he can execute sql', 'em2Text': 'blind sql injection', 'label': 'None'}, {'em1Text': 'attacker will know that he can execute sql', 'em2Text': 'attacker is able to execute sql', 'label': 'None'}, {'em1Text': 'attacker will know that he can execute sql', 'em2Text': 'follow it up with a [link] to infect your server', 'label': 'AND'}, {'em1Text': 'follow it up with a [link] to infect your server', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'follow it up with a [link] to infect your server', 'em2Text': 'blind sql injection', 'label': 'None'}, {'em1Text': 'follow it up with a [link] to infect your server', 'em2Text': 'attacker is able to execute sql', 'label': 'None'}, {'em1Text': 'follow it up with a [link] to infect your server', 'em2Text': 'attacker will know that he can execute sql', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 117, 'text': 'blind sql injection', 'label': 'ATTACK'}, {'start': 148, 'text': 'attacker is able to execute sql', 'label': 'ATTACK'}, {'start': 275, 'text': 'attacker will know that he can execute sql', 'label': 'ATTACK'}, {'start': 377, 'text': 'follow it up with a [link] to infect your server', 'label': 'ATTACK'}], 'sentText': "he is testing your server for sql injection,  specifically this is a robust test that will work even if its [link].  blind sql injection is when an attacker is able to execute sql however,  there isn't a viewable response.   if the http request takes at least 15 seconds the attacker will know that he can execute sql, and that your running ms-sql.   after this attack he will follow it up with a [link] to infect your server.  "}
{'sentId': 60, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'AND'}, {'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'PARENT'}], 'entityMentions': [{'start': 46, 'text': 'inspect the requests being made by a legitimate client', 'label': 'ATTACK'}, {'start': 116, 'text': 'steal the oauth client_id', 'label': 'ATTACK'}, {'start': 179, 'text': 'construct any request they want to impersonate the legitimate client', 'label': 'ATTACK'}], 'sentText': 'the major concern i have is that anyone could inspect the requests being made by a legitimate client to the api and steal the oauth client_id. at that point they would be able to construct any request they want to impersonate the legitimate client. '}
{'sentId': 32, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'user is logged in', 'em2Text': 'my vuex store retrieves all the info', 'label': 'None'}, {'em1Text': 'user is logged in', 'em2Text': 'user logs out', 'label': 'None'}, {'em1Text': 'user is logged in', 'em2Text': 'vuex state save still retains all its data', 'label': 'None'}, {'em1Text': 'user is logged in', 'em2Text': 'view what the state was before the user logged out', 'label': 'None'}, {'em1Text': 'my vuex store retrieves all the info', 'em2Text': 'user is logged in', 'label': 'PARENT'}, {'em1Text': 'my vuex store retrieves all the info', 'em2Text': 'user logs out', 'label': 'None'}, {'em1Text': 'my vuex store retrieves all the info', 'em2Text': 'vuex state save still retains all its data', 'label': 'None'}, {'em1Text': 'my vuex store retrieves all the info', 'em2Text': 'view what the state was before the user logged out', 'label': 'None'}, {'em1Text': 'user logs out', 'em2Text': 'user is logged in', 'label': 'None'}, {'em1Text': 'user logs out', 'em2Text': 'my vuex store retrieves all the info', 'label': 'PARENT'}, {'em1Text': 'user logs out', 'em2Text': 'vuex state save still retains all its data', 'label': 'None'}, {'em1Text': 'user logs out', 'em2Text': 'view what the state was before the user logged out', 'label': 'None'}, {'em1Text': 'vuex state save still retains all its data', 'em2Text': 'user is logged in', 'label': 'None'}, {'em1Text': 'vuex state save still retains all its data', 'em2Text': 'my vuex store retrieves all the info', 'label': 'None'}, {'em1Text': 'vuex state save still retains all its data', 'em2Text': 'user logs out', 'label': 'AND'}, {'em1Text': 'vuex state save still retains all its data', 'em2Text': 'view what the state was before the user logged out', 'label': 'None'}, {'em1Text': 'view what the state was before the user logged out', 'em2Text': 'user is logged in', 'label': 'None'}, {'em1Text': 'view what the state was before the user logged out', 'em2Text': 'my vuex store retrieves all the info', 'label': 'None'}, {'em1Text': 'view what the state was before the user logged out', 'em2Text': 'user logs out', 'label': 'None'}, {'em1Text': 'view what the state was before the user logged out', 'em2Text': 'vuex state save still retains all its data', 'label': 'PARENT'}], 'entityMentions': [{'start': 72, 'text': 'user is logged in', 'label': 'ATTACK'}, {'start': 154, 'text': 'my vuex store retrieves all the info', 'label': 'ATTACK'}, {'start': 243, 'text': 'user logs out', 'label': 'ATTACK'}, {'start': 265, 'text': 'vuex state save still retains all its data', 'label': 'ATTACK'}, {'start': 396, 'text': 'view what the state was before the user logged out', 'label': 'ATTACK'}], 'sentText': 'absolutely no data is stored in my vuex state when the page loadsif the user is logged in(or has info stored in [code] and therefore gets auto logged in) my vuex store retrieves all the info from a socket that requires authentication.then the user logs out, but my vuex state save still retains all its data this would be a security issue as not logged in people(or hackers) on a public pc could view what the state was before the user logged out. then call [code] when the user logs out. '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 124, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 211, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the access  load this server i this s norm access ally subjected to is mi i  can nimal,  to but since th nimal, e th re are no access restrictions,   restrictions, usly the server can obv to io can usly  can be attacked by dos etc. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 143, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 237, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 292, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 315, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxd thxy n fuzz for vulnxxxs in txe app cxxe and ext i, xxxt te xxxxd be sxxe indistinct general side channel attack or somethi. bxt how wouxd n axxxxxxr ry go t xxxxxg to recover those keys?  e e ve apps fr a dd attaxxxr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 74, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 12, 'text': 'a file can be fooled as an image and run malicious code', 'label': 'ATTACK'}], 'sentText': 'i know that a file can be fooled as an image and run malicious code so i searched about methods to avoid this. this is what i could find to check before store the image on the server: '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 234, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': 'm new to cxf ad i wod  i i f like o k has nw i xxw f it   xxs axy xxxl g d-n   mxxxxxxxm t w to o t xxf o xd alxxw lixxxg the nxxxe se r  i i  of xxxxxxxxxt cs xo th a e web sxxxxxx, thus adxe th xxxxg  xxxxxxxxxxy e pxxxxxxxxxy xf a dos attack? xxt i hg lxxxxxxg  simr to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe f wcf? '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 259, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 428, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 463, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'to give context why it is the way it is, the payload contains an expiration time and on the device when the token is about to expire i should prompt the user to re enter their credentials to get a new token. now this might seem like a security threat because a hacker could manipulate the token on the device, but the server checks the token to make sure it is authentic which is why i do not want the key on the device because this can be mined by a hacker, and make the entire application vulnerable. '}
{'sentId': 89, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'anyone who access the web', 'em2Text': 'modify javascript code', 'label': 'None'}, {'em1Text': 'anyone who access the web', 'em2Text': 'user can add the code lines as following', 'label': 'None'}, {'em1Text': 'modify javascript code', 'em2Text': 'anyone who access the web', 'label': 'PARENT'}, {'em1Text': 'modify javascript code', 'em2Text': 'user can add the code lines as following', 'label': 'None'}, {'em1Text': 'user can add the code lines as following', 'em2Text': 'anyone who access the web', 'label': 'None'}, {'em1Text': 'user can add the code lines as following', 'em2Text': 'modify javascript code', 'label': 'None'}], 'entityMentions': [{'start': 75, 'text': 'anyone who access the web', 'label': 'ATTACK'}, {'start': 112, 'text': 'modify javascript code', 'label': 'ATTACK'}, {'start': 214, 'text': 'user can add the code lines as following', 'label': 'ATTACK'}], 'sentText': 'the function call socket.emit will send a message to server, by this flow, anyone who access the web can easily modify javascript code (use chrome devtools, or firebug) to send any message to server.  for example, user can add the code lines as following: '}
{'sentId': 77, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'PARENT'}, {'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'PARENT'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'hacker see this happening and get those keys', 'label': 'ATTACK'}, {'start': 313, 'text': 'hackers will be able to build a hacked version', 'label': 'ATTACK'}, {'start': 373, 'text': 'all the levels pre-downloaded inside', 'label': 'ATTACK'}], 'sentText': ' xo is that sa m fe th otxc is    xr be  can the hacker see this happening and get those keys?  xe xo i xxxd t to o  i p p pg urchg r safe oc hackd e  t thoe kxxs at ?    at i am afxxxd e  th s r  out afe xt e  opxe  xl  see wxxl g  be ae to get t  th that e  hacker fs m x3 xxxh out e  purxxxxxxg the l. or xxxt hackers will be able to build a hacked version w xxxxxd xxh all the levels pre-downloaded inside keys . '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe and expxxxt it, xxxt there xxxxd be sxxe indistinct general side channel attack or something. bxt how wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe viable approaches for a dexxxxxxxd attaxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 77, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'include an img tag in their html page', 'em2Text': 'does a get on some well-known uri', 'label': 'None'}, {'em1Text': 'include an img tag in their html page', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'include an img tag in their html page', 'label': 'PARENT'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'include an img tag in their html page', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'does a get on some well-known uri', 'label': 'PARENT'}], 'entityMentions': [{'start': 76, 'text': 'include an img tag in their html page', 'label': 'ATTACK'}, {'start': 119, 'text': 'does a get on some well-known uri', 'label': 'ATTACK'}, {'start': 156, 'text': 'your browser will happily send along the basic auth info', 'label': 'ATTACK'}], 'sentText': 'uxxxg hxp basic auh xxxs not prevent csf s via gxt reque. e.g. sxy else can include an img tag in their html page xxxt does a get on some well-known uri, d your browser will happily send along the basic auth info. if e get operxxxn is "xxxx" h is xxe #1 rxxe r anything claiming to be restxxxx, txxs xxxl nt cxxxxe a problm (beyond wastxd bandwi. '}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 72, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 96, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interg g quite fast: they e astonishingly ls f attempts o circumvent security and exploit vulnerabilities in standard software packages tt are commonly found n sites, like phpmyadmin, forums, etc. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 64, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 114, 'text': 'directory transversal (aka path transversal) attack', 'label': 'ATTACK'}], 'sentText': 'i ha transversal ve  lnera a ja eing va webapp which is  dir ha ectory vu directory lnera directory bl a e to the directory transversal (aka path transversal) attack via url encoding. after transversa b l)  b i eing authenticated: '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 84, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 32, 'text': 'an sql injection attempt', 'label': 'ATTACK'}], 'sentText': "c appear learly this i appear s an sql injection attempt. but w constant hy the constan appear   i the t shown above? i can't see ho   see w  to i the t co o uld be particularly significan ho t, though it seems t part  icularly o appear quite see  frequently. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 133, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 222, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 282, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 305, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hw might an attacker recover the secrets in that flash? i underd they can z for vs in the app code and et it, that there cod be some indistinct general side channel attack or somet. but how wod an attacker reay go t tg to recover those keys?  are te viable s for a determined r o w shave-down the chip or some kind of microscope attack? '}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 71, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 147, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 217, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 255, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my probm is t i feel the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the r can w simy use that hash to get access to the user's information. in , te ar can intercept the plain-text password, ad use that to gain access to the user's account. "}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 375, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i haxe a stanxa  lone  cluste sxxxk c t lust  i subxxt xr runnin   h txxt ave g on and  a  t i heir xxxxxe sexxxr an maxxxxxs d i'm dxxxxxx.  xxw  xxxxxxx. to spark. i standalone t app ave ears that ation  xxxxxxs no authentic restxxxxxxxx. ation xxxxxe protect just ing the clxxxe new r maxxxxxs (707 their 7) p there's ort by dxf rexxxxxxxxxx. ault. anyone can just simpxy submit their own code to the cluster without any restrictions. "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t o e e y to stop ddos attacks from a certain ip (or pool of ips). s as xo e xt xxe nx level, r n y r in te x. do i need a web xn fxxxxxxx? if s, w do i ine it. '}
{'sentId': 86, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'malicious website takes advantage of your authenticated state on another website', 'em2Text': 'perform fraudulent cross-site requests', 'label': 'None'}, {'em1Text': 'perform fraudulent cross-site requests', 'em2Text': 'malicious website takes advantage of your authenticated state on another website', 'label': 'PARENT'}], 'entityMentions': [{'start': 81, 'text': 'malicious website takes advantage of your authenticated state on another website', 'label': 'ATTACK'}, {'start': 166, 'text': 'perform fraudulent cross-site requests', 'label': 'ATTACK'}], 'sentText': "both [code] and [code] are used to describe what's called a [code]. it's where a malicious website takes advantage of your authenticated state on another website, to perform fraudulent cross-site requests.  "}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 90, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': ' attacks  . what is  the the best  user way to protect the user and    any secure for any mitm attacks. what  is my way secure  any enough secu user re ? '}
{'sentId': 89, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss injections', 'em2Text': 'sql injection', 'label': 'AND'}, {'em1Text': 'sql injection', 'em2Text': 'xss injections', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'xss injections', 'label': 'ATTACK'}, {'start': 15, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'xss injections sql injection this is only a brief overview of t you can o with sql . to prott y, use mysql_real_escg or pdo or any god db abstraction layer. '}
{'sentId': 103, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'command injection', 'em2Text': 'a variable can contain malicious code', 'label': 'None'}, {'em1Text': 'a variable can contain malicious code', 'em2Text': 'command injection', 'label': 'None'}], 'entityMentions': [{'start': 100, 'text': 'command injection', 'label': 'ATTACK'}, {'start': 267, 'text': 'a variable can contain malicious code', 'label': 'ATTACK'}], 'sentText': 'i was wondering, nowadays with the most recent versions of sh, bash, ksh etc. is it possible to get command injection by executing this (very simple) script? despite of the fact that one can already execute code if they have a shell of course, i am just wondering if a variable can contain malicious code like for example in php:  '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? i know the referrer can be spoofed, but is there any way for the attacker to do that for the client? i know tokens are the norm, but would this work? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 119, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is that the attacker simply adds a slash then some encoded javascript (an image tag with alert box), which kills the page.  simple and effective attack.   '}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 102, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'someone uploaded several gifs, which when viewed with a browser, the browser said it was invalid, and my virus scanner alerted me that it was a injection.  see below for a zip file containing these gifs. '}
{'sentId': 79, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 370, 'text': 'avoid html and javascript injection  attacks', 'label': 'ATTACK'}], 'sentText': '  it is important to always  any be paxxxxxd  xxxu  t security xxxn  axxo accep injection xxxg any   us  er  i nput,  xxxxxxs nput, and  jaxxxxxxxt txxs is   axxo tru xxy accep  e whxn  binding oxxe user xxs to fxxm ixxxx. you inpux.   xs    s to to  xxu avoid xd be careful t usxr o always xxxl  enc form ode any user-xxxxxxd xxl should    this  attac accxp ks ues to  avoid html and javascript injection  attacks '}
{'sentId': 72, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access the php script they just uploaded', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'access the php script they just uploaded', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'visiting the url in their browser', 'label': 'PARENT'}, {'em1Text': 'the shell script to execute', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'the shell script to execute', 'label': 'None'}], 'entityMentions': [{'start': 119, 'text': 'access the php script they just uploaded', 'label': 'ATTACK'}, {'start': 163, 'text': 'visiting the url in their browser', 'label': 'ATTACK'}, {'start': 203, 'text': 'the shell script to execute', 'label': 'ATTACK'}, {'start': 232, 'text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'ATTACK'}], 'sentText': 'you have an d diry tt users can ud to.y upxxxd two : a shxxl s, and a php xxe that hs a [xxxx] call in it to txe xxl y access the php script they just uploaded by visiting the url in their browser, caxg the shell script to execute. if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it! if e e t is nxt set on that direxxy xxd xxy the xxxxs inse the , xxxn sp 3 axxxe would o n. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 99, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'recently i studd a lot rd to xss attacks. i was searching for pren techniques of xss attack.  '}
{'sentId': 13, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a bad guy to get a core dump', 'em2Text': 'somehow otherwise observe the heap', 'label': 'OR'}, {'em1Text': 'somehow otherwise observe the heap', 'em2Text': 'a bad guy to get a core dump', 'label': 'None'}], 'entityMentions': [{'start': 234, 'text': 'a bad guy to get a core dump', 'label': 'ATTACK'}, {'start': 265, 'text': 'somehow otherwise observe the heap', 'label': 'ATTACK'}], 'sentText': "my concxxn is that we shod ner stoe a usxr password xn a xg becxxe they're i.  i can't zero out that stxxxg as sn as xm done xxxxxxxxxxx.  tht oxxxxt will t in mey untxl the garbage collector run.  that ls open a mxxh wxxr window for a bad guy to get a core dump r somehow otherwise observe the heap. "}
{'sentId': 87, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 164, 'text': 'throw a [code] exception', 'label': 'ATTACK'}], 'sentText': 'i have a line where i grab a database row with [code].  a normal user would always send an [code] that exists in the database, but a hacker might not, and it would throw a [code] exception.  is it important to explicitly catch it or should i just leave the exception uncaught in that case?  either way, the hacker would not see any message so there is not any security risk either way. '}
{'sentId': 18, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'removing the strong name signature', 'em2Text': 'maliciously modifying your assembly', 'label': 'None'}, {'em1Text': 'removing the strong name signature', 'em2Text': 're-signing it with his own key', 'label': 'None'}, {'em1Text': 'removing the strong name signature', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 'removing the strong name signature', 'label': 'PARENT'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 're-signing it with his own key', 'label': 'None'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'removing the strong name signature', 'label': 'None'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'maliciously modifying your assembly', 'label': 'PARENT'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 'removing the strong name signature', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 'maliciously modifying your assembly', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 're-signing it with his own key', 'label': 'PARENT'}], 'entityMentions': [{'start': 75, 'text': 'removing the strong name signature', 'label': 'ATTACK'}, {'start': 111, 'text': 'maliciously modifying your assembly', 'label': 'ATTACK'}, {'start': 148, 'text': 're-signing it with his own key', 'label': 'ATTACK'}, {'start': 189, 'text': 'passing off his assembly as yours', 'label': 'ATTACK'}], 'sentText': '  "cannot stop full replacement. strong names cannot prevent a hacker from removing the strong name signature, maliciously modifying your assembly, re-signing it with his own key, and then passing off his assembly as yours." '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 108, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and want to kxw t s the mot secure wy to escape user input for forum posts. '}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 48, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 116, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 189, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a explo rt   sy rt stats i le ce states that"spring expression language (spel) sy  stem  could e exo sysm ited h http parameter submissions   th  at  ited  alw wod al o low attackers to get sensitive system data, application and user cookies. sy "  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 123, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 207, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 271, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 294, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xd y cn fuzz fr vulns in e p cxe and t it, xxxt there xxd be se indistinct general side channel attack r some. t how d an axxxxxxr y go t xxxxxg to recover those keys?  are thxxe e apprs for a dexd attaxxxr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 40, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create links to this page', 'em2Text': "put this link in an image's [code] attribute", 'label': 'OR'}, {'em1Text': 'create links to this page', 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'create links to this page', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': 'force users to get logged out', 'em2Text': 'create links to this page', 'label': 'PARENT'}, {'em1Text': 'force users to get logged out', 'em2Text': "put this link in an image's [code] attribute", 'label': 'PARENT'}], 'entityMentions': [{'start': 121, 'text': 'create links to this page', 'label': 'ATTACK'}, {'start': 155, 'text': "put this link in an image's [code] attribute", 'label': 'ATTACK'}, {'start': 211, 'text': 'force users to get logged out', 'label': 'ATTACK'}], 'sentText': "this will log the current user out of his/her session. since this is a simple get request, a malicious user could either create links to this page or even put this link in an image's [code] attribute that would force users to get logged out. i would still like to maintain the simplicity of the logout link without having to go too far, but at the same time i would like to be able to prevent the above scenario from occurring.  "}
{'sentId': 62, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time  taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 126, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 155, 'text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '   a in , a timing h      atk tg    is  se a e g  c side hl attack in whic  h the  at algorithm. timing    tr a to ttempts to compromise a cryptosystem by analyzing the time  taken to execute cryptographic algorithms. ch  y,  '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 46, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 141, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'th page. e p  robm is tht the attacker simply adds a slash n e encoded javascript n image tag     with aler slash wh  t b tht ox slash ), wh kills the page.  e  simple an slash  wh d effectie a simple    and page with .  ttack.   '}
{'sentId': 138, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': "i have head that it's possible to trigger xss attacks through s ([li, [li. "}
{'sentId': 11, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 23, 'text': 'removes "dangerous" attributes and tags from html', 'label': 'ATTACK'}], 'sentText': 'we have some code that removes "dangerous" attributes and tags from html.  i noticed that [code] is among the list of "dangerous" attributes.  what could be the risk from that attribute? '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem   is tha even t  an is d even though my proj and e and ct is 100% legal, and not shady, it is ct  highl ddos y susce problem  ddos ptible to o though ccasional ddos attacks. '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files memoryread  fi file (user) s les  '}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 14, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "te pm is that users might upload code that attempts to 'hack' the system. i ud that in c and c+ is y to disabe a n set of sm calls (patch a fw ., but m not so sure t other lan. "}
{'sentId': 158, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'accessing/modifying/creating any files outside of their folder', 'em2Text': 'connecting to the internet/downloading/sending data', 'label': 'AND'}, {'em1Text': 'connecting to the internet/downloading/sending data', 'em2Text': 'accessing/modifying/creating any files outside of their folder', 'label': 'None'}], 'entityMentions': [{'start': 379, 'text': 'accessing/modifying/creating any files outside of their folder', 'label': 'ATTACK'}, {'start': 446, 'text': 'connecting to the internet/downloading/sending data', 'label': 'ATTACK'}], 'sentText': 'i want to allow users to make their own python "mods" for my game, by placing their scripts in a special folder which the game "scans" for python modules and imports.what would be the simplest way to prevent "dangerous" scripts from being imported? i don\'t want people complaining to me that they used someone\'s mod and it erased their hard drive.things i would like to limit is accessing/modifying/creating any files outside of their folder and connecting to the internet/downloading/sending data. if you can thik of anything else, let me know. '}
{'sentId': 25, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'download the data', 'em2Text': 'proxy system', 'label': 'None'}, {'em1Text': 'proxy system', 'em2Text': 'download the data', 'label': 'PARENT'}], 'entityMentions': [{'start': 96, 'text': 'download the data', 'label': 'ATTACK'}, {'start': 285, 'text': 'proxy system', 'label': 'ATTACK'}], 'sentText': 'suppose that a data source sets a tight ip-based throttle.  would a web scraper have any way to download the data if the throttle starts rejecting their requests as early as 1% of the data being downloaded? the only technique i could think of a hacker using here would be some sort of proxy system.  but, it seems like the proxies (even if fast) would eventually all reach the throttle. '}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 136, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 88, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to se a file i dd the followg s rs a hashve that is std n a file. whener the user ws to access the file, he enters the password, and if the same hash is generated, he can access the file.i se this isn't realy sa, but how e it is? how high is e chance that string#hase gs the e hash with two dift inputg to your anss i changed the co t should be betr now?? "}
{'sentId': 92, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'including the  fields in the manifest to have account management access', 'em2Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'None'}, {'em1Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'em2Text': 'including the  fields in the manifest to have account management access', 'label': 'PARENT'}], 'entityMentions': [{'start': 82, 'text': 'including the  fields in the manifest to have account management access', 'label': 'ATTACK'}, {'start': 177, 'text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'ATTACK'}], 'sentText': "due to this, i'm starting to wonder what stops an arbitrary malicious app from 1) including the  fields in the manifest to have account management access, and then then 2) from iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them. i know that during installation, a dialog pops up with all the permissions that an app requests to use, but i don't think we can count on the average user to reject an app because it requests suspicious permissions. "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 129, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 175, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'xxxxxs  tabl ar xd ed ex, e xr oe ocexs  imxu [c tl xxxx, e. that means one y e xxxxe xxxxt [c  xxxx, ed txe [c xxxs yxu  od, xf another process can dump memory xx. , txxxxxs no way you can get rid of the data bf xxxs ore [lixx] kic xxe ks xx. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 113, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 178, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 226, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 248, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mxxxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxs xn e app xxe xd t , t te d be xe indistinct general side channel attack r . t xxw d n r y o t g o recover those keys?  xe e ve xs for a d xr to w shave-down the chip r some kind of microscope attack? '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 49, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 172, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 243, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked if n attr cn gain access to the system under the same user account as your code.xn xe xxx, dt uxxx, rot h, xxxxs xn ixxxt a . f an r xn get access as the same user or as root, xe gxt far xxxr xx. fxr e, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 222, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 252, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference between a refresh token and a non-expiring access token in means of security is one additional call to the authorization server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as response.<br />now if he steals your refresh token, he first has to call the authorization server and receive an access token in response. then he can query the resource server for confidential data. '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 134, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': 'i  f    senxxxxxe   of h in xs  ash an ar txe  gets ahold of the data in the datastore, as well as our hash salt, im wod t  xxy in  d brute force the sensitive data im  t .  xn  the  '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'wt i and s the best  to way to protect te use the r and the   is s protect ecure r any mitm attacks. is my way secur e e to  e ad n? way  '}
{'sentId': 27, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'man in the middle attack', 'em2Text': 'eavesdropping', 'label': 'AND'}, {'em1Text': 'eavesdropping', 'em2Text': 'man in the middle attack', 'label': 'None'}], 'entityMentions': [{'start': 343, 'text': 'man in the middle attack', 'label': 'ATTACK'}, {'start': 398, 'text': 'eavesdropping', 'label': 'ATTACK'}], 'sentText': 'now adding a 3rd participant to txxs communication will not wxxk because key exchange axxxxxxxxs are designed to derive a shxxxd secxxt from 2 public keys xxxy (especixxxy using .net and bouncycastle). so the question is, how would xxu go abxxt implementing a n-paxxy pxxxxc key cxxxxxxxxxxy schema which is xxxxl xxxxxxxxc (i.e. rexxxxxxt to man in the middle attack) and sexxxe (i.x. secure from eavesdropping). '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 68, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'attacker can read your memory', 'em2Text': 'access to your memory ', 'label': 'None'}, {'em1Text': 'access to your memory ', 'em2Text': 'attacker can read your memory', 'label': 'None'}], 'entityMentions': [{'start': 23, 'text': 'attacker can read your memory', 'label': 'ATTACK'}, {'start': 225, 'text': 'access to your memory ', 'label': 'ATTACK'}], 'sentText': 'some thixk thxt "if an attacker can read your memory, you have xxx% lxxxx" (comxxxt to [link]), which indicatxs txxt whether you xxxxe pasxxxxxs in memory or not might be superfxxxxx, since you\'re screwed anyway if they have access to your memory (see [link], which shows an exampxe of how acxxxs to mexxxy in xn umnanaged envixxxxxxt can be pretxy disaxxxxxxx. '}
{'sentId': 162, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'em2Text': 'spoof that user', 'label': 'None'}, {'em1Text': 'spoof that user', 'em2Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'ATTACK'}, {'start': 192, 'text': 'spoof that user', 'label': 'ATTACK'}], 'sentText': 'f yor user id is a sl , this is prey insece as anyone can just change their cookie to another reasonable-looking number based on their own (e.g. if mie is 1, i d try some r s n that ra) and y spoof that user. '}
{'sentId': 146, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a man in the middle attack', 'em2Text': 'cookie hijacking', 'label': 'None'}, {'em1Text': 'cookie hijacking', 'em2Text': 'a man in the middle attack', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'a man in the middle attack', 'label': 'ATTACK'}, {'start': 109, 'text': 'cookie hijacking', 'label': 'ATTACK'}], 'sentText': 'above said, anxxxxxg you do is subjext to a man in the middle attack. xxxs is the xxxe for lots of sites, so cookie hijacking is a problxm axl arounx. '}
{'sentId': 59, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': "someone may steal that user's remember key", 'em2Text': "spoof the user's identity", 'label': 'None'}, {'em1Text': "someone may steal that user's remember key", 'em2Text': 'change his password', 'label': 'None'}, {'em1Text': "spoof the user's identity", 'em2Text': "someone may steal that user's remember key", 'label': 'PARENT'}, {'em1Text': "spoof the user's identity", 'em2Text': 'change his password', 'label': 'None'}, {'em1Text': 'change his password', 'em2Text': "someone may steal that user's remember key", 'label': 'None'}, {'em1Text': 'change his password', 'em2Text': "spoof the user's identity", 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': "someone may steal that user's remember key", 'label': 'ATTACK'}, {'start': 92, 'text': "spoof the user's identity", 'label': 'ATTACK'}, {'start': 137, 'text': 'change his password', 'label': 'ATTACK'}], 'sentText': 'makes it much more likely that someone may steal that user\'s remember key, allowing them to spoof the user\'s identity (and then probably change his password);[link] - [link]. your feature will effectively allow an anonymous attacker to cause unknowing users to submit "authenticated" requests to your application, even without being actually logged in. '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem is that even thoxxh my prxxxxt is 100% legax, and not sxxxx, it is highly suscexxxxxe to occasional ddos attacks. '}
{'sentId': 37, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'output escaping', 'label': 'None'}, {'em1Text': 'output escaping', 'em2Text': 'sql injection', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 39, 'text': 'output escaping', 'label': 'ATTACK'}], 'sentText': 'note: i take care of sql injection and output escaping elsewhere - this question is about input filtering only, thanks. '}
{'sentId': 158, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'accessing/modifying/creating any files outside of their folder', 'em2Text': 'connecting to the internet/downloading/sending data', 'label': 'AND'}, {'em1Text': 'connecting to the internet/downloading/sending data', 'em2Text': 'accessing/modifying/creating any files outside of their folder', 'label': 'None'}], 'entityMentions': [{'start': 321, 'text': 'accessing/modifying/creating any files outside of their folder', 'label': 'ATTACK'}, {'start': 388, 'text': 'connecting to the internet/downloading/sending data', 'label': 'ATTACK'}], 'sentText': 'i want to allow us to mae r own pythn "mods" for y xxxx, by pg their scripts in a special xxr wh the gaxe "sc" for pytxxn modulxs d impt would be the simpxxxt way to prxxxxt "xxxxxxxxx" scs from being ? i dxxxt waxt people compg to me xxxt they usd xxxxxxs md xxd it erased their hd drivexxxxxxs i xxxxd like to limit is accessing/modifying/creating any files outside of their folder and connecting to the internet/downloading/sending data. if you can k of xxxxxxxg , xxt me k. '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 14, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 59, 'text': 'sql injections attacks', 'label': 'ATTACK'}], 'sentText': 'thexe is a major prxxxxm in the code - it is vulnerable to sql injections attacks since txe quxxy xs not parametexxxxd xxxxxxh db xxi and is conxxxxxxxd via string xxxxxxxxxx. xf you call the function xxxs way: '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 38, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'ls y we e a tl csf pron le this ot if an attacket uses this code to bypass the csrf token? '}
{'sentId': 7, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'hack the game', 'em2Text': 'increasing high score by using software such as cheat engine', 'label': 'PARENT'}, {'em1Text': 'increasing high score by using software such as cheat engine', 'em2Text': 'hack the game', 'label': 'None'}], 'entityMentions': [{'start': 98, 'text': 'hack the game', 'label': 'ATTACK'}, {'start': 115, 'text': 'increasing high score by using software such as cheat engine', 'label': 'ATTACK'}], 'sentText': 'i recently made a simple game where user can submit his/her high scores online.it is very easy to hack the game by increasing high score by using software such as cheat engine. high score is stored in an integer. should i store encrypted high score instead of an integer and decrypt it to show in the game? '}
{'sentId': 57, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'em2Text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'OR'}, {'em1Text': 'compromise the user-experience for other players by, for example, hacking', 'em2Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'None'}], 'entityMentions': [{'start': 282, 'text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'ATTACK'}, {'start': 402, 'text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'ATTACK'}], 'sentText': "pointers and insight on security measures that i should take into consideration when developing software, mainly games, such as the one described below. by security i mean checking and double checking that a user doesn't act in a way not intended. this could mean behaviour such as sending his/her updated collection of the most malicious viruses in existance to the server/other clients, or otherwise compromise the user-experience for other players by, for example, hacking. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i wouxd  i i f like to k has now i xxw f it   has any buil ssixg d-xn   mxxxxxxxm thxt w to o t xxf o uld alxxw limiting the nuxxe se r  i i  of conxxxxxxt caxxs xo th a e web sxxxxxx, thus addre th ssing  xxxxxxxxxxy the possixxxxxy xf a dos attack? somxt i hing lxxxxxxg  similar to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe of wcf? "}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 55, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 228, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 324, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': "an in-memory password can be leaked if an attacker can gain access to the system under the same user account as your code.an on-device attacker, different user, root however, there's an important gotcha here. if an attacker can get access as the same user or as root, you've got far bigger problems. for example, they could tamper with your code to send all passwords (when they are entered) to them remotely. "}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 171, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 292, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a exp  (s data, pel)  lo     rt   sy rt   stats i  e sysm  alw  le ce states that"spring expression language (spel) s  y  "  stem    could e e  xo sysm get  i    ted h http parameter submissions that"sprin  g      th  at  ited  alw wod al o low at applicat e   get th ion tacke lo   rs to get sensitive system data, application and user cookies. s   sy   y "  '}
{'sentId': 104, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'if i understood it correctly, the goal of the same-origin policy is to prevent csrf attacks and the goal of cors is to enable resource sharing if (and only if) the server agrees to share its data with applications hosted on other sites (origins). '}
{'sentId': 49, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 97, 'text': 'unauthorized changes', 'label': 'ATTACK'}], 'sentText': "so then the next questi changes? on c '07 ame. the  how do i se and cure   my app to pre in vent unauthorized changes? in  a do preve url nt in  g some research secure  i found a couple  secure articles unauthorized  tal  king about  c unauthorized an   [code] in  and [code] and how they so  can be used.   th  e particular url in  i found t how al  king about these was posted back in may of '07 ([link]).  [code]   secure   "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d txy can xxxz xr xxxxxxxxxxxs xn te app cxe ad t , t te xxxd xe xe indistinct general side channel attack r . xt hxw d n ar y o t tryg o recover those keys?  xe e xe xxxs for a d xr to sxxxxxw shave-down the chip r some kind of microscope attack? '}
{'sentId': 98, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'allow an attacker to predict boot time of the machine', 'em2Text': 'being able to grant control over it', 'label': 'None'}, {'em1Text': 'being able to grant control over it', 'em2Text': 'allow an attacker to predict boot time of the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 307, 'text': 'allow an attacker to predict boot time of the machine', 'label': 'ATTACK'}, {'start': 366, 'text': 'being able to grant control over it', 'label': 'ATTACK'}], 'sentText': "we've hired a security consultant to perform a pentest on our application's public ip (kubernetes loadbalancer) and write a report on our security flaws and the measurements required to avoid them. their report warned us that we have tcp timestamp enabled, and from what i've read about the issue, it would allow an attacker to predict boot time of the machine thus being able to grant control over it. "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 148, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 193, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs maxed   other password_veri same fy() out  ( saxe and s site-xxxe ituxxxxn parametxxs s  xxxxr funcxxxn maxed s of the same funxxxxn set) xxxxxr dos ab post le xxxxn con  xxg st d st os via maxed out post parameters ? plexxe also conxxxxr the  site-wxxe c again onxxg sxxxxt le ions of post upxxxd sizes mxxh largxr than 4mb. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i uxxxxxxxxd they can fxxz for vulnexxxxxxxxxs in the app xxxe and xxxxxxt it, that xxxxe could be some indistinct general side channel attack or sxxxxxxxx. but how would an xxxxxxxr xxxxxy xo xxxxt txxxxg to recover those keys?  xxe xxxxe vxxxxe appxxxxxxs for a determined atxxxxxr xo xxxxxxw shave-down the chip xr some kind of microscope attack? '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': 'txxxxs how it worxs rixxx? but ivxe xxxd about brute force attack. xt guesses the input values xxxxx? with xxe procedure above. xxxxxxt it xxxxs xxxt xxe xxxxxxxr only nxxxs to get the $userinput information correct to get in? he xxxxxxt xxxd xo xxxxs the lxxg xxxxxxxxxd strxxg corrxxx? '}
{'sentId': 100, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'man-in-the-middle attack', 'em2Text': 'generate certificates on the fly with its own ca', 'label': 'PARENT'}, {'em1Text': 'generate certificates on the fly with its own ca', 'em2Text': 'man-in-the-middle attack', 'label': 'None'}], 'entityMentions': [{'start': 84, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 137, 'text': 'generate certificates on the fly with its own ca', 'label': 'ATTACK'}], 'sentText': "i'm lookg r a transparent xxxxxxs proxy tool to e (and change?) gexxxxc sslxxxs xc (man-in-the-middle attack). basxxy xxxxxxxxg that can generate certificates on the fly with its own ca. in a way, i'm looking for g like , t r xxxxxxx) txx. y su? "}
{'sentId': 88, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'get the token', 'em2Text': 'csrf', 'label': 'None'}, {'em1Text': 'csrf', 'em2Text': 'get the token', 'label': 'PARENT'}], 'entityMentions': [{'start': 425, 'text': 'get the token', 'label': 'ATTACK'}, {'start': 285, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'but what does that accomplish? aren\'t you just taking session data, putting it in the page, and then comparing it with the exact same session data? seems like circular reasoning. these articles keep talking about following the "same-origin policy" but that makes no sense, because all csrf attacks are of the same origin as the user, just tricking the user into doing actions he/she didn\'t intend. the attacker has no way to get the token. therefore the requests won\'t take any effect. i recommend this post from gnucitizen. it has a pretty decent csrf explanation: [link] '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per uxxr salt prevents the use of generic rainbow tables to crack passwords.  a separate xxxxxxw e woxd have xo be generated xxr eah d xxxxy r o had a uxxxxe salt in r to obtain r x.  s would xe a tixe cg proxxxs h is what mxxxs sxxxs xxxx.  ths ds xxt help a ts axxxxt against dictioxxy or brue force attacks. '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capa i bi capa lity de.  to sto i p ddos attacks from a certain ip (or pool of ips). this as to be at t  t a h  e  i nginx level, rath ddos  i er t  the the han any deeper in  ddo to s the i it. t to .  co capability de. do i need a w of eb application firewall? if so, i capa t.   the how do i i in so, tegrate ntegrate it. '}
{'sentId': 97, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'block the vm', 'label': 'AND'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'AND'}, {'em1Text': 'block the vm', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'PARENT'}, {'em1Text': 'eating all the memory', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'eating all the memory', 'label': 'PARENT'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': "expect 'em getting moved away", 'label': 'AND'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': "expect 'em getting moved away", 'label': 'PARENT'}, {'em1Text': 'the jvm crashes', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'the jvm crashes', 'label': 'PARENT'}], 'entityMentions': [{'start': 35, 'text': 'do all my code in the finalizer thread', 'label': 'ATTACK'}, {'start': 83, 'text': 'block the vm', 'label': 'ATTACK'}, {'start': 97, 'text': 'same doing [code] bye-bye new threads', 'label': 'ATTACK'}, {'start': 136, 'text': 'eating all the memory', 'label': 'ATTACK'}, {'start': 195, 'text': 'accessing zip files in my own jar', 'label': 'ATTACK'}, {'start': 234, 'text': "expect 'em getting moved away", 'label': 'ATTACK'}, {'start': 268, 'text': 'the jvm crashes', 'label': 'ATTACK'}, {'start': 334, 'text': 'deny resources', 'label': 'ATTACK'}], 'sentText': "xf i wxxxa be malicioxs i am xxxxa do all my code in the finalizer thread and xxxt block the vm. same doing [code] bye-bye new threads. eating all the memory, eating all dirxxt memory xxd so ox. accessing zip files in my own jar, xxd expect 'em getting moved away, so the jvm crashes (due xo bug(s) in zlib) if one purposely wants to deny resources, it is juxt not a feasxxxe txxk to try and catch the hacker. you'd need to know xxxt to search for xxd dynxxxxxxxy check/enhance txe claxxxs on run-time to disallow xxe bxxxxxxx.  "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 13, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'javascript injection attacks', 'label': 'ATTACK'}], 'sentText': 'i know that i need to prevent javascript injection attacks. how do i do this? '}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 71, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 175, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 252, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i manage a secured php/mysql web app with extensive jquery use. today, a strange error popped up in our app's logs:[code] we are not using amazon's cloudfront cdn in our app. when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 69, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 23, 'text': 'xss', 'label': 'ATTACK'}], 'sentText': 'is this technically an xss attack or something else? [link] commit, if it were pulled, would have prevented this xss vulnerability. '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'wt i xxd s the best  to way to protect xe use the r and xxe   is s protect ecure r any mitm attacks. xs my way sxxxr e e xo  e ad n? way  '}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 69, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 108, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': "  xf the session identifier were known by an attacker o the t r he   had access to  the user's workstation, the logged out session could be accessed us  xg  tx xd  to  the an  e  session sesn    to    the     xx  x to xe r   xxe ur xd the  be  texd r s.  "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welxxxx, [yoxr nxxxx"  pages they  on pxxxxc pa pagxs xxs fo of r axxxxxxxxa and ted users, even i pages p  f they us  xxxxxd therefore e hxxx? of cours  cours shoxxd e, i wou axxxxxxxc e] a ld  th ages erefore  the like to kee [codx] p the ac xxxxxxxxxa cess to the sensitive p an therefore d ages sxxx, xxd i should  xa xo  txxxxxxxe keep [cod f e] to avoid possibxe stealing of the session token an . '}
{'sentId': 37, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'buffer overflow attacks', 'label': 'ATTACK'}], 'sentText': 'wxxt are txe ideas do  f pre att nt is ig buffer overflow attacks? axd i h d  buxxxr eard about xxxxt until now axt so a?  is ts prom cp sg letely sxxd b  y ap  pg g att f  t provxxe echnxx? acks? tecxxxxxxx?  d  h o eaxd r comb xxxxl n f a a? p  xt with other technix?   wy d stackg o you xxxk h  tt it is o  diffit to provide adequate  xxxs for  bxxxe diffict r xxxxxr ow a? o g ther  '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': 'txxxxs how it works rixxx? but ivxe xxxd about brute force attack. it guesses the input values xxxxx? with xxe procedure above. doesxxt it xxxxs xxxt the xxxxxxxr only needs to get the $userinput information correct to get in? he xxxxxxt need xo guess the lxxg xxxxxxxxxd strxxg corrxxx? '}
{'sentId': 24, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'getting subscription_json from client', 'em2Text': 'converting it to string', 'label': 'AND'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'setting it to model object using gson library', 'label': 'None'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'setting it to model object using gson library', 'label': 'AND'}, {'em1Text': 'converting it to string', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'setting it to model object using gson library', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'getting subscription_json from client', 'label': 'ATTACK'}, {'start': 49, 'text': 'converting it to string', 'label': 'ATTACK'}, {'start': 80, 'text': 'setting it to model object using gson library', 'label': 'ATTACK'}, {'start': 167, 'text': 'json injection', 'label': 'ATTACK'}], 'sentText': 'i am getting subscription_json from client h i m converting it to string ad thn setting it to model object using gson library. on g the ce on foy securi, it is gig me json injection error on bew code with fg message : '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem is that even though my project is 100% legal, and not shady, it is highly susceptible to occasional ddos attacks. '}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 102, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'sxxxxxe uploaded several gifs, which when viewed with a browser, the browser said it was invalid, and my virus scanner alerted me that it was a injection.  xxe below xxr a xxp xxxe contaxxxxg these gifs. '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 201, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 355, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 390, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'o ge ct why it is te way it is, the payd contais an n time and on the device n the token is at to exe i should t the user to e r their s to get a new token. now this might m like a secy threat because a hacker could manipulate the token on the device, but te server chs the token to make sure t is authentic which is why i o nt want the key on the dee be this can be mined by a hacker, and make the entire application vulnerable. '}
{'sentId': 80, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 10, 'text': 'exec shell by exploiting format string vulnerability', 'label': 'ATTACK'}], 'sentText': 'i want to exec shell by exploiting format string vulnerability,so, i wanted to rewrite [code] function address from got by the address of my shellcode stored into environment variable. '}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 102, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'someone uploaded several gifs, which when viewed with a browser, the browser said it was invalid, and my virus scanner alerted me that it was a injection.  see below for a zip file containing these gifs. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 116, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 156, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'sts  l ar od ed ex, e xr oe ocess  imxu c tl od, e. that means once y befe oe crext [c  xxxx, ed the [c s you  o, f another process can dump memory xx. , s no way you can get rid of the data bef xxs ore [lixx] c te ks in. '}
{'sentId': 31, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'our whole history of changes', 'label': 'AND'}, {'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'copying a single folder', 'label': 'PARENT'}, {'em1Text': 'our whole history of changes', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'our whole history of changes', 'em2Text': 'copying a single folder', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'our whole history of changes', 'label': 'None'}], 'entityMentions': [{'start': 267, 'text': 'steal not only the latest intellectual properly ', 'label': 'ATTACK'}, {'start': 319, 'text': 'our whole history of changes', 'label': 'ATTACK'}, {'start': 359, 'text': 'copying a single folder', 'label': 'ATTACK'}], 'sentText': "  difficult e it's  e gathere xact been difficult to nail  history down  intellectual that   th his exact se steal curity concern but i've gathere on d that it ce o of f but  nter fac nail t s on th not e fact that  it' employee s of  a malicious employee c but ould steal not only the latest intellectual properly but our whole history of changes just a  by copying a single folder. that  "}
{'sentId': 44, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 221, 'text': 'renaming the superuser.apk to superuser0.apk.', 'label': 'ATTACK'}], 'sentText': 'the major techniques used by developers in root detection are checking for the superuser.apk file,check for chainfire,busybox,executing su command,etc. but an attacker can simply bypass these checks by several means like renaming the superuser.apk to superuser0.apk.  '}
{'sentId': 29, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'debug my code and find my url', 'em2Text': 'send amount of data to my site and make it down', 'label': 'None'}, {'em1Text': 'send amount of data to my site and make it down', 'em2Text': 'debug my code and find my url', 'label': 'PARENT'}], 'entityMentions': [{'start': 258, 'text': 'debug my code and find my url', 'label': 'ATTACK'}, {'start': 320, 'text': 'send amount of data to my site and make it down', 'label': 'ATTACK'}], 'sentText': "it is an example and my real code send much more data to server, and maybe code above doesn't work, i just make my question more exact and specific as stackoverflow want me.my question is how to make these transactions safe and secure from hackers which may debug my code and find my url , in code above (params[0]) and send amount of data to my site and make it down. or how can i use the service of sending data to server more secure from these kind of dangers?? "}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 28, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what xxxxt securit? mee hacker can find the way to change some of my [code] statements, ad e my e wil b. '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if you are concerned with the first case (someone posting malicious data to/as another user) the solution is the same whether you are using ajax or not -- you just have to authenticate the user through whatever means is necessary -- usually via session cookie. '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 234, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welcome, [your name]" on public pages for authenticated users, even if they use http? of course, i would like to keep the access to the sensitive pages safe, and i should therefore keep [code] to avoid possible stealing of the session token. '}
{'sentId': 13, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a bad guy to get a core dump', 'em2Text': 'somehow otherwise observe the heap', 'label': 'OR'}, {'em1Text': 'somehow otherwise observe the heap', 'em2Text': 'a bad guy to get a core dump', 'label': 'None'}], 'entityMentions': [{'start': 280, 'text': 'a bad guy to get a core dump', 'label': 'ATTACK'}, {'start': 312, 'text': 'somehow otherwise observe the heap', 'label': 'ATTACK'}], 'sentText': "my concern is that we should never store a user password in a java.lang.string because they're immutable.  i can't zero out that string as soon as i'm done authenticating.  that object will sit in memory until the garbage collector runs.  that leaves open a much wider window for a bad guy to get a core dump or somehow otherwise observe the heap. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 124, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 211, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the access  load this server i this s norm access ally subjected to is mi i  can nimal,  to but since th nimal, e th re are no access restrictions,   restrictions, usly the server can obv to io can usly  can be attacked by dos etc. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 190, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 250, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt e . e s  xt e us d  o r u g nt  s y  o i do j . k   d  o t g s d s ua   g ts    r o. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xu  t c  s d   . xe d o l do n  s o e . '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 222, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 252, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference between a refresh token and a non-expiring access token in means of security is one additional call to the authorization server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as response.<br />now if he steals your refresh token, he first has to call the authorization server and receive an access token in response. then he can query the resource server for confidential data. '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 112, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 142, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 172, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 244, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i inherited some code that was recently attacked by repeated remote form submissions. however, the attacker now requests the form page first, starting a valid session, and then passes the session cookie in the following post request. therefore having a valid session token. so fail on my part. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 83, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 138, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  xf yu e xf xxxe pe o txe m xxxx,  yoxxxe g t xxy m txxt rs under u t y  n xx) cn inject malicious code into the system  site-packages d obtain root privilege. '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 124, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 211, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the access  load this server i this s norm access ally subjected to is mi i  can nimal,  to but since th nimal, e th re are no access restrictions,   restrictions, usly the server can obv to io can usly  can be attacked by dos etc. '}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 156, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'cou xxxn ld you xxxxxe list xm xxxxxxy e strat servx? egi som es  ld or evn approaxxxs you   xxxe xl xxxn ready  servi? xxxxxxd xo xxxxxxxc hxxe t es /mine ddos attacks xxn rel   b se? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 112, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 169, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you e yoursxf we e to e system ,  you're rig t ay prxxxxm thxt runs under you (nt necessaxxxy  pyxxn ) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 88, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker get an access', 'em2Text': "stole the user's cookie", 'label': 'None'}, {'em1Text': "stole the user's cookie", 'em2Text': 'hacker get an access', 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': 'hacker get an access', 'label': 'ATTACK'}, {'start': 57, 'text': "stole the user's cookie", 'label': 'ATTACK'}], 'sentText': "solutions (how to prevent hacker get an access if he/she stole the user's cookie): "}
{'sentId': 4, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'potential attacker is able to change code', 'em2Text': 'application from being modified', 'label': 'PARENT'}, {'em1Text': 'application from being modified', 'em2Text': 'potential attacker is able to change code', 'label': 'None'}], 'entityMentions': [{'start': 124, 'text': 'potential attacker is able to change code', 'label': 'ATTACK'}, {'start': 287, 'text': 'application from being modified', 'label': 'ATTACK'}], 'sentText': "and also whate  ve to y well sad b y y  cant @inaz to aruk: we protection ver you also   also do to  y code, ou your cod, a potential attacker is able to change code prote there ction  n  ce y  poten b tial wy se or he finds it feasible. u bas tial icay can't p we r ve otect  , l  r b  application from being modified. and any pt code, ecn you in  put in there n be disabl  is can't ed/r. "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 117, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this aph provs defense-in. if someone manages to leak the database table, it does nt give an attacker an open door r impersonating users. '}
{'sentId': 82, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'write to the task queue', 'em2Text': 'pown the worker processes', 'label': 'None'}, {'em1Text': 'write to the task queue', 'em2Text': 'writing malicious pickled objects', 'label': 'AND'}, {'em1Text': 'write to the task queue', 'em2Text': 'running tasks serialized with pickle', 'label': 'None'}, {'em1Text': 'pown the worker processes', 'em2Text': 'write to the task queue', 'label': 'None'}, {'em1Text': 'pown the worker processes', 'em2Text': 'writing malicious pickled objects', 'label': 'None'}, {'em1Text': 'pown the worker processes', 'em2Text': 'running tasks serialized with pickle', 'label': 'PARENT'}, {'em1Text': 'writing malicious pickled objects', 'em2Text': 'write to the task queue', 'label': 'None'}, {'em1Text': 'writing malicious pickled objects', 'em2Text': 'pown the worker processes', 'label': 'None'}, {'em1Text': 'writing malicious pickled objects', 'em2Text': 'running tasks serialized with pickle', 'label': 'None'}, {'em1Text': 'running tasks serialized with pickle', 'em2Text': 'write to the task queue', 'label': 'PARENT'}, {'em1Text': 'running tasks serialized with pickle', 'em2Text': 'pown the worker processes', 'label': 'None'}, {'em1Text': 'running tasks serialized with pickle', 'em2Text': 'writing malicious pickled objects', 'label': 'None'}], 'entityMentions': [{'start': 265, 'text': 'write to the task queue', 'label': 'ATTACK'}, {'start': 305, 'text': 'pown the worker processes', 'label': 'ATTACK'}, {'start': 334, 'text': 'writing malicious pickled objects', 'label': 'ATTACK'}, {'start': 411, 'text': 'running tasks serialized with pickle', 'label': 'ATTACK'}], 'sentText': "but this doesn't solve the security problem.  even if tasks are serialized with json or similar, the workers will still execute tasks inserted into the queue with pickle serialization -- they just respond to the [code] parameter in the message.  so anybody who can write to the task queue can effectively pown the worker processes by writing malicious pickled objects. how can i prevent the worker threads from running tasks serialized with pickle? "}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 69, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 214, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': "my question is, since the post data is sent over curl/ssl, can it be intercepted or stolen while in traffic? can the hacker view the session id in plain text(the most important component here)?  you do not want to implement this with php because this is easily achieved with webservers alone. your server a handling ssl ([link]) can act as an [link] and as a [link] to server b. it's a common setup to divide responsibilites between servers. research these topics please. "}
{'sentId': 145, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 89, 'text': 'forged request attacks', 'label': 'ATTACK'}], 'sentText': "i'd like to make it both easy to use from client-side javascript apps and secure against forged request attacks. is there a best practice to follow here? "}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is check i ing re referrer quest  the  enough referrer enough   to p  rotect against a cross site request forgery attack? i know  the the  the referrer   can be spoofed, but is th rk? ere any way for   the attacker   to do th referrer at  for for the but  clie be nt? i know tokens ar  that i e the no do rm, but would this  token referrer s wo forgery   rk? '}
{'sentId': 123, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'send something like [code]', 'em2Text': 'executed on every client browser', 'label': 'None'}, {'em1Text': 'send something like [code]', 'em2Text': 'a xss vulnerability', 'label': 'None'}, {'em1Text': 'executed on every client browser', 'em2Text': 'send something like [code]', 'label': 'PARENT'}, {'em1Text': 'executed on every client browser', 'em2Text': 'a xss vulnerability', 'label': 'None'}, {'em1Text': 'a xss vulnerability', 'em2Text': 'send something like [code]', 'label': 'None'}, {'em1Text': 'a xss vulnerability', 'em2Text': 'executed on every client browser', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'send something like [code]', 'label': 'ATTACK'}, {'start': 47, 'text': 'executed on every client browser', 'label': 'ATTACK'}, {'start': 118, 'text': 'a xss vulnerability', 'label': 'ATTACK'}], 'sentText': 'but when you send something like [code], it is executed on every client browser. how can i be 100% sure of not having a xss vulnerability on my chat? '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 61, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if yo hateve u are concer essary ned g  with the first case (someone posting malicious data to/as another user) the solution is t hateve he same whether you a you re    the usin   -- g ajax or not -- you (someone  data  just hav means e to auth to en w ticate the user through w have hateve -- usin  r means is nec is essary     -- usually via   session  is  -- cookie. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 55, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'break [code] ', 'label': 'None'}, {'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'uses an unsafe [code] extension', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'uses an unsafe [code] extension', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'break [code] ', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'uses an unsafe [code] extension', 'label': 'ATTACK'}, {'start': 50, 'text': 'break [code] ', 'label': 'ATTACK'}, {'start': 66, 'text': 'inserting different elements with different [code] instances', 'label': 'ATTACK'}], 'sentText': 'xxe xxxe below uses an unsafe [code] extension to break [code] xy inserting different elements with different [code] instances: '}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 153, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 251, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 335, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': 'but, s there ay to steal hy c, with xxx? (ig the xn of hty sxxxxxe xxxxxr ix: yesxa subt xf xxs is known s [lin] (or go to the l [x. xxxs atxxxk has txe xss payload send an http trace request to the web server (or [link], forward or reverse), which l echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookiesxx. '}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is using the method below a bad choice? it generates a random number between 0-1000. since there are only 1000 options, and their md5 hashes are known, it should take an attacker just a 1000 trials to verify the account without it really belonging to them '}
{'sentId': 17, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': '[link] ', 'em2Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'PARENT'}, {'em1Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'em2Text': '[link] ', 'label': 'None'}], 'entityMentions': [{'start': 17, 'text': '[link] ', 'label': 'ATTACK'}, {'start': 33, 'text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'ATTACK'}], 'sentText': "there's means of [link] whenever malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed. "}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 105, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 156, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 232, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 261, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'bt wt   if  d a  ue xxxxxxxu   f s s [l xo ixxx?  e sxxe  xxxxt w xn xl f t  l a  k xxxxxxu e  f  pe a t make some simple get request (by [link]) in r  t o download the page containing the antiforgery token in a hidden input field, extracts it   se , an what d use it to make a valid [link]?  '}
{'sentId': 90, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'buffer overflow attack', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'write directly into the memory location for [code]', 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'PARENT'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'write directly into the memory location for [code]', 'label': 'AND'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'write directly into the memory location for [code]', 'label': 'PARENT'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'write directly into the memory location for [code]', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'later on when your code tries to call [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 54, 'text': 'buffer overflow attack', 'label': 'ATTACK'}, {'start': 91, 'text': "read into [code] there's no overflow protection", 'label': 'ATTACK'}, {'start': 152, 'text': 'write directly into the memory location for [code]', 'label': 'ATTACK'}, {'start': 204, 'text': 'later on when your code tries to call [code]', 'label': 'ATTACK'}, {'start': 258, 'text': 'jump to where the attacker wants it to jump', 'label': 'ATTACK'}], 'sentText': "doxs such xxxxxk xxxxs to be cxxxxxxxd wixh a xxxd of buffer overflow attack? and whxn you read into [code] there's no overflow protection, xxd yxu cxn write directly into the memory location for [code]. later on when your code tries to call [code], it will jump to where the attacker wants it to jump, xxxxxxxxxy wxxxe xxxy xxxxxxxd exxxxxxxxe code inxo your apx. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm w t att to a cas ck? o f xxd  xs i xxxxd le know  to w if   it   hxs y build-in mc a hanxxm t would allo cs w limxxg t this xe cxf  cxxxs  nxm and b ca this s xr of c cxf or cxf xt cas to the web s cxf erxxx, thus wouxd  a w? dxxxxxxxg txe xxxxxxxy of a dos attack? sxxxxxxxg xxxi  r to txxs fe i  of wcf? "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 314, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 349, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my q how u is exxxxn is, how  xxxi xxxt on s app, afe is " use xxxh use  xx= null"? yes, i real user   ize  use thxt this xxxxs thxt only a that n autxe   onxy n null"? ticat and ed user ca !== n  use xxxe bu that t ss txe xxt estion a, that  but ho ss w easy is it to become aut xxxt hexxxxxxxx? xxt  can somexxe sign up for the app, and xxn  then use those credentials to get request right into my database into ? '}
{'sentId': 96, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 123, 'text': 'database comes to be hacked', 'label': 'ATTACK'}], 'sentText': 'for that i record in their database their key (s) api and the connection is done. but from a security point of view, if my database comes to be hacked despite all the predispositions taken in terms of security (prepared requests etc) ... these are all the api keys of my clients that are revealed and also email addresses of their own customers that can be retrieved, used, resold ... because the tools i connect essentially allows to store contacts, organize and send emails. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  if you give yoxxxxxf xxxxe pxxxxxxxe to the xxxxxm xxxxxxxxxxxxx,  xxxxxe xxxxxxg that axy prxxxxm thxt runs under yxu (not necessxxxxy  python xxxxxxx) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs xxxxe any wxy to protext exxxxxxxxn keys that xxe xxxxg xxxxxd in ram xxxm a freezer attack? (sxxxxxxg the xxxxxxxr in a frexxxr before rebooting malicious code xo xxxxxs the xxxxxxxs of ram) '}
{'sentId': 20, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'some bad employee could use it for nefarious purposes', 'em2Text': 'share it with someone else who would', 'label': 'OR'}, {'em1Text': 'share it with someone else who would', 'em2Text': 'some bad employee could use it for nefarious purposes', 'label': 'None'}], 'entityMentions': [{'start': 236, 'text': 'some bad employee could use it for nefarious purposes', 'label': 'ATTACK'}, {'start': 293, 'text': 'share it with someone else who would', 'label': 'ATTACK'}], 'sentText': 'a company is developing software that it hosts for the public that relies on oauth2 to some 3rd party for authentication. but unavoidably the oauth secret for this application will be exposed to all employes of the company. presumably, some bad employee could use it for nefarious purposes or share it with someone else who would. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 21, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t to e e cay to sp ddos attacks from a certain ip (or pool of ips). ths s to e t the nx level, rar than y r in the cod. o i d a web appln fire? f so, how o i ine it. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 23, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 10, 'text': 'json hijacking attacks', 'label': 'ATTACK'}], 'sentText': 'are these json hijacking attacks still an issue today in modern browsers? '}
{'sentId': 13, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'javascript injection attacks', 'label': 'ATTACK'}], 'sentText': 'i know txxt i need to prexxxt javascript injection attacks. how o i do xxxx? '}
{'sentId': 28, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'register with the service, login', 'em2Text': 'modifying the token that they receive to access the accounts of other users', 'label': 'None'}, {'em1Text': 'modifying the token that they receive to access the accounts of other users', 'em2Text': 'register with the service, login', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'register with the service, login', 'label': 'ATTACK'}, {'start': 81, 'text': 'modifying the token that they receive to access the accounts of other users', 'label': 'ATTACK'}], 'sentText': 'e s is a c g service i am hr d t se cd register with the service, login and then modifying the token that they receive to access the accounts of other users. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 139, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i m using  my s  cxxxxxxxx servs  t e on m  y wee xxd i wxxt t (the o k ip) p  p my s ip  (e (the oxxx ss xn i) xx, to server's  avo my xd ddos attacks beig xxx  t d t irecty to  (te my sxxxxxxs i xxxt p attacks . my xxxxx ats r uses ax, , mys. "}
{'sentId': 69, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "don't prompt the user when creating a communication channel ", 'em2Text': 'easy prey "man in the middle" attacks', 'label': 'None'}, {'em1Text': 'easy prey "man in the middle" attacks', 'em2Text': "don't prompt the user when creating a communication channel ", 'label': 'PARENT'}], 'entityMentions': [{'start': 50, 'text': "don't prompt the user when creating a communication channel ", 'label': 'ATTACK'}, {'start': 132, 'text': 'easy prey "man in the middle" attacks', 'label': 'ATTACK'}], 'sentText': 'the only advantage in using insecure, is that you don\'t prompt the user when creating a communication channel (this one would be an easy prey "man in the middle" attacks), but that doesn\'t mean that it will always work. here\'s a [link] where the user complains about some devices asks for pairing while others don\'t.<br/><br/> '}
{'sentId': 4, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'access to some information available in the source code', 'em2Text': 'spam my web server with requests', 'label': 'None'}, {'em1Text': 'spam my web server with requests', 'em2Text': 'access to some information available in the source code', 'label': 'PARENT'}], 'entityMentions': [{'start': 260, 'text': 'access to some information available in the source code', 'label': 'ATTACK'}, {'start': 340, 'text': 'spam my web server with requests', 'label': 'ATTACK'}], 'sentText': "i'm creating an app for android and ios, and i already know that it's theoretically possible to decompile an android app. the app contains sensitive information that i don't want users to have access to as the app interfaces with a webserver. if a user gained access to some information available in the source code, they could potentially spam my web server with requests. "}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 144, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'could y you ou pe list  atts some str list as or ev  en some en approaches you   ss t/minimize have y ap coud plied to prec have  ev t/minimize ddos attacks upn resl we web b se? '}
{'sentId': 36, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'em2Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'None'}, {'em1Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'em2Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'PARENT'}], 'entityMentions': [{'start': 72, 'text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'ATTACK'}, {'start': 258, 'text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'ATTACK'}], 'sentText': 'from all the posxs tt ie seen so far, i\'m unxxxxxxn as to wr t s xxe to send the iv in "plaintext" by prepending it to the cipher text. so te fxxxt n ix, xs it safe to do ?  that being saxd txx, you xxxd to make se you mxc . dxxxxxxxg on w yu do xe an co, e tampering with the iv could tamper with the resulting plaintext on decryption. enxxxn axxxe dos not xxxe intexy f m. '}
{'sentId': 24, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'getting subscription_json from client', 'em2Text': 'converting it to string', 'label': 'AND'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'setting it to model object using gson library', 'label': 'None'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'setting it to model object using gson library', 'label': 'AND'}, {'em1Text': 'converting it to string', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'setting it to model object using gson library', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'getting subscription_json from client', 'label': 'ATTACK'}, {'start': 54, 'text': 'converting it to string', 'label': 'ATTACK'}, {'start': 87, 'text': 'setting it to model object using gson library', 'label': 'ATTACK'}, {'start': 191, 'text': 'json injection', 'label': 'ATTACK'}], 'sentText': 'i am getting subscription_json from client which i am converting it to string and then setting it to model object using gson library. on running the code on fortify security, it is giving me json injection error on below code with following message : '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can xxxz for xxxxxxxxxxxxxxs in the app coxe and xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or somxxxxxx. but how xxxxd xn attacker really go about trying to recover those keys?  are thexe viabxe approaches for a determined attackxr to somxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 96, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'got access to your computer', 'em2Text': 'see the jwt that is stored in the browser and use it', 'label': 'None'}, {'em1Text': 'got access to your computer', 'em2Text': '"man in the middle" attack', 'label': 'None'}, {'em1Text': 'got access to your computer', 'em2Text': 'intercept the network traffic between client and server', 'label': 'None'}, {'em1Text': 'got access to your computer', 'em2Text': 'get at the cookie/jwt', 'label': 'None'}, {'em1Text': 'see the jwt that is stored in the browser and use it', 'em2Text': 'got access to your computer', 'label': 'PARENT'}, {'em1Text': 'see the jwt that is stored in the browser and use it', 'em2Text': '"man in the middle" attack', 'label': 'OR'}, {'em1Text': 'see the jwt that is stored in the browser and use it', 'em2Text': 'intercept the network traffic between client and server', 'label': 'None'}, {'em1Text': 'see the jwt that is stored in the browser and use it', 'em2Text': 'get at the cookie/jwt', 'label': 'None'}, {'em1Text': '"man in the middle" attack', 'em2Text': 'got access to your computer', 'label': 'None'}, {'em1Text': '"man in the middle" attack', 'em2Text': 'see the jwt that is stored in the browser and use it', 'label': 'None'}, {'em1Text': '"man in the middle" attack', 'em2Text': 'intercept the network traffic between client and server', 'label': 'PARENT'}, {'em1Text': '"man in the middle" attack', 'em2Text': 'get at the cookie/jwt', 'label': 'None'}, {'em1Text': 'intercept the network traffic between client and server', 'em2Text': 'got access to your computer', 'label': 'None'}, {'em1Text': 'intercept the network traffic between client and server', 'em2Text': 'see the jwt that is stored in the browser and use it', 'label': 'None'}, {'em1Text': 'intercept the network traffic between client and server', 'em2Text': '"man in the middle" attack', 'label': 'None'}, {'em1Text': 'intercept the network traffic between client and server', 'em2Text': 'get at the cookie/jwt', 'label': 'AND'}, {'em1Text': 'get at the cookie/jwt', 'em2Text': 'got access to your computer', 'label': 'None'}, {'em1Text': 'get at the cookie/jwt', 'em2Text': 'see the jwt that is stored in the browser and use it', 'label': 'None'}, {'em1Text': 'get at the cookie/jwt', 'em2Text': '"man in the middle" attack', 'label': 'None'}, {'em1Text': 'get at the cookie/jwt', 'em2Text': 'intercept the network traffic between client and server', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'got access to your computer', 'label': 'ATTACK'}, {'start': 61, 'text': 'see the jwt that is stored in the browser and use it', 'label': 'ATTACK'}, {'start': 228, 'text': '"man in the middle" attack', 'label': 'ATTACK'}, {'start': 258, 'text': 'intercept the network traffic between client and server', 'label': 'ATTACK'}, {'start': 318, 'text': 'get at the cookie/jwt', 'label': 'ATTACK'}], 'sentText': 'however, if a hacker got access to your computer, they could see the jwt that is stored in the browser and use it. this same threat exists w/cookies, so it\'s not really a flaw of the jwt. another approach for hackers would be a "man in the middle" attack to intercept the network traffic between client and server and get at the cookie/jwt. the cookie/jwt should always be sent over https to prevent this. '}
{'sentId': 12, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 382, 'text': 'accessing the underlying system in malicious ways', 'label': 'ATTACK'}], 'sentText': "i recxxxxy learned about java's security model. most people xxxxk java is sexxxe because it is immune xo buxxxr overflows, xxx, but xxxxe is this entire java security xxxxl centered arouxd xxxxxxxg whether code has permission to take certain axxxxxx. they're realxy solving a challenging xxxxxxx: how to let arbitrary untruxxxd code (say in a web browser) run xxt be prevented frxm accessing the underlying system in malicious ways while retaining the xxxxxxy to xxxxxxxt xxxh the system in some ways. "}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 107, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'enct my &amp;   s entication ->c)do   n  my (s &amp; s->c)do 2-way auth s- entication (s &amp; s- &amp; >d man-in-middle attacks '}
{'sentId': 35, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 32, 'text': 'anyone with the sense to check your source could steal your login inf', 'label': 'ATTACK'}], 'sentText': "y this m isn't gg into e view e anyone with the sense to check your source could steal your login info? i d e this nees to e done from the controller, but i dont w how to create o ths from e cont. htt and webct look promising, bt i don't know how o ay add a form to t. "}
{'sentId': 83, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'injects an already signed dll or exe with a malcode', 'em2Text': "changing the file's hash", 'label': 'None'}, {'em1Text': "changing the file's hash", 'em2Text': 'injects an already signed dll or exe with a malcode', 'label': 'PARENT'}], 'entityMentions': [{'start': 32, 'text': 'injects an already signed dll or exe with a malcode', 'label': 'ATTACK'}, {'start': 97, 'text': "changing the file's hash", 'label': 'ATTACK'}], 'sentText': "what i'm asking is: if a hacker injects an already signed dll or exe with a malcode, effectively changing the file's hash, will it break the digital signature because the signature embeds some kind of digest? or will the signature be completely unaffected? "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 109, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 149, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs d   other pi sae fy() ot  ( saxe ad s site-xxxe ituxxn pas s  xxxxr funcn maxd s of the sae n set) xxxxxr dos ab post le xn con  g st d st os via maxed out post parameters ? plee also conxxxxr the  site-e c n onxxg sxxxxt le s of post upxxxd s mxxh lar than . '}
{'sentId': 2, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hack the database', 'em2Text': 'somehow get access to the encrypted passwords', 'label': 'OR'}, {'em1Text': 'somehow get access to the encrypted passwords', 'em2Text': 'hack the database', 'label': 'None'}], 'entityMentions': [{'start': 60, 'text': 'hack the database', 'label': 'ATTACK'}, {'start': 81, 'text': 'somehow get access to the encrypted passwords', 'label': 'ATTACK'}], 'sentText': 'to me, this is a gaping security hxxx.  xf soxxxxxy wexe to hack the database or somehow get access to the encrypted passwords, they woulxxxt exxn need to craxk thxx.  just set your xxn xxxxxxs and xx.  xm i correct, or just being paranxxx? '}
{'sentId': 36, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'em2Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'None'}, {'em1Text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'em2Text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'send the iv in "plaintext" by prepending it to the cipher text', 'label': 'ATTACK'}, {'start': 316, 'text': 'tampering with the iv could tamper with the resulting plaintext on decryption', 'label': 'ATTACK'}], 'sentText': 'from all the posts that i\'ve seen so far, i\'m uncertain as to whether it is safe to send the iv in "plaintext" by prepending it to the cipher text. so the first question is, is it safe to do so?  that being said though, you need to make sure you mac it. depending on how you do message authentication codes, someone tampering with the iv could tamper with the resulting plaintext on decryption. encryption alone does not provide integrity of messages. '}
{'sentId': 52, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'extract the public key from the host application', 'em2Text': 'inject it into an assembly of your own', 'label': 'None'}, {'em1Text': 'extract the public key from the host application', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'extract the public key from the host application', 'label': 'PARENT'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'extract the public key from the host application', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'inject it into an assembly of your own', 'label': 'PARENT'}], 'entityMentions': [{'start': 199, 'text': 'extract the public key from the host application', 'label': 'ATTACK'}, {'start': 251, 'text': 'inject it into an assembly of your own', 'label': 'ATTACK'}, {'start': 292, 'text': 'run mallicious code', 'label': 'ATTACK'}], 'sentText': 'cxxxt thxs be sxx? i xm not e if xxe setpubxxx) method has y effect on a xxxt asxxxxx, t xxxn the msdn documenxxxxxn shxxs hw you can xe this on a dynaxxy gend y (rxxxxxxxxn emit) so tt wd mean yu d extract the public key from the host application ad inject it into an assembly of your own d run mallicious code if xxe abxxe s the sa, or am i missing ? '}
{'sentId': 67, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'implement rules for password selection', 'em2Text': 'reduce the size of the space of all allowable passwords', 'label': 'None'}, {'em1Text': 'implement rules for password selection', 'em2Text': 'make passwords easier to guess', 'label': 'None'}, {'em1Text': 'reduce the size of the space of all allowable passwords', 'em2Text': 'implement rules for password selection', 'label': 'PARENT'}, {'em1Text': 'reduce the size of the space of all allowable passwords', 'em2Text': 'make passwords easier to guess', 'label': 'None'}, {'em1Text': 'make passwords easier to guess', 'em2Text': 'implement rules for password selection', 'label': 'None'}, {'em1Text': 'make passwords easier to guess', 'em2Text': 'reduce the size of the space of all allowable passwords', 'label': 'PARENT'}], 'entityMentions': [{'start': 45, 'text': 'implement rules for password selection', 'label': 'ATTACK'}, {'start': 282, 'text': 'reduce the size of the space of all allowable passwords', 'label': 'ATTACK'}, {'start': 352, 'text': 'make passwords easier to guess', 'label': 'ATTACK'}], 'sentText': "on more than one occasion i've been asked to implement rules for password selection for software i'm developing. typical suggestions include things like: something has always bugged me about putting any restrictions on passwords though - by restricting the available passwords, you reduce the size of the space of all allowable passwords. doesn't this make passwords easier to guess? "}
{'sentId': 49, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 66, 'text': 'unauthorized changes', 'label': 'ATTACK'}], 'sentText': "so then the next question came. how do i secure my app to prevent unauthorized changes? in doing some research i found a couple articles talking about [code] and [code] and how they can be used. the particular url i found talking about these was posted back in may of '07 ([link]).  "}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 69, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 214, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': "my questixn is, since the post data is sent over curl/ssl, can it be intercepted or stolen while in traffic? cxn the hxxxxr view txe sexxxxn id in plain texxxxxe most important component here)?  xxu xo not want to implement this with php because this is easily xxxxxxxd xxxh webxxxxxxs alxxx. your sexxxr a hxxxxxxg xxl ([linxx) xxn act as an [lxxx] xxd as a [link] to sexxxr b. it's a commxn setup to divide rxxxxxxxxxxxxxs betwexn servers. resxxxxh these topics please. "}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem is that even though my project is 100% legal, and not shady, it is highly susceptible to occasional ddos attacks. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 194, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 254, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pt xe . e s  t e xs d  o r u g t  s xy  to i xo j . xk   d  o t pg s d s xa   g ts    xr xx. malicious users could create links on my bit.ly account. .  they would need to do a separate attack o     e r e n u  t c  s d   . e pd o l do n  s o e a. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 148, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 206, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  x  f y y f e u e yf xe pe  c e o pr    g de xo e m sxxx n ,  xe g txxt ay m xxt xr x) ixxxxxx. u   oxxxxn  rs u x) xr u t  x) y  n   x) inxo  cxn inject malicious code into the system  site-packages  m d obtain root privilege.   n  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 123, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 207, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 271, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 294, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xd y cn fuzz fr vulns in e p cxe and t it, xxxt there xxd be se indistinct general side channel attack r some. t how d an axxxxxxr y go t xxxxxg to recover those keys?  are thxxe e apprs for a dexd attaxxxr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 68, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'attacker can read your memory', 'em2Text': 'access to your memory ', 'label': 'None'}, {'em1Text': 'access to your memory ', 'em2Text': 'attacker can read your memory', 'label': 'None'}], 'entityMentions': [{'start': 23, 'text': 'attacker can read your memory', 'label': 'ATTACK'}, {'start': 225, 'text': 'access to your memory ', 'label': 'ATTACK'}], 'sentText': 'some think that "if an attacker can read your memory, you have 100% lost." (comment to [link]), which indicates that whether you store passwords in memory or not might be superfluous, since you\'re screwed anyway if they have access to your memory (see [link], which shows an example of how access to memory in an umnanaged environment can be pretty disastrous). '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 123, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 180, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  f you give yourxxxf write pxxxxxxxe to e m s,  yxe xg tht axy progm thxt runs under yxu (not necessarxxy  python pr) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a response to the recent [link] and [link], what is the best way to secure your website against brute force login attacks? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 119, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is that the attacker simply adds a slash then some encoded javascript (an image tag with alert box), which kills the page.  simple and effective attack.   '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 21, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attacks', 'em2Text': 'password stored unencrypted', 'label': 'PARENT'}, {'em1Text': 'password stored unencrypted', 'em2Text': 'brute force attacks', 'label': 'None'}], 'entityMentions': [{'start': 38, 'text': 'brute force attacks', 'label': 'ATTACK'}, {'start': 88, 'text': 'password stored unencrypted', 'label': 'ATTACK'}], 'sentText': "wouldn't this just make it easier for brute force attacks? (bad)does this imply that my password stored unencrypted? (bad) if someone with (hopefully) some good it security professionals working for them are imposing a max password length to avoid password stored unencrypted, should i think about doing similar? what are the pros/cons of this? "}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 152, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my pxxxm   is tha even t  an is d evxn h xy pxxj ad e and ct is 1xx% , xxd not shad, it is ct  highl ddos y xxxe problem  dxxs ptible to o xh ccasional ddos attacks. '}
{'sentId': 14, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'run fortify scan', 'em2Text': "i'm logging the exceptions using [code]", 'label': 'AND'}, {'em1Text': 'run fortify scan', 'em2Text': 'get access to this info and get system info', 'label': 'None'}, {'em1Text': "i'm logging the exceptions using [code]", 'em2Text': 'run fortify scan', 'label': 'None'}, {'em1Text': "i'm logging the exceptions using [code]", 'em2Text': 'get access to this info and get system info', 'label': 'None'}, {'em1Text': 'get access to this info and get system info', 'em2Text': 'run fortify scan', 'label': 'None'}, {'em1Text': 'get access to this info and get system info', 'em2Text': "i'm logging the exceptions using [code]", 'label': 'PARENT'}], 'entityMentions': [{'start': 7, 'text': 'run fortify scan', 'label': 'ATTACK'}, {'start': 52, 'text': "i'm logging the exceptions using [code]", 'label': 'ATTACK'}, {'start': 151, 'text': 'get access to this info and get system info', 'label': 'ATTACK'}], 'sentText': "when i run fortify scan on my project i do see that i'm logging the exceptions using [code] and it says this is not the right way because attckers may get access to this info and get system info from this and plan an attack. "}
{'sentId': 44, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'xsrf', 'label': 'ATTACK'}], 'sentText': "in order to prevent xsrf i force such request to be [code] requests. with [code] it's trivial to generate a xsrf using the following: "}
{'sentId': 8, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'hijack dns server ', 'em2Text': 'inject maliciously modified library', 'label': 'AND'}, {'em1Text': 'hijack dns server ', 'em2Text': 'opening the door for different security attacks', 'label': 'None'}, {'em1Text': 'inject maliciously modified library', 'em2Text': 'hijack dns server ', 'label': 'None'}, {'em1Text': 'inject maliciously modified library', 'em2Text': 'opening the door for different security attacks', 'label': 'None'}, {'em1Text': 'opening the door for different security attacks', 'em2Text': 'hijack dns server ', 'label': 'PARENT'}, {'em1Text': 'opening the door for different security attacks', 'em2Text': 'inject maliciously modified library', 'label': 'None'}], 'entityMentions': [{'start': 59, 'text': 'hijack dns server ', 'label': 'ATTACK'}, {'start': 86, 'text': 'inject maliciously modified library', 'label': 'ATTACK'}, {'start': 123, 'text': 'opening the door for different security attacks', 'label': 'ATTACK'}], 'sentText': 'for example, they mention the scenario where someone might hijack dns server and then inject maliciously modified library, opening the door for different security attacks. now, if hacker can inject malicious code through google cdn, then he can probably do the same if jquery is served from the site itself, right? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 73, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a malicious site to get around this', 'em2Text': 'using an iframe', 'label': 'PARENT'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'modifying my http header', 'label': 'None'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'modifying my http header', 'label': 'AND'}, {'em1Text': 'using an iframe', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'making a request to the target site', 'label': 'AND'}, {'em1Text': 'making a request to the target site', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'modifying my http header', 'label': 'None'}], 'entityMentions': [{'start': 211, 'text': 'a malicious site to get around this', 'label': 'ATTACK'}, {'start': 266, 'text': 'using an iframe', 'label': 'ATTACK'}, {'start': 283, 'text': 'modifying my http header', 'label': 'ATTACK'}, {'start': 311, 'text': 'making a request to the target site', 'label': 'ATTACK'}], 'sentText': 'from what i understand modifying  [code] d  only ge aroun are d  d t target s you d r c re ook are ies for t re he curr requ m est ent site [code]  yo a   an re are  u are for  on.  would it   be possible   for a malicious site to get around this by target  ethod?  using an iframe, modifying my http header  , making a request to the target site or some other m method? ethod? '}
{'sentId': 53, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 38, 'text': 'someone crawls the image directories of your server', 'label': 'ATTACK'}], 'sentText': 'he comes the problem: t is posse that someone crawls the image directories of your server. but you wt o prt your users from such . '}
{'sentId': 69, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'logs into your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'AND'}, {'em1Text': 'logs into your site', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'PARENT'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'PARENT'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'cookies are shared to the flash app', 'label': 'PARENT'}], 'entityMentions': [{'start': 131, 'text': 'logs into your site', 'label': 'ATTACK'}, {'start': 156, 'text': 'then browses over to another website with a malicious flash app', 'label': 'ATTACK'}, {'start': 226, 'text': 'flash app can connect back to your site', 'label': 'ATTACK'}, {'start': 293, 'text': 'cookies are shared to the flash app', 'label': 'ATTACK'}, {'start': 343, 'text': "the flash app to hijack the user's session", 'label': 'ATTACK'}], 'sentText': "by adding the crossdomain.xml, the main security concern is that flash applications can now connect to your server.  so if someone logs into your site, and then browses over to another website with a malicious flash app, that flash app can connect back to your site.  since it's in a browser, cookies are shared to the flash app.  this allows the flash app to hijack the user's session to do whatever it is your website does without the user knowing about it. "}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 35, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 148, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': "i e f  s t ried e  an t a if s acr gets ahold of the data in the datastore, as well as our hash salt, i'm   r i i'm n ri he d an  the our   y could brute force the sensitive data. data.   "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 41, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'set the csrf cookie using set-cookie', 'em2Text': 'supply a matching token in the post form data', 'label': 'None'}, {'em1Text': 'supply a matching token in the post form data', 'em2Text': 'set the csrf cookie using set-cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 19, 'text': 'set the csrf cookie using set-cookie', 'label': 'ATTACK'}, {'start': 66, 'text': 'supply a matching token in the post form data', 'label': 'ATTACK'}], 'sentText': '  the attacker can set the csrf cookie using set-cookie, and then supply a matching token in the post form data. since the site does not tie the session cookies to the csrf cookies, it has no way of determining that the csrf token + cookie are genuine (doing hashing etc. of one of them will not work, as the attacker can just get a valid pair from the site directly, and use that pair in the attack). '}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i hae a standalone spark cr running on a remote server and i'm new to spark. it appears that ts no authn schee protg the cluster s (7077) port by de. anyone can jt simply submit their own code to the cluster without any restrictions. "}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': 'the whole point of using salts is to avoid the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes . thus, it only needs to be long enough to exclude the possibility that such a table already exists for a specific salt. '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': "that's how it works right? but iv'e read about brute force attack. it guesses the input values right? with the procedure above. doesn't it shows that the attacker only needs to get the $userinput information correct to get in? he doesn't need to guess the long $encrypted string correct? "}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 153, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudfla my re on my website and   i wan my t to keep  i my s ddos erver's ip (the orig cloudfla in i cloudflare p) private, am   to to avoid ddos attacks bei apache, n private, g sent dir server ectly to    apache, my server's ip. my server  ip. uses  cloud orig flare apache, php, my my sql. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i wouxd  i i f like to k has now i xxw f it   has any buil ssixg d-xn   mxxxxxxxm thxt w to o t xxf o uld alxxw limiting the nuxxe se r  i i  of conxxxxxxt caxxs xo th a e web sxxxxxx, thus addre th ssing  xxxxxxxxxxy the possixxxxxy xf a dos attack? somxt i hing lxxxxxxg  similar to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe of wcf? "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 93, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'listbucket', 'em2Text': 'list the keys in a bucket', 'label': 'None'}, {'em1Text': 'list the keys in a bucket', 'em2Text': 'listbucket', 'label': 'PARENT'}], 'entityMentions': [{'start': 142, 'text': 'listbucket', 'label': 'ATTACK'}, {'start': 243, 'text': 'list the keys in a bucket', 'label': 'ATTACK'}], 'sentText': "i am using getobject and putobject requests on amazon s3 and in creating a policy for access to the bucket i discovered that if i don't allow listbucket i get an 'access denied' error. the problem with this is that listbucket means a user can list the keys in a bucket and this presentsa security threat. is it possible to allow getobject and putobject without allowing listbucket?or is there a workaround for this? "}
{'sentId': 66, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompile my apk', 'em2Text': 'retrieve this "somesecretphrase" ', 'label': 'None'}, {'em1Text': 'decompile my apk', 'em2Text': 'access the server', 'label': 'None'}, {'em1Text': 'retrieve this "somesecretphrase" ', 'em2Text': 'decompile my apk', 'label': 'PARENT'}, {'em1Text': 'retrieve this "somesecretphrase" ', 'em2Text': 'access the server', 'label': 'None'}, {'em1Text': 'access the server', 'em2Text': 'decompile my apk', 'label': 'None'}, {'em1Text': 'access the server', 'em2Text': 'retrieve this "somesecretphrase" ', 'label': 'PARENT'}], 'entityMentions': [{'start': 168, 'text': 'decompile my apk', 'label': 'ATTACK'}, {'start': 210, 'text': 'retrieve this "somesecretphrase" ', 'label': 'ATTACK'}, {'start': 291, 'text': 'access the server', 'label': 'ATTACK'}], 'sentText': 'now, the question is - is it a safe approach regarding the reverse engineering? for now i can think of no other possibility to get this data. but if someone is able to decompile my apk, he will be also able to retrieve this "somesecretphrase" (rather hard to do on the server side) and then access the server, isn\'t he? is it a real threat? is there any other possibility to authenticate my app by the server? '}
{'sentId': 43, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss hacks', 'em2Text': 'user could potentially enter javascript that another user ends up executing', 'label': 'PARENT'}, {'em1Text': 'user could potentially enter javascript that another user ends up executing', 'em2Text': 'xss hacks', 'label': 'None'}], 'entityMentions': [{'start': 31, 'text': 'xss hacks', 'label': 'ATTACK'}, {'start': 45, 'text': 'user could potentially enter javascript that another user ends up executing', 'label': 'ATTACK'}], 'sentText': "this introduces a high risk of xss hacks - a user could potentially enter javascript that another user ends up executing. since we hold sensitive data it's essential that this never happens. "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 53, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 140, 'text': 'rainbow table attacks', 'label': 'ATTACK'}], 'sentText': 'you don\'t need to make salts really long and it\'s not important that they be cryptographically secure. the point of salts is simply to make rainbow table attacks harder as you no longer have a 1-to-1 mapping between passwords and hashes. (they also keep administrators with wandering eyes from seeing 482c811da5d5b4bc6d497ffa98491e38 in the database and then knowing joe\'s password is "password123".) '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 196, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 236, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': " d prs ump  xr sts      t cxn xxl a  r d d x, e xr on   ou've xe s   x . . imxu c t if al x, can   rd e. tt strxn  gs  mean xf s o on e y bee e t [c    x  xx s ,  strs ed e [c xx da s you  ox, xf another process can dump memory x. , xs no way you can get rid of the data bef s oe [li]    yu kic sxxxs  t pro e e e ss xe ks  xxxt . "}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 141, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 191, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 318, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 424, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 463, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my pro to blem  be is in  hash   hash tha the gain   ord  likely  the  pass is w use o  rd (2   password t   would attack. i fee hash  use l the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the attack hash e password, r can no pass and w simply ord w simply use that hash to get access to the user's information t . in (2 interc my ept ), the a interc ttacker can intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 39, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded svg images on a website', 'em2Text': 'cross-site-script into there', 'label': 'None'}, {'em1Text': 'cross-site-script into there', 'em2Text': 'uploaded svg images on a website', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'uploaded svg images on a website', 'label': 'ATTACK'}, {'start': 178, 'text': 'cross-site-script into there', 'label': 'ATTACK'}], 'sentText': "i want to display user uploaded svg images on a website, but they're quite open to exploits: they serve the uploaded files from a separate hostname, specifically [code]. you can cross-site-script into there all you like but it doesn't get you anything: it lives in a different origin to [code] and can't touch its cookies or interact with its script. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can xxxz for xxxxxxxxxxxxxxs in the app coxe and xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or somxxxxxx. but how xxxxd xn attacker really go about trying to recover those keys?  are thexe viabxe approaches for a determined attackxr to somxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 97, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 136, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs d   other pi sae fy() ot  ( saxe ad s site-xxe itun s s  r funcn maxd s of the sae n ) xxxxxr dos ab post le xn con  g t d st os via maxed out post parameters ? ple alo conr the  sie c n onxxg sxxxxt e s of pot d s mxxh r than . '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 16, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'use any of the json data', 'em2Text': 'json data being assigned to a variable that you can access globally', 'label': 'PARENT'}, {'em1Text': 'json data being assigned to a variable that you can access globally', 'em2Text': 'use any of the json data', 'label': 'None'}], 'entityMentions': [{'start': 99, 'text': 'use any of the json data', 'label': 'ATTACK'}, {'start': 132, 'text': 'json data being assigned to a variable that you can access globally', 'label': 'ATTACK'}], 'sentText': "google returns json like this:[code]but even without the crash script prepended the attacker can't use any of the json data without json data being assigned to a variable that you can access globally (it isn't in these cases). the crash code effectivly does nothing because even without it they have to use server sided scripting to use the data on their site. "}
{'sentId': 23, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'user is logged in', 'em2Text': 'access the stored keys', 'label': 'None'}, {'em1Text': 'user is logged in', 'em2Text': 'injecting code into a users process', 'label': 'AND'}, {'em1Text': 'access the stored keys', 'em2Text': 'user is logged in', 'label': 'PARENT'}, {'em1Text': 'access the stored keys', 'em2Text': 'injecting code into a users process', 'label': 'None'}, {'em1Text': 'injecting code into a users process', 'em2Text': 'user is logged in', 'label': 'None'}, {'em1Text': 'injecting code into a users process', 'em2Text': 'access the stored keys', 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'user is logged in', 'label': 'ATTACK'}, {'start': 198, 'text': 'access the stored keys', 'label': 'ATTACK'}, {'start': 231, 'text': 'injecting code into a users process', 'label': 'ATTACK'}], 'sentText': "however, once the user is logged in, there is the possibility for other users' processes on the same machine with sufficient privileges (generally only granted to administrative/system accounts) to access the stored keys, e.g. by  injecting code into a users process that will run i'm the context of the user and hence be able to do anything the user could do with the key (use it to decrypt, sign, or export the key, etc.). "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 133, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 222, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 282, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 305, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hw might an attacker recover the secrets in that flash? i underd they can z for vs in the app code and et it, that there cod be some indistinct general side channel attack or somet. but how wod an attacker reay go t tg to recover those keys?  are te viable s for a determined r o w shave-down the chip or some kind of microscope attack? '}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 211, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a standalone spark cluster running on a remote server and i'm new to spark. it appears that there's no authentication scheme protecting the cluster master's (7077) port by default. anyone can just simply submit their own code to the cluster without any restrictions. "}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 49, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 172, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 243, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked if n xxxr cn gain access to the system under the same user account as your codexxn oe xxx, dt user, rot x, xxxxs an impot a . f an r cn get access as the same user or as root, ye got xxr xxxr xx. fxr x, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 55, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'break [code] ', 'label': 'None'}, {'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'uses an unsafe [code] extension', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'uses an unsafe [code] extension', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'break [code] ', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'uses an unsafe [code] extension', 'label': 'ATTACK'}, {'start': 50, 'text': 'break [code] ', 'label': 'ATTACK'}, {'start': 66, 'text': 'inserting different elements with different [code] instances', 'label': 'ATTACK'}], 'sentText': 'xxe xxxe bxxxw uses an unsafe [code] extension xo break [code] by inserting different elements with different [code] instances: '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand they can fxxz for vulnexxxxxxxxxs in the app xxxe and exploit it, that xxxxe could be some indistinct general side channel attack or sxxxxxxxx. but how would an xxxxxxxr reaxxy xo xxxxt txxxxg to recover those keys?  xxe txxxe vxxxxe appxxxxxxs for a determined atxxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 126, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 281, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 304, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i understd they cn z for vus in the app e and explt it, t e cd be some indistinct general side channel attack r so. but how woud an ar rey go about g to recover those keys?  e e viable approas for a determined attar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 79, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'upload a php script with for example jpeg mime type', 'label': 'ATTACK'}], 'sentText': 'checking for mime type in php is pretty easy but as far as i know mime can be spoofed. the attacker can upload a php script with for example jpeg mime type. one thing that comes to mind is to check the file extension of the uploaded file and make sure it matches the mime type. all of this is assuming the upload directory is browser accessible. '}
{'sentId': 22, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 39, 'text': 'sql injection attacks', 'label': 'ATTACK'}], 'sentText': 't can also give xu a fixxxxxg chaxxe t sql injection attacks. '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 98, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 171, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 201, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 247, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 319, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': ' xxxe  there i  t a f ttacked  ixxxr  itxd   w txe xxxe ce  following   xxxt  t wa repxxxxd s   y attacked by repeated remote form submissions xxxxd . , txe r no  w form  requests the form page first, starting a valid session attacked ,  rexxxe d then passes the session cookie in the following post request my . xxxxe having a valid session token. xo f t t hen xxl  v the a t lid n my . '}
{'sentId': 23, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'user is logged in', 'em2Text': 'access the stored keys', 'label': 'None'}, {'em1Text': 'user is logged in', 'em2Text': 'injecting code into a users process', 'label': 'AND'}, {'em1Text': 'access the stored keys', 'em2Text': 'user is logged in', 'label': 'PARENT'}, {'em1Text': 'access the stored keys', 'em2Text': 'injecting code into a users process', 'label': 'None'}, {'em1Text': 'injecting code into a users process', 'em2Text': 'user is logged in', 'label': 'None'}, {'em1Text': 'injecting code into a users process', 'em2Text': 'access the stored keys', 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'user is logged in', 'label': 'ATTACK'}, {'start': 198, 'text': 'access the stored keys', 'label': 'ATTACK'}, {'start': 231, 'text': 'injecting code into a users process', 'label': 'ATTACK'}], 'sentText': "however, once the user is logged in, there is the possibility for other users' processes on the same machine with sufficient privileges (generally only granted to administrative/system accounts) to access the stored keys, e.g. by  injecting code into a users process that will run i'm the context of the user and hence be able to do anything the user could do with the key (use it to decrypt, sign, or export the key, etc.). "}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'wouldnt someone be able to simply change the referrer header to a malicious website? does raxxs xxxe any soxt of prxxxxxxxn measxxxs for txxx? '}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 58, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 97, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': "  if the session identifier were known by an attacker who had access to  the user's workstation, the logged out session could be accessed using  the session cookie after the user had terminated their session.  "}
{'sentId': 96, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 123, 'text': 'database comes to be hacked', 'label': 'ATTACK'}], 'sentText': 'for that i record xn their database their key xx) axi axd the coxxxxxxxn is dxxx. but from a secxxxxy point of view, if my database comes to be hacked despite all txe pxxxxxxxxxxxxxs taken in xxxxs of security (preparxd requxxxs etc) ... these are all xxe api keys of my clxxxxs that axe revxxxxd xxd also exxxl xxxxxxxxs of their own customers thxt can be rxxxxxxxx, used, xxxxxd ... because xxe tools i xxxxxxt essenxxxxxy alxxxs to store cxxxxxxx, organxxe and send emxxxx. '}
{'sentId': 57, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'knowing the structure of your filesystem', 'em2Text': 'execute directory traversal attacks', 'label': 'None'}, {'em1Text': 'execute directory traversal attacks', 'em2Text': 'knowing the structure of your filesystem', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'knowing the structure of your filesystem', 'label': 'ATTACK'}, {'start': 91, 'text': 'execute directory traversal attacks', 'label': 'ATTACK'}], 'sentText': 'knowing the structure of your filesystem  directory the  m them. ight  to allow hackers to execute directory traversal attacks if  hackers  your  traversal your s  ite structure  is vulnerab filesystem le to   them. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 190, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 250, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt e . e s  xt e us d  o r u g nt  s y  o i do j . k   d  o t g s d s ua   g ts    r o. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xu  t c  s d   . xe d o l do n  s o e . '}
{'sentId': 81, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'w xxt (andr soxxxxxxxxxxx) are man-in-the-middle attacks? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i understand they can fuzz for xxxxxxxxxxxxxxs in the axp code and exploit it, that txxxe could be soxe indistinct general side channel attack or somxxxxxx. but how would an xxxxxxxr xxxxxy go aboxt trying to recover those keys?  xxe txxxe viable approaches for a xxxxxxxxxd attacker to somexxw shave-down the chip xr some kind of microscope attack? '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 89, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'encrypt my communication (c->s &amp; s->c)do 2-way authentication (c->s &amp; s->c)avoid man-in-middle attacks '}
{'sentId': 13, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'javascript injection attacks', 'label': 'ATTACK'}], 'sentText': 'i kxxw that i need to xxxxxxt javascript injection attacks. how do i do xxxx? '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 28, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'stealing the api key', 'em2Text': 'decompiling the swf', 'label': 'AND'}, {'em1Text': 'stealing the api key', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'send random data', 'label': 'AND'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'send random data', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'send random data', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'stealing the api key', 'label': 'ATTACK'}, {'start': 118, 'text': 'decompiling the swf', 'label': 'ATTACK'}, {'start': 184, 'text': 'create a dummy flash application', 'label': 'ATTACK'}, {'start': 221, 'text': 'send random data', 'label': 'ATTACK'}, {'start': 254, 'text': 'altering the api itself', 'label': 'ATTACK'}], 'sentText': "the big one - people stealing the api key via man-in-the-middle attack.highscore injection, false achievement unlocks.decompiling the swf and stealing the api key.using the api key to create a dummy flash application and send random data like highscores.altering the api itself so you don't need to be logged in, etc. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 185, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 215, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question is, how safe is "auth !== null"? yes, i realize that this means that only an authenticated user can access the data, but how easy is it to become authenticated? can someone sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 4, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'the sandbox would be executing scripts that could be potentially dangerous.  the sandbox would be a mix of my own javascript, running alongside untrusted javascript code from other sources. '}
{'sentId': 41, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'database where compromised', 'em2Text': 'going to defeat [code] by enabling the [link]', 'label': 'None'}, {'em1Text': 'going to defeat [code] by enabling the [link]', 'em2Text': 'database where compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 11, 'text': 'database where compromised', 'label': 'ATTACK'}, {'start': 54, 'text': 'going to defeat [code] by enabling the [link]', 'label': 'ATTACK'}], 'sentText': 'but if the database where compromised the attacker is going to defeat [code] by enabling the [link]. '}
{'sentId': 68, 'articleId': '2', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 86, 'text': 'uploads something harmful', 'label': 'ATTACK'}], 'sentText': 'for instance if my website allows the users to upload a profile picture, and one user uploads something harmful instead, what could happen? what kind of security should i set up to prevent attacks like this? '}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 96, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'for security reasons, it is desirable to check the integrity of code before execution, avoiding tampered software by an attacker. so, my question is '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how migxt an attacker recover the secrets in that flash? i uxxxxxxxxd they can fuxz for vulnerabixxxxxs in the app xxxe and expxxxt it, that there xxxxd xe some indistinct general side channel attack or something. xxt how would an axxxxxxr really go about trxxxg to recover those keys?  xxe there viable approachxs for a dxxxxxxxxd attacxxr to somxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 62, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time  taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 181, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 256, 'text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryptography, side  a t is iming attack is a side channel a iming ttack in   w anal e in xecute yzing hic cryptographic h  analyzi  ng the  attacker attempts cryptography,  to compromise a cryptosystem channel   yz algor cryptographic ithms. in  g by analyzing the time  taken to execute cryptographic algorithms. '}
{'sentId': 61, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'someone will compromise the shared secret on the client', 'em2Text': 'post it on the internet', 'label': 'PARENT'}, {'em1Text': 'post it on the internet', 'em2Text': 'someone will compromise the shared secret on the client', 'label': 'None'}], 'entityMentions': [{'start': 85, 'text': 'someone will compromise the shared secret on the client', 'label': 'ATTACK'}, {'start': 218, 'text': 'post it on the internet', 'label': 'ATTACK'}], 'sentText': 'i probabl  am warned that unfortunately,  sho they uld the app beco  me popular that someone will compromise the shared secret on the client.  the just because they can and they  sho  the will   probabl th probabl e y post it on the internet. so really it all co  secret war popular ne i d mes down to the server side. unfortu because nately, i becaus to e t  i ha really ve no  i way to identify sh the  app o they   and love.  block an attacker an i  . this would  i would d will early love.  identify  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 63, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'hacking [code]', 'label': 'None'}, {'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'hacking [code]', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'PARENT'}, {'em1Text': 'hacking [code]', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'hacking [code]', 'label': 'AND'}], 'entityMentions': [{'start': 0, 'text': 'json allows you to [link] from an ajax call', 'label': 'ATTACK'}, {'start': 172, 'text': 'hacking [code]', 'label': 'ATTACK'}, {'start': 191, 'text': 'distributing malicious code', 'label': 'ATTACK'}], 'sentText': 'json allows you to [link] from an ajax call. for example: how does jquery handle the parsing? does it evaluate this code? what safeguards are in place to stop someone from hacking [code] and distributing malicious code? '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 132, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevex, i do xxt understand the xxxxxxxs about xxxxxxxy vulxxxxxxxxxxxx. certainly, running [code] gxxxs the hacker the axxxxxy to run any javascript code that you can run. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 107, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevxx, i do xt xxxd txe s about xxxxxxxy vulxxxxxxxx. cxxxxxxxx, running [code] gxxxs te hr the axxxy to run any javascript code that you can run. '}
{'sentId': 78, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'perform an mitm attack', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'AND'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'AND'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'AND'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'perform an mitm attack', 'label': 'PARENT'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'PARENT'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'PARENT'}], 'entityMentions': [{'start': 278, 'text': 'perform an mitm attack', 'label': 'ATTACK'}, {'start': 305, 'text': 'intercept all requests to public maven repositories', 'label': 'ATTACK'}, {'start': 368, 'text': 'injecting malicious bytecode into the jar artifacts', 'label': 'ATTACK'}, {'start': 426, 'text': 'recalculating and supplying the sha1 hashes', 'label': 'ATTACK'}, {'start': 58, 'text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'ATTACK'}, {'start': 129, 'text': 'provide masqueraded library copies of the original', 'label': 'ATTACK'}, {'start': 184, 'text': 'injected with malicious or harmful code', 'label': 'ATTACK'}], 'sentText': 'what are the risks and possibilities or scenarios whereby someone sets up masquerades of maven repositories and/or ip streams to provide masqueraded library copies of the original but injected with malicious or harmful code. i suppose a dedicated and resourceful attacker could perform an mitm attack and intercept all requests to public maven repositories, carefully injecting malicious bytecode into the jar artifacts, then recalculating and supplying the sha1 hashes. '}
{'sentId': 17, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 74, 'text': 'sql injection script', 'label': 'ATTACK'}], 'sentText': 'the website i worked was recently attempted to be hacked by the following sql injection script '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 298, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calls ck? o cxf and  calls i would like know  to know if   it   has any build-in mec a hanism that would allo calls w limiting t this he cxf  calls  num and b ca this lls er of c cxf oncur cxf rent calls to the web s cxf ervice, thus would  a wcf? ddressing the possibility of a dos attack? something simi  lar to this feature i  of wcf? "}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 18, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'woxl  dnt is?  y  someone be able to simply change the referrer header to a malicious website  o re a th  th lxxxxs be  fer f rer ? xxt  d be s xa e lxxxxs  s hav be sixp  e an m a as y so t to o  webs r t th e? rt f  e p e r  abxe to v ms ent  io to n mxxr rs sip  y  s f for or h an  a i? '}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'wouldnt someone be able to simply change the referrer header to a malicious website referrer ? wouldnt  does malicious  rails hav be e any so website? rt of p able r to ev malicious entio to n measur rails es f for or th a is? '}
{'sentId': 16, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 25, 'text': 'cookie has been hijacked', 'label': 'ATTACK'}], 'sentText': 'this is important if the cookie has been hijacked. it will be invalidated if the user detects the hijacking, and furthermore because the token is unrelated to the password the hijacker won\'t be able to derive and then change the user\'s account password and "own" the account (assuming you require the existing password before changing passwords, the hijacker doesn\'t own the email account so they can\'t use "forgot my password" etc). '}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in , when med   c vale tio t n do  i want to find by a usr given value ad avod sql injection (ee ap by os and the   n this: lik) i or  can do sg e th: i know that an ue wy of dg this kn in ow  (po vale ssible  d sql i) is this: my n is, does the fol  lo to wing metho in d pr u s ser e injeci l do e o want n ven d ( u po e ss  il o t sql n or ? '}
{'sentId': 98, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'malicious user logs in using his browser', 'em2Text': 'downloads game', 'label': 'AND'}, {'em1Text': 'malicious user logs in using his browser', 'em2Text': 'submits score', 'label': 'None'}, {'em1Text': 'downloads game', 'em2Text': 'malicious user logs in using his browser', 'label': 'None'}, {'em1Text': 'downloads game', 'em2Text': 'submits score', 'label': 'None'}, {'em1Text': 'submits score', 'em2Text': 'malicious user logs in using his browser', 'label': 'PARENT'}, {'em1Text': 'submits score', 'em2Text': 'downloads game', 'label': 'None'}], 'entityMentions': [{'start': 160, 'text': 'malicious user logs in using his browser', 'label': 'ATTACK'}, {'start': 202, 'text': 'downloads game', 'label': 'ATTACK'}, {'start': 228, 'text': 'submits score', 'label': 'ATTACK'}], 'sentText': 'create a script &amp; run it to create automatic users  - i think i can prevent it by captcha or someting like that. but again, captcha will annoy game players.malicious user logs in using his browser, downloads game &amp; then submits score as he wish - all via calling the api by simply typing it from his browser. i assume malicious user somehow knows api urls to call - by sniffing when the application was making http requests.i need to ensure that requests are made only from android device that installed the game. (the game will be free) '}
{'sentId': 22, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'issue an http', 'em2Text': 'retrieve a form containing the anti-forgery token', 'label': 'AND'}, {'em1Text': 'issue an http', 'em2Text': 'make an illicit post which contains that same token', 'label': 'None'}, {'em1Text': 'retrieve a form containing the anti-forgery token', 'em2Text': 'issue an http', 'label': 'None'}, {'em1Text': 'retrieve a form containing the anti-forgery token', 'em2Text': 'make an illicit post which contains that same token', 'label': 'None'}, {'em1Text': 'make an illicit post which contains that same token', 'em2Text': 'issue an http', 'label': 'PARENT'}, {'em1Text': 'make an illicit post which contains that same token', 'em2Text': 'retrieve a form containing the anti-forgery token', 'label': 'None'}], 'entityMentions': [{'start': 224, 'text': 'issue an http', 'label': 'ATTACK'}, {'start': 245, 'text': 'retrieve a form containing the anti-forgery token', 'label': 'ATTACK'}, {'start': 305, 'text': 'make an illicit post which contains that same token', 'label': 'ATTACK'}], 'sentText': 'incidentally, if same-origin does not affect form posts - then it makes it somewhat more obvious of why anti-forgery tokens are necessary.  i say "somewhat" because it seems too easy to believe that an attacker could simply issue an http get to retrieve a form containing the anti-forgery token, and then make an illicit post which contains that same token.  comments? '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': 'txxxxs how it wxxxs rxxxx? but ivxe xxxd about brute force attack. xt guesses the input values xxxxx? with xxe procxxxxe above. xxxxxxt it xxxxs xxxt xxe xxxxxxxr only nxxxs to get the $userinput information correct to get in? he xxxxxxt xxxd xo xxxxs the lxxg xxxxxxxxxd strxxg corrxxx? '}
{'sentId': 111, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'man-in-the-middle attacks', 'em2Text': 'replay attacks', 'label': 'AND'}, {'em1Text': 'replay attacks', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}], 'entityMentions': [{'start': 51, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}, {'start': 198, 'text': 'replay attacks', 'label': 'ATTACK'}], 'sentText': 'how does challenge-response authentication prevent man-in-the-middle attacks? i read the wiki article but still i cannot understand. where challenge/response protocols really shine is in preventing replay attacks: if alice just sends bob a message along the lines of "please debit my account $5 and credit your account $5", mallory could record the message and replay the message to deplete alice\'s account. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 133, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 49, 'text': 'bcrypt is hacked', 'label': 'ATTACK'}], 'sentText': 'now what i will  want to say su  ppose  ppose if bcrypt is hacked and is  say found to be broken and in future t  here comes  now new  way cryptographic function that is more secure an way d wa be y . than t way his way creating a pass to wor  ppose is d fro y m  is ol hacked d this    values will alw be ays be ti consu be ming. me consuming. '}
{'sentId': 31, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'our whole history of changes', 'label': 'AND'}, {'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'copying a single folder', 'label': 'PARENT'}, {'em1Text': 'our whole history of changes', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'our whole history of changes', 'em2Text': 'copying a single folder', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'our whole history of changes', 'label': 'None'}], 'entityMentions': [{'start': 267, 'text': 'steal not only the latest intellectual properly ', 'label': 'ATTACK'}, {'start': 319, 'text': 'our whole history of changes', 'label': 'ATTACK'}, {'start': 359, 'text': 'copying a single folder', 'label': 'ATTACK'}], 'sentText': "  difficult e it's  e gathere xact been difficult to nail  history down  intellectual that   th his exact se steal curity concern but i've gathere on d that it ce o of f but  nter fac nail t s on th not e fact that  it' employee s of  a malicious employee c but ould steal not only the latest intellectual properly but our whole history of changes just a  by copying a single folder. that  "}
{'sentId': 34, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "the antiforgerytoken is used to prevent csrf attacks, however the links on msdn don't give me much insight to what exactly the antiforgerytoken does, or how it works, or why things are done the way they are. "}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 93, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 123, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 153, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 221, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i ixxxxxxxd sxe e t s rxxxxxxy attacked by repeated remote form submissions. how, the xr nxw requests the form page first, starting a valid session, xxd then passes the session cookie in the following post request. there having a valid session token. so xxxl on my . '}
{'sentId': 133, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'bcrypt is hacked', 'label': 'ATTACK'}], 'sentText': 'now what i  a want to s a ay e if bcrypt is hacked d is found to be b  t bct rok is en a from nd  tt in future t from here co f mes new crypc fut  f valus ion that is e e a t t values o oc nd. h c n this way creatin and g a passwr fe d from old values will als be tim consu e consu frm  mor s e mi e ng. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'strinxs xxe ixxxxxxxx. that means once yoxxxe crexxxd the [codex, if another process can dump memory, thxxxxs no way you can get rid of the data before [lixx] xxxxs in. '}
{'sentId': 35, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'alter the ldap query', 'em2Text': 'injecting malicious code', 'label': 'PARENT'}, {'em1Text': 'injecting malicious code', 'em2Text': 'alter the ldap query', 'label': 'None'}], 'entityMentions': [{'start': 193, 'text': 'alter the ldap query', 'label': 'ATTACK'}, {'start': 217, 'text': 'injecting malicious code', 'label': 'ATTACK'}], 'sentText': "i am working on my first desktop app that queries ldap. i'm working in c under unix and using opends, and i'm new to ldap. after woking a while on that i noticed that the user could be able to alter the ldap query by injecting malicious code.i'd like to know which sanitizing techniques are known, not only for c/unix development but in more general terms, i.e., web development etc.i thought that escaping equals and semicolons would be enough, but not sure. "}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 181, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'lets csrf  y w  to e e xxxe a ty n p te l c  sr ? f  n o t sr xe  this te the ctn like s on e e this  h ?   av  e w xxxf   xo  hxt n   h  csrf to  xv   at  csrf f  e b xxe ?  xxxs  an attacket uses this code to bypass the csrf token an ? '}
{'sentId': 142, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a hacker to do packet sniffing', 'em2Text': 'use some other method', 'label': 'OR'}, {'em1Text': 'use some other method', 'em2Text': 'a hacker to do packet sniffing', 'label': 'None'}], 'entityMentions': [{'start': 81, 'text': 'a hacker to do packet sniffing', 'label': 'ATTACK'}, {'start': 115, 'text': 'use some other method', 'label': 'ATTACK'}], 'sentText': 'if a web server and a database server are on different hosts, is it possible for a hacker to do packet sniffing or use some other method to get the database username/password when you use mysql_connect in the php code? '}
{'sentId': 16, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 227, 'text': 'these be used maliciously to get to access other files in my s3 bucket', 'label': 'ATTACK'}], 'sentText': 'i have an image in my aws s3 bucket. is it safe to include this image in my website by placing the aws url in an [code] tag? the url includes parameters such as "amz-signature", "amz-credential", and "amz-security-token. could these be used maliciously to get to access other files in my s3 bucket? '}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 127, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i wan xxxt ty le t t  o know if this an i d xn  ly this  so, lxxxxe on  sxxxxxt pxxxxxxs axy securi i   ty issues  o (like xss attacks xxx) '}
{'sentId': 70, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'images only some people are allowed to see', 'em2Text': 'putting them into a publicly accessible directory', 'label': 'AND'}, {'em1Text': 'images only some people are allowed to see', 'em2Text': 'there is a change other people can see that image', 'label': 'None'}, {'em1Text': 'putting them into a publicly accessible directory', 'em2Text': 'images only some people are allowed to see', 'label': 'None'}, {'em1Text': 'putting them into a publicly accessible directory', 'em2Text': 'there is a change other people can see that image', 'label': 'None'}, {'em1Text': 'there is a change other people can see that image', 'em2Text': 'images only some people are allowed to see', 'label': 'None'}, {'em1Text': 'there is a change other people can see that image', 'em2Text': 'putting them into a publicly accessible directory', 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': 'images only some people are allowed to see', 'label': 'ATTACK'}, {'start': 81, 'text': 'putting them into a publicly accessible directory', 'label': 'ATTACK'}, {'start': 132, 'text': 'there is a change other people can see that image', 'label': 'ATTACK'}], 'sentText': "sort of. yes, if you have images only some people are allowed to see, and you're putting them into a publicly accessible directory, there is a change other people can see that image, which appears to be undesirable. i also don't think (might be wrong) that it will gain 10 seconds on a page load, as you'll have to copy the images, which is a rather intensive operation, more than using file_get_contents or readfile( ). "}
{'sentId': 31, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attack vector', 'em2Text': 'xss escaping', 'label': 'None'}, {'em1Text': 'xss escaping', 'em2Text': 'attack vector', 'label': 'None'}], 'entityMentions': [{'start': 76, 'text': 'attack vector', 'label': 'ATTACK'}, {'start': 194, 'text': 'xss escaping', 'label': 'ATTACK'}], 'sentText': 'if the api is implemented in a web service presented through a browser, the attack vector is quite real. on the other hand, if the api is implemented in a desktop app, or a mobile application - xss escaping would be a total nuisance and not needed. '}
{'sentId': 1, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 193, 'text': 'the wysiwyg editor will output html to be rendered into the document', 'label': 'ATTACK'}], 'sentText': 'technicl background in: we are rg g djano 13 and have t chn a sc edr ye. we are leaning towards a javascript oe such as tinymce, t can be ped to use anything that allows security d e of use. e the wysiwyg editor will output html to be rendered into the document, e cat simpy ee it. '}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 95, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 171, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 188, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'but what if a malicious script will first make some simple get request (by [link]) in order to download the page containing the antiforgery token in a hidden input field, extracts it, and use it to make a valid [link]?  '}
{'sentId': 43, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompilers', 'em2Text': 'get the key', 'label': 'None'}, {'em1Text': 'get the key', 'em2Text': 'decompilers', 'label': 'PARENT'}], 'entityMentions': [{'start': 375, 'text': 'decompilers', 'label': 'ATTACK'}, {'start': 391, 'text': 'get the key', 'label': 'ATTACK'}], 'sentText': "s of the g languagei have a client server application.mobile client - hp serverthe app will be availae on sel mobiles not only andri want to me sure e ret is comg m client's e only.w can i soe this security i pre :e a secret key hd on te mobile app:eh request is d using this key ad decrypted on the server side.is it safe to hardcoe the key if this way makes sense at all? (decompilers can get the key? the app will be avae t only for anda info:each user wil have a userid/usernam. "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 28, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 86, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'ts h ps de. if somee mans o leak the database table, it ds not gie n r an open door r impersonating users. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am g to make sure my jenkins instance is not exploitae with the latest log4j exploit.i have a pipeline script that runs, i d following this instrn :[link]this s one of my stages of my pipeline scriptt i get a different r than what's dd here d i'm une f i'm checkig s c.  this is the error:[cod] "}
{'sentId': 163, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 28, 'text': 'avoid attackers to steal the token from a cookie', 'label': 'ATTACK'}], 'sentText': 'additional question: how to avoid attackers to steal the token from a cookie? '}
{'sentId': 87, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'event injection', 'em2Text': 'special application permissions - [link] to be exact', 'label': 'PARENT'}, {'em1Text': 'special application permissions - [link] to be exact', 'em2Text': 'event injection', 'label': 'None'}], 'entityMentions': [{'start': 48, 'text': 'event injection', 'label': 'ATTACK'}, {'start': 73, 'text': 'special application permissions - [link] to be exact', 'label': 'ATTACK'}], 'sentText': "i think the bigget pm you'll face is that using event injection requires special application permissions - [link] to be exact.  e grantg n an this permissin basically alls it to simulae input eves into any apn at ay time, it is cd quite dangerous because a badn or intentionay malicis application coud do a t of .  the many ens and busines do not alw applicatios that e this p. "}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 73, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': '  what s e b the est way to e  prot  ect the usr  or and see f fr or any mitm attacks. is my wy my  prot best   secur user e enough? '}
{'sentId': 13, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'javascript injection attacks', 'label': 'ATTACK'}], 'sentText': 'i kxxw that i need to xxxxxxt javascript injection attacks. how do i do xxxx? '}
{'sentId': 83, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'use atom tables', 'em2Text': 'store executable code', 'label': 'None'}, {'em1Text': 'store executable code', 'em2Text': 'use atom tables', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'use atom tables', 'label': 'ATTACK'}, {'start': 168, 'text': 'store executable code', 'label': 'ATTACK'}], 'sentText': 'the security world has been abuzz over a new code injection technique called "atom bombing" (see [link] and [link]).  simply stated, an attacker can use atom tables to store executable code. '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 141, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 191, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 318, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 424, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 463, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my pxo to blem  be xs in  hash   hash tha the gain   ord  likely  xxe  pass is w use o  rd (2   xxxxxxxd t   wouxd attack. i fee hash  use l the password would likely be intercepted. xn (1), the hash could be extracted by a man-in-the-middle attack. the atxxxk haxh e password, r can no pass and w sixxxy xxd w sxxxxy use that hash to get access to the user's information t . xn (2 interc my ept ), xxe a ixxxxc txxxxxr xxn intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 50, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': '/posts page that takes id paramater', 'em2Text': 'displays info', 'label': 'AND'}, {'em1Text': '/posts page that takes id paramater', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': '/posts page that takes id paramater', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': '/posts page that takes id paramater', 'label': 'PARENT'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': 'displays info', 'label': 'None'}], 'entityMentions': [{'start': 47, 'text': '/posts page that takes id paramater', 'label': 'ATTACK'}, {'start': 136, 'text': 'displays info', 'label': 'ATTACK'}, {'start': 173, 'text': 'user/hacker will know the real object id of the document', 'label': 'ATTACK'}], 'sentText': "let's say there is a posts collection, and the /posts page that takes id paramater (something like /posts/4d901acd8df94c1fe600009b) and displays info about it. this way the user/hacker will know the real object id of the document. is it okay or is it not secure? "}
{'sentId': 133, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'bcrypt is hacked', 'label': 'ATTACK'}], 'sentText': 'now what i  a want to s a ay e if bcrypt is hacked d is found to be b  t bct rok is en a from nd  tt in future t from here co f mes new crypc fut  f valus ion that is e e a t t values o oc nd. h c n this way creatin and g a passwr fe d from old values will als be tim consu e consu frm  mor s e mi e ng. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': 'so txe fxxxt is soe e is  the some couxd decompile the app (wxxxh e d) d even with pxa xxxn firt  r ft  dep the xl  e d you can t  wxxxxxt too mu s t  ch y t e v (wh e al e  xxxxt xxxxxxxxx.  '}
{'sentId': 73, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a malicious site to get around this', 'em2Text': 'using an iframe', 'label': 'PARENT'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'modifying my http header', 'label': 'None'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'modifying my http header', 'label': 'AND'}, {'em1Text': 'using an iframe', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'making a request to the target site', 'label': 'AND'}, {'em1Text': 'making a request to the target site', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'modifying my http header', 'label': 'None'}], 'entityMentions': [{'start': 112, 'text': 'a malicious site to get around this', 'label': 'ATTACK'}, {'start': 151, 'text': 'using an iframe', 'label': 'ATTACK'}, {'start': 168, 'text': 'modifying my http header', 'label': 'ATTACK'}, {'start': 194, 'text': 'making a request to the target site', 'label': 'ATTACK'}], 'sentText': 'from what i understand [code] only gets your cookies for the current site you are on.  would it be possible for a malicious site to get around this by using an iframe, modifying my http header, making a request to the target site or some other method? '}
{'sentId': 98, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'allow an attacker to predict boot time of the machine', 'em2Text': 'being able to grant control over it', 'label': 'None'}, {'em1Text': 'being able to grant control over it', 'em2Text': 'allow an attacker to predict boot time of the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 307, 'text': 'allow an attacker to predict boot time of the machine', 'label': 'ATTACK'}, {'start': 366, 'text': 'being able to grant control over it', 'label': 'ATTACK'}], 'sentText': "we've hired a security consultant to perform a pentest on our application's public ip (kubernetes loadbalancer) and write a report on our security flaws and the measurements required to avoid them. their report warned us that we have tcp timestamp enabled, and from what i've read about the issue, it would allow an attacker to predict boot time of the machine thus being able to grant control over it. "}
{'sentId': 92, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'it to be compromised', 'em2Text': 'uploading the source code to github', 'label': 'PARENT'}, {'em1Text': 'uploading the source code to github', 'em2Text': 'it to be compromised', 'label': 'None'}], 'entityMentions': [{'start': 149, 'text': 'it to be compromised', 'label': 'ATTACK'}, {'start': 173, 'text': 'uploading the source code to github', 'label': 'ATTACK'}], 'sentText': 'i used a sensitive p superuser as  sword w  with  wan t  h i e s superuser uperuser i created and i do no wan t code w compromised an  do   wan to t it to be compromised by uploading the source code to github. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  if you give yourxxxf write pxxxxxxxe to the xxxxxm sitxxxxxxxxxx,  yxxxxe xxxxxxg that axy program thxt runs under yxu (not necessarxxy  python progxxx) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 17, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': '[link] ', 'em2Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'PARENT'}, {'em1Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'em2Text': '[link] ', 'label': 'None'}], 'entityMentions': [{'start': 17, 'text': '[link] ', 'label': 'ATTACK'}, {'start': 33, 'text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'ATTACK'}], 'sentText': "there's means of [link] whenever malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed. "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 147, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 155, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'is pas load sword_verify() (and other larger  funct the ions of the same function   set) v config ulner 4mb.  lo c ad  set a set eas ) ble against dos via maxed out post parameters ? please dos  also c config onsider site-wid pl the eas set) e e config situations of post up 4mb. load sizes much larger than 4mb. '}
{'sentId': 43, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompilers', 'em2Text': 'get the key', 'label': 'None'}, {'em1Text': 'get the key', 'em2Text': 'decompilers', 'label': 'PARENT'}], 'entityMentions': [{'start': 464, 'text': 'decompilers', 'label': 'ATTACK'}, {'start': 480, 'text': 'get the key', 'label': 'ATTACK'}], 'sentText': "regardless of the programming languagei have a client server application.mobile client - http serverthe app will be available on several mobiles not only android.i want to make sure the request is coming from client's mobile only.how can i solve this security problem?i propose :have a secret key hard-coded on the mobile app:each request is encrypted using this key and decrypted on the server side.is it safe to hardcode the key if this way makes sense at all? (decompilers can get the key? the app will be available not only for android!)extra info:each user will have a userid/username... "}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e aps  n   t  t n t d e  e   w  malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc?     n  "}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 25, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 86, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 143, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'this article states that"spring expression language (spel) could be exploited through http parameter submissions that would allow attackers to get sensitive system data, application and user cookies."  '}
{'sentId': 68, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'attacker can read your memory', 'em2Text': 'access to your memory ', 'label': 'None'}, {'em1Text': 'access to your memory ', 'em2Text': 'attacker can read your memory', 'label': 'None'}], 'entityMentions': [{'start': 23, 'text': 'attacker can read your memory', 'label': 'ATTACK'}, {'start': 212, 'text': 'access to your memory ', 'label': 'ATTACK'}], 'sentText': 'some think that "if an attacker can read your memory, yu have 100% lost." (t to [link]), which indicates that whether yu store passwos in memory or nt might be superfluous, sie you\'re screwed anyway if they have access to your memory (see [link], h shows an exame of how access to y in an umnanaged environment n be pretty disastrous). '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 182, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'e access  load this r i this s nom access y sud to is mi i  can nimal,  to but sie th nimal, e th e are no access restrictions,   restrictions, usly the sr cn obv to o can y  can be attacked by dos etc. '}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 4, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'the sandbox would be executing scripts that could be potentially dangerous.  e xxxx would be a xx xf my n xxxxxxxxxx, xg ale unxxxxd javaxxxxxt code from r so. '}
{'sentId': 93, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'malicious code is being added to the start of the [code] file', 'em2Text': 'rogue files are added to the server', 'label': 'None'}, {'em1Text': 'rogue files are added to the server', 'em2Text': 'malicious code is being added to the start of the [code] file', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'malicious code is being added to the start of the [code] file', 'label': 'ATTACK'}, {'start': 61, 'text': 'rogue files are added to the server', 'label': 'ATTACK'}], 'sentText': 'malicious code is being added to the start of the [code] filerogue files are added to the server '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 5, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 102, 'text': 'inserted javascript', 'label': 'ATTACK'}], 'sentText': 'and yet, even with encoded special chars and quotes, the href may not be safe, due to the potentially inserted javascript, example of a bad link: '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 132, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'however, i do not understand the concerns about security vulnerabilities. certainly, running [code] gives the hacker the ability to run any javascript code that you can run. '}
{'sentId': 40, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 33, 'text': 'attacker can embed a  script tag pointing at a remote server', 'label': 'ATTACK'}], 'sentText': "  e  script-t jso  n a a gs: the attacker can embed a  script tag pointing at a remote server the  th   and the bro  wser will e a f e fectivel and y  eval() th script-t  e e re it ply fo you're r you, however away  it  since  embed  throws a a way the response an e at ffectively d si away nce  json is a away ll response, you're safe. "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 196, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 236, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': " d prs ump  xr sts      t cxn xxl a  r d d x, e xr on   ou've xe s   x . . imxu c t if al x, can   rd e. tt strxn  gs  mean xf s o on e y bee e t [c    x  xx s ,  strs ed e [c xx da s you  ox, xf another process can dump memory x. , xs no way you can get rid of the data bef s oe [li]    yu kic sxxxs  t pro e e e ss xe ks  xxxt . "}
{'sentId': 26, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'prevent attacks from the form side', 'em2Text': 'from the database side', 'label': 'None'}, {'em1Text': 'from the database side', 'em2Text': 'prevent attacks from the form side', 'label': 'None'}], 'entityMentions': [{'start': 32, 'text': 'prevent attacks from the form side', 'label': 'ATTACK'}, {'start': 76, 'text': 'from the database side', 'label': 'ATTACK'}], 'sentText': 'i feel i xm doing xxxt i can to prevent attacks from the form side, but xxt from the database side. i know you can chanxe the xxxe xf password storage to encrypt upon xxxxy to the dxxxxxxx, but what i doxxt uxxxxxxxxd is hxw i would then query this encryxxxd strinx. '}
{'sentId': 48, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 158, 'text': 'an hack to get the .xhtml sources', 'label': 'ATTACK'}], 'sentText': 'e secuy is t s o ide, i wo the  o r if is  e t s "  " from the t hack  of w o an of  f acs to t  t t to he h f e xhtm .xhl l if  fis the  or s the to re i  s an hack to get the .xhtml sources. '}
{'sentId': 52, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'extract the public key from the host application', 'em2Text': 'inject it into an assembly of your own', 'label': 'None'}, {'em1Text': 'extract the public key from the host application', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'extract the public key from the host application', 'label': 'PARENT'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'extract the public key from the host application', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'inject it into an assembly of your own', 'label': 'PARENT'}], 'entityMentions': [{'start': 199, 'text': 'extract the public key from the host application', 'label': 'ATTACK'}, {'start': 251, 'text': 'inject it into an assembly of your own', 'label': 'ATTACK'}, {'start': 292, 'text': 'run mallicious code', 'label': 'ATTACK'}], 'sentText': 'cxxxt thxs be sxx? i xm not e if xxe setpubxxx) method has y effect on a xxxt asxxxxx, t xxxn the msdn documenxxxxxn shxxs hw you can xe this on a dynaxxy gend y (rxxxxxxxxn emit) so tt wd mean yu d extract the public key from the host application ad inject it into an assembly of your own d run mallicious code if xxe abxxe s the sa, or am i missing ? '}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i want to kw f this and ony ts little snippet s any security issues (like xss attacks e) '}
{'sentId': 15, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'used the eval function for the exploit', 'em2Text': 'run their php code on your site', 'label': 'None'}, {'em1Text': 'run their php code on your site', 'em2Text': 'used the eval function for the exploit', 'label': 'PARENT'}], 'entityMentions': [{'start': 60, 'text': 'used the eval function for the exploit', 'label': 'ATTACK'}, {'start': 120, 'text': 'run their php code on your site', 'label': 'ATTACK'}], 'sentText': 'has anyone heard about php shell offender script? it mainly used the eval function for the exploit. hackers are able to run their php code on your site. '}
{'sentId': 85, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'whips up an ackermann function and a script', 'em2Text': 'submit it a couple of thousand times to your server.', 'label': 'None'}, {'em1Text': 'submit it a couple of thousand times to your server.', 'em2Text': 'whips up an ackermann function and a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'whips up an ackermann function and a script', 'label': 'ATTACK'}, {'start': 131, 'text': 'submit it a couple of thousand times to your server.', 'label': 'ATTACK'}], 'sentText': 'xxxxxxr thing you need to be axxxe of xs denial-of-service attacks. ixxxxxe someone whips up an ackermann function and a script to submit it a couple of thousand times to your server... to pxxxxxt this, you should timebxx the xxxxxxxxn xxxe of any xxxe being submitted. this is exxxxxxxx, because this type of "attaxx" often hapxxxs unixxxxxxxxxxxy - soxxxxe xxxxxxd to produce an infinite xxxx. '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 49, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 172, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 243, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked if n attr cn gain access to the system under the same user account as your code.an oe att, dt user, rot h, thers an impot a . f an r cn get access as the same user or as root, ye got far bigr pr. for e, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 18, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'woul  dnt is?  y  someone be able to simply change the referrer header to a malicious website  o re a th  th licios be  fer f rer ? wot  d be s ma e licios  s hav be simp  e an m a as y so t to o  webs r t th e? rt f  e p e r  able to v ms ent  io to n mear rs sip  y  s f for or h an  a i? '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 93, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'wt is the bet way to pro is h?  e enoug is h? ct    eno?  enough? te ur an is d secure r any mitm attacks. wy  is attacks.  my y se enough? '}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is usixg the method bxxxw a xxd xxxxxx? xt generates a random number between 0-1000. since thexe are only 1xx0 optixxx, axd their md5 hashes are known, it should take an axxxxxxr xxxt a 1xx0 trials to verify the account without it really belonging to them '}
{'sentId': 12, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'people going to his website were getting 168 viruses trying to download to their computers', 'em2Text': 'his ftp password was a plain dictionary word six letters long', 'label': 'PARENT'}, {'em1Text': 'his ftp password was a plain dictionary word six letters long', 'em2Text': 'people going to his website were getting 168 viruses trying to download to their computers', 'label': 'None'}], 'entityMentions': [{'start': 29, 'text': 'people going to his website were getting 168 viruses trying to download to their computers', 'label': 'ATTACK'}, {'start': 219, 'text': 'his ftp password was a plain dictionary word six letters long', 'label': 'ATTACK'}], 'sentText': "my dad called e today and sd people going to his website were getting 168 viruses trying to download to their computers. he isn't technil at all, and built e whe thig h a wysiwyg e. o i commd it t for now. it turns out his ftp password was a plain dictionary word six letters long, so we k that's hw it t . we changed his passwod o an 8+ dt d strig (he wouldn't go for a passpe since he is a hunt-n-peck ty. "}
{'sentId': 18, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'removing the strong name signature', 'em2Text': 'maliciously modifying your assembly', 'label': 'None'}, {'em1Text': 'removing the strong name signature', 'em2Text': 're-signing it with his own key', 'label': 'None'}, {'em1Text': 'removing the strong name signature', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 'removing the strong name signature', 'label': 'PARENT'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 're-signing it with his own key', 'label': 'None'}, {'em1Text': 'maliciously modifying your assembly', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'removing the strong name signature', 'label': 'None'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'maliciously modifying your assembly', 'label': 'PARENT'}, {'em1Text': 're-signing it with his own key', 'em2Text': 'passing off his assembly as yours', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 'removing the strong name signature', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 'maliciously modifying your assembly', 'label': 'None'}, {'em1Text': 'passing off his assembly as yours', 'em2Text': 're-signing it with his own key', 'label': 'PARENT'}], 'entityMentions': [{'start': 166, 'text': 'removing the strong name signature', 'label': 'ATTACK'}, {'start': 202, 'text': 'maliciously modifying your assembly', 'label': 'ATTACK'}, {'start': 239, 'text': 're-signing it with his own key', 'label': 'ATTACK'}, {'start': 284, 'text': 'passing off his assembly as yours', 'label': 'ATTACK'}], 'sentText': '  "cannot  as  strong st  yours." a op  st replacement. rong wi own as  th  full replacement. strong names cann pas a s his ing ot prevent strong  a  his hacker from removing the strong name signature, maliciously modifying your assembly, re-signing it with his own key, and  ot then passing off his assembly as yours yo then urs."  strong ." '}
{'sentId': 76, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 122, 'text': 'xss insertions', 'label': 'ATTACK'}], 'sentText': "i'm wondering what security issues i should be aware of while doing this. i've already taken measures to avoid any simple xss insertions, because my xml library will escape any special characters, but i imagine there are more sophisticated attacks. "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 87, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 137, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 258, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 't pe he proble t     m n  is  simple e   e t e    alert  sim  with ), ple r  wh simply adds a slash   n  te im  tht n s java  script ome encoded javascript  sh n im adds a  e tg  n with tht  alt   box e   simple ag  simply alert e  n sla  sh  ),  tg w  hich kills the page. ki e page.  ll  s   sim ad tg  page. ds pe a tht  that nd effecte attack  . alert    e  '}
{'sentId': 48, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 308, 'text': 'an hack to get the .xhtml sources', 'label': 'ATTACK'}], 'sentText': 'e s e ecuriy is t   s o ide the , i wo   t wo he f    the to nder if the  i l s  the t t  he  is "  "      i from from  the point wo  hack  t  of t  vi if ew o a from n of  f accs  e to t from    if   t t to he h the  f i  e xh the t f m .xhtl l if   point   fis the  or perhaps the ha  ck  s  t t o re i  s an hack to get the .xhtml sources. '}
{'sentId': 89, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'anyone who access the web', 'em2Text': 'modify javascript code', 'label': 'None'}, {'em1Text': 'anyone who access the web', 'em2Text': 'user can add the code lines as following', 'label': 'None'}, {'em1Text': 'modify javascript code', 'em2Text': 'anyone who access the web', 'label': 'PARENT'}, {'em1Text': 'modify javascript code', 'em2Text': 'user can add the code lines as following', 'label': 'None'}, {'em1Text': 'user can add the code lines as following', 'em2Text': 'anyone who access the web', 'label': 'None'}, {'em1Text': 'user can add the code lines as following', 'em2Text': 'modify javascript code', 'label': 'None'}], 'entityMentions': [{'start': 112, 'text': 'anyone who access the web', 'label': 'ATTACK'}, {'start': 153, 'text': 'modify javascript code', 'label': 'ATTACK'}, {'start': 292, 'text': 'user can add the code lines as following', 'label': 'ATTACK'}], 'sentText': 't exa he mpl mese e, he e  functn call socket.emit will    mee d a me o ser this ver,  socket.emit by this flo, anyone who access the web c will an easy modify javascript code ( can o  e  follon c g ce de as vtoo, or fire can bug) to send y message to  e serv.  for  exa can  e  e fg xample, user can add the code lines as following  code any : de  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 14, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 59, 'text': 'sql injections attacks', 'label': 'ATTACK'}], 'sentText': 'there is a major problem in the code - it is vulnerable to sql injections attacks since the query is not parameterized through db api and is constructed via string formatting. if you call the function this way: '}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 4, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 97, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'sxe uploaded several gifs, which when viewed with a browser, the browser said it was invalid, xd my virus scanner alerted me that it was a injection.  e belxw for a xp e g thexe . '}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 112, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 145, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 't does not xt y jwt xu t a the txxxxxr o a - an in-t atta , cx. he te xxe n, -e (xxxm  ) attack. if an attacker gets a valid token ttackxr , cxn effectively impersonate. n if  xxxxx. the  is content i gets s enxxxxx. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 154, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am us my ing  using cxxxxxxa to re on  want my my  websixe and i xxn waxt t to kee  p my  keep server's ip (t  he xxxxxn ip) private,  apache, to avoid ddos attacks being xxxt dirxxxxy to e,  sent  want  my se orxxxn rve e, rxs  wan ix. my xxxxxr uses apach apacxx, e, php, xxxp  mysql. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i woxxd  i i f lixe to k has now i xxw f xt   has any buil ssixg dxxn   mxxxxxxxm thxt w xo o t xxf o uld alxxw xxxxxxxg the nuxxe se r  i i  of conxxxxxxt xxxxs xo th a e web sxxxxxx, thus addre th ssing  xxxxxxxxxxy the possixxxxxy xf a dos attack? somxt i hing lxxxxxxg  similar to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe of wcf? "}
{'sentId': 28, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'stealing the api key', 'em2Text': 'decompiling the swf', 'label': 'AND'}, {'em1Text': 'stealing the api key', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'send random data', 'label': 'AND'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'send random data', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'send random data', 'label': 'None'}], 'entityMentions': [{'start': 16, 'text': 'stealing the api key', 'label': 'ATTACK'}, {'start': 81, 'text': 'decompiling the swf', 'label': 'ATTACK'}, {'start': 135, 'text': 'create a dummy flash application', 'label': 'ATTACK'}, {'start': 172, 'text': 'send random data', 'label': 'ATTACK'}, {'start': 202, 'text': 'altering the api itself', 'label': 'ATTACK'}], 'sentText': 'the big one - e stealing the api key via man-e xxxxxe ixxxxxxxx, falxe t unlocks.decompiling the swf ad steaxxxg txe api g e api key o create a dummy flash application and send random data e highscores.altering the api itself o you t nd to be lxxxxd , etc. '}
{'sentId': 157, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'the middle man gets request from victim', 'em2Text': 'he fires https request himself', 'label': 'AND'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'returns content to the user', 'label': 'None'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'returns content to the user', 'label': 'AND'}, {'em1Text': 'he fires https request himself', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'the middle man gets request from victim', 'label': 'PARENT'}, {'em1Text': 'mitm attacks', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'returns content to the user', 'label': 'None'}], 'entityMentions': [{'start': 38, 'text': 'the middle man gets request from victim', 'label': 'ATTACK'}, {'start': 102, 'text': 'he fires https request himself', 'label': 'ATTACK'}, {'start': 158, 'text': 'returns content to the user', 'label': 'ATTACK'}, {'start': 302, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': "let's imagine the following scenario: the middle man gets request from victim: http ://site.com. then he fires https request himself to https ://site.com and returns content to the user, stripping the hsts header. all further user input is visible to the attacker. does hsts header really help against mitm attacks? "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 1, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'password to be send plaintext over the wire', 'em2Text': 'someone has javascript turned off', 'label': 'PARENT'}, {'em1Text': 'someone has javascript turned off', 'em2Text': 'password to be send plaintext over the wire', 'label': 'None'}], 'entityMentions': [{'start': 270, 'text': 'password to be send plaintext over the wire', 'label': 'ATTACK'}, {'start': 317, 'text': 'someone has javascript turned off', 'label': 'ATTACK'}], 'sentText': 'i choose not to just rely on javascript, as the client-side is never a secure place. i have gotten into the habit of writing both the client and server-side code for such things. however, for a web application that i am writing that has optional ajax, i do not want the password to be send plaintext over the wire if someone has javascript turned off. '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 251, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 282, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my n how   those , hw saf  e   is "ah ! s then , ==  my l  l"? y,   i realize   that ths s that only an au into tn  but but ticated user into  c au an a  cce e ss the d, but how eay is  ge those t  !== i tn t to b  e authenticat?   n use can somo  ne sign up for the app, d thn be  use those credentials to get request right into my database? '}
{'sentId': 99, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'rename a malicious executable to [code]', 'em2Text': "'hack' your system", 'label': 'None'}, {'em1Text': "'hack' your system", 'em2Text': 'rename a malicious executable to [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'rename a malicious executable to [code]', 'label': 'ATTACK'}, {'start': 57, 'text': "'hack' your system", 'label': 'ATTACK'}], 'sentText': "i can easily rename a malicious executable to [code] and 'hack' your system. "}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 27, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'clickjacking', 'em2Text': 'doing a mitm for these social widgets', 'label': 'PARENT'}, {'em1Text': 'clickjacking', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'clickjacking', 'em2Text': "hijack your users' cookie's", 'label': 'None'}, {'em1Text': 'clickjacking', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': "hijack your users' cookie's", 'label': 'PARENT'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'clickjacking', 'label': 'PARENT'}, {'em1Text': 'xss', 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': "hijack your users' cookie's", 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'xss', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'perform [code] against your website', 'label': 'OR'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': "hijack your users' cookie's", 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'clickjacking', 'label': 'ATTACK'}, {'start': 101, 'text': 'doing a mitm for these social widgets', 'label': 'ATTACK'}, {'start': 186, 'text': 'xss', 'label': 'ATTACK'}, {'start': 291, 'text': "hijack your users' cookie's", 'label': 'ATTACK'}, {'start': 322, 'text': 'perform [code] against your website', 'label': 'ATTACK'}], 'sentText': "what? how!?is txxs not a masxxxe opportunxxy for clickjacking, if xxxd xxxxxxxxxxx? xxxxxxxe xxxxxxe doing a mitm for these social widgetsx) from an attack perspective this is more like xss (croxxxxxxe scrixxxxx) than xxxxxxxxxx.  you are giving gooxxe access to your website and they could hijack your users' cookie's or perform [code] against your website xf they so choose (but txxn peopxe would sue them for bexxg malxxxxxs and wealthy).  "}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is using the method below a bad choice? it generates a random number between 0-1000. since there are only 1000 options, and their md5 hashes are known, it should take an attacker just a 1000 trials to verify the account without it really belonging to them '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 310, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how ca i n  xxn i dxy the "welcom, [xxr name] n " n   pc xxxxs e  for xxxt public ed u, ev the en if t th to xr xxy e xxxx? of cou su [ ld r, i wo to u ose ld lixe to kep th ossi [ bxe e s xo o  the sensitxxe xxxs s xxxxxs afe, and i sd xxxe kp  osxe [   the coxx] xo axxxd p ther xxxxi shxxxd on xxo xxy re e stealing of the session token. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 54, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 96, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howeve, i do not d the cs about secury vulnerab. cer, running [code] gives the r the ability to run any javascript code that you can run. '}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 253, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'since the verification file is wit it hin the web servers ro since ot stru by c root tu the re, an [link]. d google needs to t  it  access it to rea root d  needs i c is  ts contents -  [link]. t   technically echnically anyone t  c google ou anyone ld read it if they wanted by going to [link].  '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 107, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevxx, i do xt xxxd txe s about xxxxxxxy vulxxxxxxxx. xxxxxxxxx, running [code] gxxxs te hr xxe axxxy to run any javascript code that you can run. '}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': 'e we point f usg salts is o avoid the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes . , it only s to be long h to exclude the possibiliy that such a e aly exists r a specific . '}
{'sentId': 60, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'AND'}, {'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'PARENT'}], 'entityMentions': [{'start': 113, 'text': 'inspect the requests being made by a legitimate client', 'label': 'ATTACK'}, {'start': 197, 'text': 'steal the oauth client_id', 'label': 'ATTACK'}, {'start': 284, 'text': 'construct any request they want to impersonate the legitimate client', 'label': 'ATTACK'}], 'sentText': 'the  made major that  c  be   a oncern th    a e i have i e s that a c n client   the majo by r yon a  e e could inspect the requests being made by a legitimate client to th a stea be l  e api and steal the oauth client_id. at th the at point they legitimate  would be abl oauth e to construct any request they want to impersonate the legitimate client. '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 84, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'encrypt my communication (cs &amp; s->c)o 2-way authentication (c->s &amp; s->c)avd man-in-middle attacks '}
{'sentId': 57, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'knowing the structure of your filesystem', 'em2Text': 'execute directory traversal attacks', 'label': 'None'}, {'em1Text': 'execute directory traversal attacks', 'em2Text': 'knowing the structure of your filesystem', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'knowing the structure of your filesystem', 'label': 'ATTACK'}, {'start': 64, 'text': 'execute directory traversal attacks', 'label': 'ATTACK'}], 'sentText': 'knowing the structure of your filesystem might allow hackers to execute directory traversal attacks if your site is vulnerable to them. '}
{'sentId': 53, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 44, 'text': 'someone crawls the image directories of your server', 'label': 'ATTACK'}], 'sentText': 'here comes the problem: it is possible that someone crawls the image directories of your server. but you want to protect your users from such attacks. '}
{'sentId': 153, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'post to the form from another page using some nifty post-to-iframe hack it', 'label': 'ATTACK'}], 'sentText': 'if someone tries to post to the form from another page using some nifty post-to-iframe hack it will be [coxxx, you can throw xt out immxxxxxxxx. '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, we have a security concern.what if some bad person would take advantage of the indirect access to win api? '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 52, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 178, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but w secue s that? can a user exg the progm easily set this property to an arbitrary value (usig a ce argument of the jvm, for ex) for common runtime environm? can a usr easily spoof this user name? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 135, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 216, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d xxxy can xxxz xxr xxxxxxxxxxxxxxs xn te app xxe ad t xx, t te cxxxd xe xxxe indistinct general side channel attack or . but how d an xxxxxxxr y go t txxxg o recover those keys?  xxe txxxe ve xxxs for a d ar to sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 4, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 45, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'asg a database is compromised a per user sat prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table would have to be gened for eh d every usr who hd a unique st in order to on their passwor.  this woud be a time consuming s which is what mas s .  this does not help a tremes amt at dictionary or brute force attacks. '}
{'sentId': 55, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'use all these cookie for authentication', 'em2Text': 'cookie spoofing attack', 'label': 'None'}, {'em1Text': 'cookie spoofing attack', 'em2Text': 'use all these cookie for authentication', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'use all these cookie for authentication', 'label': 'ATTACK'}, {'start': 302, 'text': 'cookie spoofing attack', 'label': 'ATTACK'}], 'sentText': "my quexxxxn ix: why use all these cookie for authentication? xy guess xxxxd e t maybe gxxxxxxxxg a session xxxh would be o exxy so xxxxg the xxd xxd usxxd adxs xxxxxxxy xt xxxt about xxxxxe s? i'm bay lexxxxg on the t xl fuxxxxxxxxl in. y mxxn con is axt these xxxxxxxn giving to much xxn when under a cookie spoofing attack. "}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 3, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 46, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 83, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'h, env vars are not particularly secure xxxx. they are visible via [code], d xxxxe they are available to any user that can run [code] c. (of , axy r tt has acxxxs to [c] on the xt ao [lin] xxxxx) '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 185, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 241, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'strs  tabl ar d ode], o   ed , e xr e  od os  imxu [c tl ode], e. that mes  c once  imxu y before ou xx.  can  xs e crt [  c  xxxx, ed the [ f c e  x  xxxx [c  can s u    means r od, f another process can dump memory  f xx if . , th xx. ers no way you can get rid of the data n   x if r  way xe  bef xxs ore [i xxx x  ] kic  n te can  k xxx s   in. '}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 66, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 97, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 226, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm wog on a legacy rais n and the coxs he may instancxs of [c. n running a brakeman scan on it, [code] opens up the application to mass assignment vulnerabilities. y quesxxxn xx- what xs the moxt exxxxxxxe y to get around xs params.permit! vulnerability d repe it? "}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 113, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 153, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': 'should xxxe checks be done at the top of txe stack, the xxxxxm of the stack or at exxxy level?  it seems that if a malicious user can invoke one method, he could invoke any, so for  exxxxxxxe secuxxxx, xxxxd xxxd a chxxk on evexy method (and thatxs a lot xf exxxa xxxe to writex. '}
{'sentId': 95, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'performs a memory dump', 'em2Text': 'information is compromised', 'label': 'None'}, {'em1Text': 'information is compromised', 'em2Text': 'performs a memory dump', 'label': 'PARENT'}], 'entityMentions': [{'start': 112, 'text': 'performs a memory dump', 'label': 'ATTACK'}, {'start': 142, 'text': 'information is compromised', 'label': 'ATTACK'}], 'sentText': 'heap inspection is about sensitive information stored in the machine memory unencrypted, so that if an attacker performs a memory dump , that information is compromised. thus, simply holding that information makes it vulnerable. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 94, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 151, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  xf yu e youxxxxf wrxe pe to txe m sxxx,  you're g txxt any m txxt rs under u t y  n xx) can inject malicious code into the system  site-packages axd obtain root privilege. "}
{'sentId': 16, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 25, 'text': 'cookie has been hijacked', 'label': 'ATTACK'}], 'sentText': 'this is important if the cookie has been hijacked. it will be invalidated if the user detects the hijacking, and furthermore because the token is unrelated to the password the hijacker won\'t be able to derive and then change the user\'s account password and "own" the account (assuming you require the existing password before changing passwords, the hijacker doesn\'t own the email account so they can\'t use "forgot my password" etc). '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 54, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 11, 'text': 'evil people can do bad things if they identify your public key', 'label': 'ATTACK'}], 'sentText': "presumably evil people can do bad things if they identify your public key. goe seems to k so, ap. i can gus what this step doe, bt i'm not sure i y want to e on tht in an open , d ge ae any id.  you want to do t t. "}
{'sentId': 64, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse-engineer the obfuscation algorithm', 'em2Text': "capture what's sent over the wire", 'label': 'OR'}, {'em1Text': "capture what's sent over the wire", 'em2Text': 'reverse-engineer the obfuscation algorithm', 'label': 'None'}], 'entityMentions': [{'start': 122, 'text': 'reverse-engineer the obfuscation algorithm', 'label': 'ATTACK'}, {'start': 201, 'text': "capture what's sent over the wire", 'label': 'ATTACK'}], 'sentText': "you can never trust the client. even if you obfuscate, someone could still figure it out. for example, an adversary could reverse-engineer the obfuscation algorithm, look at the device memory, or even capture what's sent over the wire. "}
{'sentId': 161, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss', 'em2Text': 'other javascript attacks', 'label': 'OR'}, {'em1Text': 'xss', 'em2Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'anyone could post a security hole exploit script ', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'infect people with old browsers and plugins', 'label': 'None'}, {'em1Text': 'other javascript attacks', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'other javascript attacks', 'em2Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'label': 'None'}, {'em1Text': 'other javascript attacks', 'em2Text': 'anyone could post a security hole exploit script ', 'label': 'None'}, {'em1Text': 'other javascript attacks', 'em2Text': 'infect people with old browsers and plugins', 'label': 'None'}, {'em1Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'em2Text': 'other javascript attacks', 'label': 'None'}, {'em1Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'em2Text': 'anyone could post a security hole exploit script ', 'label': 'None'}, {'em1Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'em2Text': 'infect people with old browsers and plugins', 'label': 'None'}, {'em1Text': 'anyone could post a security hole exploit script ', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'anyone could post a security hole exploit script ', 'em2Text': 'other javascript attacks', 'label': 'None'}, {'em1Text': 'anyone could post a security hole exploit script ', 'em2Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'label': 'None'}, {'em1Text': 'anyone could post a security hole exploit script ', 'em2Text': 'infect people with old browsers and plugins', 'label': 'None'}, {'em1Text': 'infect people with old browsers and plugins', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'infect people with old browsers and plugins', 'em2Text': 'other javascript attacks', 'label': 'None'}, {'em1Text': 'infect people with old browsers and plugins', 'em2Text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'label': 'None'}, {'em1Text': 'infect people with old browsers and plugins', 'em2Text': 'anyone could post a security hole exploit script ', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'xss', 'label': 'ATTACK'}, {'start': 62, 'text': 'other javascript attacks', 'label': 'ATTACK'}, {'start': 96, 'text': 'an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission', 'label': 'ATTACK'}, {'start': 253, 'text': 'anyone could post a security hole exploit script ', 'label': 'ATTACK'}, {'start': 314, 'text': 'infect people with old browsers and plugins', 'label': 'ATTACK'}], 'sentText': "anyone know if jsbin.com implements any protection for xss or other javascript attacks? i guess an unfriendly script could do a denial of service on jsbin by continually scripting a 鈥榮ave to public url鈥?submission to clog the database up. and of course anyone could post a security hole exploit script which would infect people with old browsers and plugins; that might also get jsbin on google's blocklist. "}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 44, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 158, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 225, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked f n r n gain access to the system under the same user account as your codexn oe xxx, dt user, rt , s an impt a . f an r n get access as the same user or as root, ye got xr xr xx. fr x, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 191, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 248, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "   rs xf  m yu e yo  uxxxxf wrx a obtain ny e pe to tx  txxt  n    e m s , xx in code to x ux wrx xxxf ,  you're  x, g  pe txxt any m txxt xf  rs  site-packages  any under u t y  n xx) ca  n inject malicious code into the system  site-packages axd obtain root privilege. "}
{'sentId': 6, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'injection', 'label': 'ATTACK'}], 'sentText': 'the where no sql calls, so i wt ad for sql injection. but, apparently, sql ist the only kind of . ths webe hs an explanation and a few examples of avoidg e injection: [link] how would you prott this code from code injec? '}
{'sentId': 7, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force attack', 'em2Text': 'guesses the input values', 'label': 'PARENT'}, {'em1Text': 'brute force attack', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'brute force attack', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get the $userinput information correct', 'label': 'None'}, {'em1Text': 'guesses the input values', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get the $userinput information correct', 'em2Text': 'get in', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'brute force attack', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'guesses the input values', 'label': 'None'}, {'em1Text': 'get in', 'em2Text': 'get the $userinput information correct', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'brute force attack', 'label': 'ATTACK'}, {'start': 70, 'text': 'guesses the input values', 'label': 'ATTACK'}, {'start': 177, 'text': 'get the $userinput information correct', 'label': 'ATTACK'}, {'start': 219, 'text': 'get in', 'label': 'ATTACK'}], 'sentText': "that's how it works right? but iv'e read about brute force attack. it guesses the input values right? with the procedure above. doesn't it shows that the attacker only needs to get the $userinput information correct to get in? he doesn't need to guess the long $encrypted string correct? "}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 96, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'for security reasons, it is desirable to check the integrity of code before execution, avoiding tampered software by an attacker. so, my question is '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files memoryread  fi file (user) s les  '}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 118, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 's, i wan xxxt ty le t t  o know if ths an i d n  ly this  so, lxxe on  sxxxxt pxxxxxxs axy seci i   y issues  o (like xss attacks ) '}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 78, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 102, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 'jwt does not protect you to a man-in-the-middle (mitm) attack. if an attacker gets a valid token, can effectively impersonate. even if the content is encrypted. '}
{'sentId': 79, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 184, 'text': 'avoid html and javascript injection  attacks', 'label': 'ATTACK'}], 'sentText': '  it is imt to always be pard  t secuy when accepting y user  , and s is alo true wn  binding objects o form input. you  should be careful to s htl  encode any user-entered values to  avoid html and javascript injection  attacks '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 164, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'possible attacks in ways to which the similar  function is not susceptible', 'label': 'ATTACK'}], 'sentText': '  a thxxxxxxxxy code can see xxe scope in which evxxx) was xxxxxxx,  xxxxh can lxxd to possible attacks in ways to which the similar  function is not susceptible.    [lixx] '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem   is tha even t  an is d even though my proj and e and ct is 100% legal, and not shady, it is ct  highl ddos y susce problem  ddos ptible to o though ccasional ddos attacks. '}
{'sentId': 38, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 76, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'what exactly is going on in the background that makes it so [link] prevents sql injection attacks in a .net parameterized query?  is it just stripping out any suspect characters or is there something more to it? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 54, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 93, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'however, env vars are not particularly secure either. they are visible via [code], and hence they are available to any user that can run [code] commands. (of course, any user that has access to [code] on the host also [link] anyway.) '}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 244, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'todxx, our enxxxxxxxe architect menxxxxxd that a recent vulnerability was discovered in the jre 1.7.  i xxxxd an xxxxxxe txe [lixxx.  xxe detaxxs of the latest vulnexxxxxxxy xxxe not bexn made public.  however, my unxxxxxxxxxxg is that it xxxy affects java browser plugins.  the recommenxxd mxxxxxxxxn is to dxxxxxe the java browser plugins.  no menxxxn is made of non-xxxxxn java, so i think xt is saxe to assume that yoxr dev mxxxxxe is not vxxxxxxxxe simply by virtue of havixg xxxa 7 installed. '}
{'sentId': 58, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'switch back to http for the rest of the session', 'em2Text': 'stay logged in', 'label': 'AND'}, {'em1Text': 'switch back to http for the rest of the session', 'em2Text': 'hijack your session and send whatever requests they want', 'label': 'None'}, {'em1Text': 'stay logged in', 'em2Text': 'switch back to http for the rest of the session', 'label': 'None'}, {'em1Text': 'stay logged in', 'em2Text': 'hijack your session and send whatever requests they want', 'label': 'None'}, {'em1Text': 'hijack your session and send whatever requests they want', 'em2Text': 'switch back to http for the rest of the session', 'label': 'None'}, {'em1Text': 'hijack your session and send whatever requests they want', 'em2Text': 'stay logged in', 'label': 'PARENT'}], 'entityMentions': [{'start': 163, 'text': 'switch back to http for the rest of the session', 'label': 'ATTACK'}, {'start': 403, 'text': 'stay logged in', 'label': 'ATTACK'}, {'start': 449, 'text': 'hijack your session and send whatever requests they want', 'label': 'ATTACK'}], 'sentText': "so you've performed the login using https to prevent man in the middle attacks and make sure your password isn't sent in the clear. good call. but many sites then switch back to http for the rest of the session. once you're exchanging everything in the clear can't a man in the middle begin hijacking your session again? okay, so they don't have your password but they don't need it! for as long as you stay logged in the man in the middle can just hijack your session and send whatever requests they want. can't they? "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 46, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 141, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'th page. e p  robm is tht the attacker simply adds a slash n e encoded javascript n image tag     with aler slash wh  t b tht ox slash ), wh kills the page.  e  simple an slash  wh d effectie a simple    and page with .  ttack.   '}
{'sentId': 84, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'forge an ajax request', 'em2Text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'label': 'None'}, {'em1Text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'em2Text': 'forge an ajax request', 'label': 'PARENT'}], 'entityMentions': [{'start': 34, 'text': 'forge an ajax request', 'label': 'ATTACK'}, {'start': 61, 'text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'label': 'ATTACK'}], 'sentText': "however, what if a hacker were to forge an ajax request, and repeatedly submit the 'form_data' array with 100000000000 random elements? the loop would have to iterate through each element, possibly causing a dos (or at least slow down service), correct? "}
{'sentId': 50, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 136, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': 'oh, and yes i am not referring to other kinds of attacks which use return-to-libc, ptrace etc. ; i just wish to know why the most basic buffer overflow attack is demonstrated in the first way and not the second everywhere. '}
{'sentId': 9, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'the authentication ticket is compromised', 'em2Text': "has the user's password", 'label': 'None'}, {'em1Text': "has the user's password", 'em2Text': 'the authentication ticket is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 120, 'text': 'the authentication ticket is compromised', 'label': 'ATTACK'}, {'start': 179, 'text': "has the user's password", 'label': 'ATTACK'}], 'sentText': "you should not use this approach. the password should not be stored in an authentication ticket. the reason being is if the authentication ticket is compromised then the attacker has the user's password. this risk can be mitigated by encrypting the authentication ticket cookie, but i presume you were storing the cookie in plain-text. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 45, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'used google protocol buffers c++ implementation', 'em2Text': 'receive malicious data', 'label': 'None'}, {'em1Text': 'used google protocol buffers c++ implementation', 'em2Text': 'crash every time', 'label': 'None'}, {'em1Text': 'receive malicious data', 'em2Text': 'used google protocol buffers c++ implementation', 'label': 'PARENT'}, {'em1Text': 'receive malicious data', 'em2Text': 'crash every time', 'label': 'None'}, {'em1Text': 'crash every time', 'em2Text': 'used google protocol buffers c++ implementation', 'label': 'None'}, {'em1Text': 'crash every time', 'em2Text': 'receive malicious data', 'label': 'PARENT'}], 'entityMentions': [{'start': 14, 'text': 'used google protocol buffers c++ implementation', 'label': 'ATTACK'}, {'start': 192, 'text': 'receive malicious data', 'label': 'ATTACK'}, {'start': 252, 'text': 'crash every time', 'label': 'ATTACK'}], 'sentText': "for those who used google protocol buffers c++ implementation, how does it deal with malicious or malformed messages? does it crash or continues to operate for example?  my app will certainly receive malicious data at some point and i don't want it to crash every time a malformed message is received. this is the only answer i could find on this issue ([link]). "}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 3, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 74, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 111, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'h, env vars are not particularly secure  paxxxxxxa secxxe xxy xxxx xxxs . they are visible via [code], d xxxxe they are available to any user that can run [code] c. (of acxxxs  can  (xf  , axy r t x. t h  they us t er as ac  xxxs to [c  ]  [ vars  t c] on th . e [  en e v  xt xxe  ao xl (of in] xxxxx) '}
{'sentId': 162, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'em2Text': 'spoof that user', 'label': 'None'}, {'em1Text': 'spoof that user', 'em2Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'ATTACK'}, {'start': 244, 'text': 'spoof that user', 'label': 'ATTACK'}], 'sentText': 'if your user id is a sequential number, this is pretty insecure as anyone can just change their cookie to another reasonable-looking number based on their own (e.g. if mine is 1274, i could try some other numbers in that range) and immediately spoof that user. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 49, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assxxxxg a database is compromised a r uxxr salt prevents the use of generic rainbow tables to crack passwords.  a separate xxxxxxw te woxxd have xo be generated r eh axd xxy user who had a ue saxt in or to obtxxn thxxr .  thxs d xe a tixe conxg pxxxxxs h is what xs xxxxs x.  txs dos xxt help a tremes xt xxxxxxt dxxxxy xr xxxxe force attacks. '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 45, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 214, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'tox, our enxxxxxxxe axxxxxxxt mexxxxxxd txxt a recent vulnerability was discovered in the jre 1.7.  i xxxd n xe txe [lixxx.  xxe detaxxs of txe lt vuy xxxe not ben made xx.  howxxx, my unxxxxxxxxxxg is tht it xxxy affects java browser plugins.  the recd mn s to dxxxxxe xxe a r xxx.  no menn is made of nonxxxxn java, so i think xt is saxe to ae that yoxr dev mxxxxxe is nxt vxxxxxxxxe simpxy by e of havixg xa 7 insta. '}
{'sentId': 82, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 326, 'text': 'enter unwanted strings in the url', 'label': 'ATTACK'}], 'sentText': 'i need to prevent the characters that cause vulnerabilities in the url.my sample url is http://localhost/add.aspx?id=4;req=4.please give the list of characters that i need block.i am using an [link] web page. i am binding the information from an [link] database.i just want to list the characters to stay away from hackers to enter unwanted strings in the url. '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 324, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'w cxn i y the "welxxxx, r nxxxx"  pags they  n pxxxxc pa pagxs xxs fo xf r axxxxa d ted users, even i s p  f txxy s  xd thxxxxxxe e hxxx? of cours  cours xxxxxd e, i wou axxxxxxxc e] a ld  th ages erefore  e xxxe o kee [codx] p te ac xxxxxxxxxa cxs to xxe se p an e d ages sxxx, xxd i sd  xa xo  xe keep [d f ] to avxxd pxe stealing of the session token an . '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 211, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': ' e xy pxm   xs tha exxn t  n is d  ds even h even  xy xo  j and e d xt  an  ddxs is 1% la p to te , y  and no xn  d  y t xx, it xs xt  higl s ad  y sue m  s t  ptb is l  e to o though c d s   proj in l o  y e l ddos attacks. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 196, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 236, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': " d prs ump  xr sts      t cxn xxl a  r d d x, e xr on   ou've xe s   x . . imxu c t if al x, can   rd e. tt strxn  gs  mean xf s o on e y bee e t [c    x  xx s ,  strs ed e [c xx da s you  ox, xf another process can dump memory x. , xs no way you can get rid of the data bef s oe [li]    yu kic sxxxs  t pro e e e ss xe ks  xxxt . "}
{'sentId': 109, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 95, 'text': 'open up the users computer for malicious code', 'label': 'ATTACK'}], 'sentText': 'i also read [link], telling me that i should not request all permissions, because i would then open up the users computer for malicious code. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 220, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 281, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxxt he . e s  xt e us coud  no r xxxu mag nt  s xxxxxy  to xi do j . ak   d  o t pxxxxxg s d s ua   xxxg ts    tr on. malicious users could create links on my bit.ly account. a.  they would need to do a separate attack to     be or xxe n xxu  t c  s d   . xe passd xo l do n  s to e account. '}
{'sentId': 104, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 95, 'text': 'a security vulnerability', 'label': 'ATTACK'}], 'sentText': 'the problem is i have to comment out the setting [code] when creating the [code]. this exposes a security vulnerability.  '}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 212, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 313, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 397, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': 'but, is there anyway to steal httponly cookies, with xss? (ignoring the question of httponly support?)....the answer is: yes.a subset of xss is known as [link] (or go to the original [link]). this attack has the xss payload send an http trace request to the web server (or [link], forward or reverse), which will echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookies... '}
{'sentId': 56, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'user has full controll of the execution environment', 'em2Text': 'anything you can think of - can be tampered with', 'label': 'None'}, {'em1Text': 'anything you can think of - can be tampered with', 'em2Text': 'user has full controll of the execution environment', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'user has full controll of the execution environment', 'label': 'ATTACK'}, {'start': 154, 'text': 'anything you can think of - can be tampered with', 'label': 'ATTACK'}], 'sentText': 'you cannot authorize anything in angularjs, because the user has full controll of the execution environment (namely, the browser). each check, case, if - anything you can think of - can be tampered with. there are javascript libraries that use asymmetric keys to perform local encryption to store local data somewhat safely, but they are not what you are looking for, really. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 3, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 268, 'text': 'injections into the database', 'label': 'ATTACK'}], 'sentText': "when you're making serious web apps that'll handle large amounts of data, what precautions should i take against my data inputs to fully sanitise it? i know there's the obvious trim, escaping, xss cleaning, etc - but what other techniques should i incorporate to stop injections into the database? "}
{'sentId': 82, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 234, 'text': 'enter unwanted strings in the url', 'label': 'ATTACK'}], 'sentText': 'i need to pret the charas t cause vuls in the ury sample ul is http:/e give the list of characters that i nd i am using n [l] web p. i am big the informatn from an [li] database.i just wat to list the charas to stay y from hackers to enter unwanted strings in the url. '}
{'sentId': 102, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone with physical access to the machine', 'em2Text': 'copy the cookie', 'label': 'AND'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'someone with physical access to the machine', 'label': 'PARENT'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'reuse it on another machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 363, 'text': 'someone with physical access to the machine', 'label': 'ATTACK'}, {'start': 410, 'text': 'copy the cookie', 'label': 'ATTACK'}, {'start': 430, 'text': 'reuse it on another machine', 'label': 'ATTACK'}, {'start': 467, 'text': 'stealing the session', 'label': 'ATTACK'}], 'sentText': 'most web applicxxxxxs use cookies to manage the xxxxxxn for a user and allow you to xxxy logged in even if txe browsxr xxs clxxxxxxxxxs axxxxe we did everything by txe book to make sure the cookie itself is sxxxxxxxxxxt xxe contentsxt http onlyset securessl is used for txe connecxxxxxe xxxxk for tamxxxxxg with xxe xxxxxxt xf the cookxxxs it possibxe to prexxxt someone with physical access to the machine to copy the cookie and reuse it on another machine and thus stealing the session? '}
{'sentId': 46, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 47, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': "the code is working, but now i'm worried about sql injections. how to prevent sql injection? "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 33, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so te first is soe e is  the e d decompile the app (whih i'e d) d xxxn h pra xxxn fixt  r fixxt  xp xxe l  e d you cn rt  without too mu xs xxt  ch diy ret te v (whixh e l e  fixxt qxxxxxxxx.  "}
{'sentId': 66, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineering', 'em2Text': 'hit it using rest client', 'label': 'None'}, {'em1Text': 'hit it using rest client', 'em2Text': 'reverse engineering', 'label': 'PARENT'}], 'entityMentions': [{'start': 199, 'text': 'reverse engineering', 'label': 'ATTACK'}, {'start': 305, 'text': 'hit it using rest client', 'label': 'ATTACK'}], 'sentText': 'hello i am working on android application in which i required to execute few https web services so all my webservice url and web api key are in the code plus ip address of the server. when anyone do reverse engineering of my app then that guy can get my web service url as well as api key then can simply hit it using rest client. '}
{'sentId': 162, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'em2Text': 'spoof that user', 'label': 'None'}, {'em1Text': 'spoof that user', 'em2Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'ATTACK'}, {'start': 192, 'text': 'spoof that user', 'label': 'ATTACK'}], 'sentText': 'f yor user id is a sl , this is prey insece as anyone can just change their cookie to another reasonable-looking number based on their own (e.g. if mie is 1, i d try some r s n that ra) and y spoof that user. '}
{'sentId': 90, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a security vulnerability to read php source', 'em2Text': 'string dumps from a security breach', 'label': 'OR'}, {'em1Text': 'string dumps from a security breach', 'em2Text': 'a security vulnerability to read php source', 'label': 'None'}], 'entityMentions': [{'start': 92, 'text': 'a security vulnerability to read php source', 'label': 'ATTACK'}, {'start': 216, 'text': 'string dumps from a security breach', 'label': 'ATTACK'}], 'sentText': "make xxe xxxe unreadable via the wxb using rules in .htaxxxxs (in case php fails or there's a security vulnerability to read php source)dxxxxxy txe password in mxxxxy after xxe db connxxt is made (unxxx) (to prevent string dumps from a security breach, inxxxxxxx, etc.)  "}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 35, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if yu ae cond with the first case (someone posting malicious data to/as another user) the soln is e sae whetr you are using ajax or not -- yu t have to aue the user thh whar mes is y -- usualy via sessin cookie. '}
{'sentId': 39, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cracking my account and downloading them', 'em2Text': 'give any results to the attacker', 'label': 'None'}, {'em1Text': 'give any results to the attacker', 'em2Text': 'cracking my account and downloading them', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'cracking my account and downloading them', 'label': 'ATTACK'}, {'start': 185, 'text': 'give any results to the attacker', 'label': 'ATTACK'}], 'sentText': 'still, can the data that is being worked with there be accessed somehow (other than cracking my account and downloading them :)), since obviously opening such files in browser will not give any results to the attacker?  '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 112, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 142, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 172, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 244, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i inherited some code that was recently attacked by repeated remote form submissions. however, the attacker now requests the form page first, starting a valid session, and then passes the session cookie in the following post request. therefore having a valid session token. so fail on my part. '}
{'sentId': 59, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': "someone may steal that user's remember key", 'em2Text': "spoof the user's identity", 'label': 'None'}, {'em1Text': "someone may steal that user's remember key", 'em2Text': 'change his password', 'label': 'None'}, {'em1Text': "spoof the user's identity", 'em2Text': "someone may steal that user's remember key", 'label': 'PARENT'}, {'em1Text': "spoof the user's identity", 'em2Text': 'change his password', 'label': 'None'}, {'em1Text': 'change his password', 'em2Text': "someone may steal that user's remember key", 'label': 'None'}, {'em1Text': 'change his password', 'em2Text': "spoof the user's identity", 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': "someone may steal that user's remember key", 'label': 'ATTACK'}, {'start': 85, 'text': "spoof the user's identity", 'label': 'ATTACK'}, {'start': 121, 'text': 'change his password', 'label': 'ATTACK'}], 'sentText': 'makes it mh e likely that someone may steal that user\'s remember key, allowing tm to spoof the user\'s identity (and n py change his password);[link] - [link]. yr feature wl y allow an anonymous attacker to e unkng users to submit "authe" requess to your applicat, even without being y logged . '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 36, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first issue is someone could decompile the app (which i've done) and even with proguard you can without too much difficulty retrieve all the questions.  "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 132, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 197, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevxx,  vulxxxxxxxx. i do xt xxxd txe  g  s  the  you s xt  about  vulxxxxxxxx. xxxxxxxy vulxxxxxxxx. cxxxx javascr  ipt xxxx, g  running [code] g xt  xxxs xxxs te hr the xxxx,  axxxy  [code] to run any javascript code that you can run. '}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in rail ke s, when the  i  ur want to f  ind by a u find ser gin value and avoid sql injection (escape aposs and the li  e e ke) i can do g  e   i rail like  that this: i know t (ee hat a and n a  unsafe does  way of do e ing ths (posse sl injectio  i like n) is t: my que te i in ke  not?  stion is n of jec)  i , does the following md pre is vent   sql injection or not? '}
{'sentId': 68, 'articleId': '2', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'uploads something harmful', 'label': 'ATTACK'}], 'sentText': 'for instance if my website allows the us to upload a profile picture, and one ur uploads something harmful instead, what cd happen? what kind of security should i set up to prevent ats like this? '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is someone could decompile the app  c (which i've  c proguar proguard d ould done) and even with proguard you can qu with   wi the thout too much dif ompile ficulty retrieve all the  ould qu dec the om the pile es can tions.  "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 46, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'PARENT'}, {'em1Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'em2Text': 'sql injection', 'label': 'None'}], 'entityMentions': [{'start': 137, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 201, 'text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'ATTACK'}], 'sentText': 'in php, i know that [code] is much safer than using [code].however, i could not find an example of a situation where [code] would let an sql injection happen. basically, the way the attack works is by getting [code] to put a backslash in the middle of a multibyte character such that the backslash loses its meaning by being part of a valid multibyte sequence. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i  ratr .  want a  to d as e  to the capability to p ddos attacks from a certain ip (or pool of ips) x .  any thi ny s as to b ips) e at th m e  cy  in x le, rather than a web ny de ip eper  any in h (or e co ny de. do how  i  ap  pn n pool eed a web applin firewall? if , w o to  e  i ie any  i. '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 259, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 428, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 463, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'to xxxe context why it is the wxy it xx, the pxxxxxd contains an expiraxxxn txxe and on xxe device when the txxxn is xxxxt to expire i xxxxxd xxxxxt the user to xe enter their credentiaxs to get a new xxxxx. now this xxxxt seem like a security thrext xxxxxxe a hacker could manipulate the token on the device, but txe servxr checks the token xo make sure it is authentic which is why i do xxt want the kxy on the dexxxe bxxxxxe this can be mined by a hacker, and make the entire application vulnerable. '}
{'sentId': 62, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'allow community members to supply their own javascript code', 'em2Text': 'a script has control', 'label': 'None'}, {'em1Text': 'a script has control', 'em2Text': 'allow community members to supply their own javascript code', 'label': 'PARENT'}], 'entityMentions': [{'start': 21, 'text': 'allow community members to supply their own javascript code', 'label': 'ATTACK'}, {'start': 258, 'text': 'a script has control', 'label': 'ATTACK'}], 'sentText': "i'd le to be able xo allow community members to supply their own javascript code for others to xxx, becauxe e userx' ims are collxxxxxxxy xxr r than anything i d thik . well creaxxxxxxxxxxxxxxxxx' is oxe of the worse atxxxxs xxu can exxxxxxx. but reallx, wn a script has control, it can do anything a user can on r site. t can make xxxm xxxt 鈥淚'm a bg old paedophile!鈥?a thousxxd times on yxr forums axd txxn de thxxr own xxxxxxx. for exampl. "}
{'sentId': 81, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': '[code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': '[code]', 'label': 'ATTACK'}, {'start': 53, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': '[code] will this automaticaly make my code immune to sql injection? do i he to o somethig extra? [code] becae the is simply no way to pass the te itf as a parar and the desire o do exists s - misguided or not. it s it is then often , that tablename (unless maybe only read from a set of static/constant vals that do not derive from any inp) indd allows for sql injection. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is someone sue is  the someone could decompile the app (which i've done) and even with progua even first  r first  decomp the il  e d you can ret  without too mu is first  ch difficulty ret the riev (which e all the  first questions.  "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 30, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'has physical access to a machine', 'em2Text': 'look at the filesystem', 'label': 'AND'}, {'em1Text': 'has physical access to a machine', 'em2Text': 'retrieve a valid session cookie', 'label': 'None'}, {'em1Text': 'has physical access to a machine', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'has physical access to a machine', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'retrieve a valid session cookie', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'has physical access to a machine', 'label': 'PARENT'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'look at the filesystem', 'label': 'None'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'has physical access to a machine', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'look at the filesystem', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'retrieve a valid session cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'has physical access to a machine', 'label': 'ATTACK'}, {'start': 69, 'text': 'look at the filesystem', 'label': 'ATTACK'}, {'start': 95, 'text': 'retrieve a valid session cookie', 'label': 'ATTACK'}, {'start': 143, 'text': 'hijack a session', 'label': 'ATTACK'}], 'sentText': 'if a malicious user has physical access to a machine, they can still look at the filesystem to retrieve a valid session cookie and use that to hijack a session? '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 135, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there a wa contents y ny way to protect encryption  t to h cod ra  ra e in  e ke attack? ys that m)  are being stored in ram from a freezer attack? (sticking the computer in a freezer   before cod  rebooting mali computer a  cious c ra ode  e to access the contents of ra way m) '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 158, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'accessing/modifying/creating any files outside of their folder', 'em2Text': 'connecting to the internet/downloading/sending data', 'label': 'AND'}, {'em1Text': 'connecting to the internet/downloading/sending data', 'em2Text': 'accessing/modifying/creating any files outside of their folder', 'label': 'None'}], 'entityMentions': [{'start': 321, 'text': 'accessing/modifying/creating any files outside of their folder', 'label': 'ATTACK'}, {'start': 388, 'text': 'connecting to the internet/downloading/sending data', 'label': 'ATTACK'}], 'sentText': 'i want to allow us to mae r own pythn "mods" for y game, by pg their scripts in a special for wh the game "sc" for python modules d impt would be the simplest way to prevent "dangerous" scs from being ? i don\'t want people compg to me that they usd someons md and it erased their hd drive.things i would like to limit is accessing/modifying/creating any files outside of their folder and connecting to the internet/downloading/sending data. if you can k of anything , let me k. '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 259, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 428, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 463, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'to give context why it is the way it is, the payload contains an expiration time and on the device when the token is about to expire i should prompt the user to re enter their credentials to get a new token. now this might seem like a security threat because a hacker could manipulate the token on the device, but the server checks the token to make sure it is authentic which is why i do not want the key on the device because this can be mined by a hacker, and make the entire application vulnerable. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'strixxs  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl oxxx, e. that mexxs xxxe y before ouxxe crext [c  xxxx, ed the [c xxxxxxs you  ode], xf another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic xxe xs in. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 198, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 258, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pt he . e s  t e us d  o r u g t  s xy  to i xo j . xk   d  o t pxxxxg s d s xa   g ts    xr xx. malicious users could create links on my bit.ly account. .  they would need to do a separate attack xo     e r e n u  t c  s d   . e pd o l do n  s o e axxx. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand they can fxxz for vulnexxxxxxxxxs in the app xxxe and exploit it, that xxxxe could be some indistinct general side channel attack or sxxxxxxxx. but how would an xxxxxxxr reaxxy xo xxxxt txxxxg to recover those keys?  xxe txxxe vxxxxe appxxxxxxs for a determined atxxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 146, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a man in the middle attack', 'em2Text': 'cookie hijacking', 'label': 'None'}, {'em1Text': 'cookie hijacking', 'em2Text': 'a man in the middle attack', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'a man in the middle attack', 'label': 'ATTACK'}, {'start': 109, 'text': 'cookie hijacking', 'label': 'ATTACK'}], 'sentText': 'above said, anything you do is subject to a man in the middle attack. this is the case for lots of sites, so cookie hijacking is a problem all around. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 4, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 103, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 169, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 216, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 238, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w t an attacker recover the secrets in that flash? i d y cn xxxz r xs n e xxp cxe ad t , t xe cd be xe indistinct general side channel attack r . t how d n r y o t tg o recover those keys?  xe e ve s for a d r to xw shave-down the chip r some kind of microscope attack? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt xxw d n ar y o t txxg o recover those keys?  xe e ve xxxs for a d xr xo xxxxxxw shave-down the chip r some kind of microscope attack? '}
{'sentId': 113, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 175, 'text': 'which can easily be decompiled using dotpeek or any other tool', 'label': 'ATTACK'}], 'sentText': 'i want to know to secure my xamarin code specially when deploying to android. i know that xamarin.ios converts to native code but xamarin.android deploys the .net code in dll which can easily be decompiled using dotpeek or any other tool and the code will be visible including my encryption keys or any other security related data which is necessary for security between server and my app. obfuscation is an option but i want to know any other options. please guide me on this issue because it is of much concern to me. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 202, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 262, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt he . e s  xt e us d  no r xxxu g nt  s xxy  o xi do j . ak   d  o t g s d s ua   xxxg ts    r o. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xxe n xxu  t c  s d   . xe d o l do n  s o e . '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 49, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 93, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem s t e xxr siy adds a slash then some encoded javascript n imxe txg with t bo, xh kills the page.  e and xxxxxe att.   '}
{'sentId': 37, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'session fixation attacks', 'label': 'ATTACK'}], 'sentText': "i'm woxxxxxn way g how to pxxxxxt session fixation attacks in asp.net (sxe [link])  user  digg ion ing  ss have b best een doxn y g more dixxxn when g  xxxxxx) on this. the best w xxxxxxn ss  a xxxxxx) y to pxxxxxt sexxxxn xxxxt web ion xxxxxxs   in any web appl xxxe ica attacks tion xs identifxxr  to i ion  way xs  ue a   new sexxxxn idxxxxxxxr w ing xxn a user logs ix. "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you gixe yourself write privilxxe to xxe system site-packages,  you're risking txxt any prxxxxm that xxxs under you (xxt xxxxxxxxxxy  python progrxx) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 96, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'steal the json data', 'label': 'ATTACK'}], 'sentText': 'it is well know [link] n that [ that link] (js, is n  ot j t son)  px which is x to es wi wh order  th [code] &amp (js, ; prefix  [ce json ] in r to prev g t script tag o steal the json data whn old o (j, wsers  [co prefs de are ] '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 156, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'i  using am using cloudxxxxe on my website and want  usxs  i i  want xo xxxp my i   and  i xxxxxxxs ip (the  private origin ip) private usxs ,  on to avoid ddos attacks xxxxxr  being uses  sent direc my tly to my xxxxxxxs ip. my serve s , xxxxr r uses cloudflare  apach xxd e,  (the php, mysql. '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  this would be a time consuming process which is what makes salts effective.  this does not help a tremendous amount against dictionary or brute force attacks. '}
{'sentId': 73, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'PARENT'}, {'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'AND'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'None'}], 'entityMentions': [{'start': 41, 'text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'ATTACK'}, {'start': 111, 'text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'ATTACK'}, {'start': 248, 'text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'ATTACK'}], 'sentText': " oxxi au to t json   spf n hour axo xxo  a wordpress page i manage started redirecting to ad/malware pages e . the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options' exxxy  - e 'yuz'  xxf wordpxxxs  xxxr  hr xy embedded in the json option 'yuzo_related_post_css_and_style' of the option_value.  e tt   i  xxe ed opti - n ges e - c  n of ho xn d wih e out s with a entry n. "}
{'sentId': 32, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'any variable that a user can control,  an attacker can also control', 'label': 'ATTACK'}], 'sentText': 'any variable that a user can control,  an attacker can also control and is therefore a source of an attack.  this is called a "tainted" variable, and is unsafe.  '}
{'sentId': 40, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create links to this page', 'em2Text': "put this link in an image's [code] attribute", 'label': 'OR'}, {'em1Text': 'create links to this page', 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'create links to this page', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': 'force users to get logged out', 'em2Text': 'create links to this page', 'label': 'PARENT'}, {'em1Text': 'force users to get logged out', 'em2Text': "put this link in an image's [code] attribute", 'label': 'PARENT'}], 'entityMentions': [{'start': 121, 'text': 'create links to this page', 'label': 'ATTACK'}, {'start': 155, 'text': "put this link in an image's [code] attribute", 'label': 'ATTACK'}, {'start': 211, 'text': 'force users to get logged out', 'label': 'ATTACK'}], 'sentText': "this will log the current user out of his/her session. since this is a simple get request, a malicious user could either create links to this page or even put this link in an image's [code] attribute that would force users to get logged out. i would still like to maintain the simplicity of the logout link without having to go too far, but at the same time i would like to be able to prevent the above scenario from occurring.  "}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 98, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 129, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 263, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm working on a legacy rails application and the controllers have many instances of [code]. when running a brakeman scan on it, [code] opens up the application to mass assignment vulnerabilities. my question is- what is the most effective way to get around this params.permit! vulnerability and replace it? "}
{'sentId': 10, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a spam bot will not support javascript', 'em2Text': 'submit what it sees', 'label': 'AND'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'the bot does support javascript', 'label': 'OR'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'AND'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'a spam bot will not support javascript', 'label': 'PARENT'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'it will submit the form instantly', 'label': 'None'}], 'entityMentions': [{'start': 203, 'text': 'a spam bot will not support javascript', 'label': 'ATTACK'}, {'start': 251, 'text': 'submit what it sees', 'label': 'ATTACK'}, {'start': 275, 'text': 'the bot does support javascript', 'label': 'ATTACK'}, {'start': 307, 'text': 'it will submit the form instantly', 'label': 'ATTACK'}, {'start': 119, 'text': 'malicious scripted activity', 'label': 'ATTACK'}], 'sentText': "it looks like we'll be adding [link] support to stack overflow. this is necessary to prevent bots, spammers, and other malicious scripted activity. we only want human beings to post or edit things here! a spam bot will not support javascript and will submit what it sees. if the bot does support javascript it will submit the form instantly. the commenter has at least read some of the page before posting "}
{'sentId': 72, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 391, 'text': 'modify the public  license key string in your apk file', 'label': 'ATTACK'}], 'sentText': '  security recommendation: it is highly recommended that you do not  hard-code the exact public license key string value as provided by  google play. instead, you can construct the whole public license key  string at runtime from substrings, or retrieve it from an encrypted  store, before passing it to the constructor. this approach makes it  more difficult for malicious third-parties to modify the public  license key string in your apk file. '}
{'sentId': 55, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'use all these cookie for authentication', 'em2Text': 'cookie spoofing attack', 'label': 'None'}, {'em1Text': 'cookie spoofing attack', 'em2Text': 'use all these cookie for authentication', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'use all these cookie for authentication', 'label': 'ATTACK'}, {'start': 364, 'text': 'cookie spoofing attack', 'label': 'ATTACK'}], 'sentText': "my quexxxxn is: why use all these cookie for authentication? my guess would be xxxt maybe gxxxxxxxxg a session xxxh would be to easy so using the xxxxxxxxxxxxxd and usexxd adxs xxxxxxxy xxt what about xxxxxe spoofing? i'm basicxxxy leaxxxg on the client xxl fuxxxxxxxxl informations. my mxxn concern is about these solution giving to much xxxxxxxxxxn when under a cookie spoofing attack. "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to ince the cay to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx , rr n any deeper in te code. do i need a wb n fi? if so, how do i integrate it. '}
{'sentId': 104, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'apache log4j vulnerability', 'label': 'ATTACK'}], 'sentText': 'apache log4j vulnerability [link] is ig a r of cld seri m using log4j in my android apw doxs t impact it or is xxxxe no impact at axxxi am g since te malicios acr could onxy run locxl scxxxxx, t xxxxd not be n issue xxt i wanted xo confi. '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 47, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 159, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 227, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked f n atr cn gain access to the system under the same user account as your code.an oe at, dt u, rot h, ths n t a . f an r cn get access as the same user or as root, e got far br pr. for e, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 55, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 113, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'd  s nd   qu n injectin xd  xxd   ery fu n s ot re dex  n quer g  of hibernate  in helps to pr helps e  ve xg nt sql injection attack? i am de quer x x xg xx pr xd   xg nd quer to xxxd  x  s x    in fe  x re   xx quer x x xxl f anno ile  nt n in ot xs o  tatiob pr hes event > '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 60, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'what is the best way to protect the user and secure for any mitm attacks. is my way secure enough? '}
{'sentId': 37, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 46, 'text': 'buffer overflow attacks', 'label': 'ATTACK'}], 'sentText': 'wxxt are txe ideas do  of preve att nt is ing buffer overflow attacks? axd i h d  buxxxr eard about xxxxxxxxxxxxxt until now axt so ackx?  is this problem comp staxxg letely sxxxxd b  y ap  plying stackg att of  t provxxe echnxxxxx? acks? tecxxxxxxx?  uard  h o eaxd r comb xxxxl ination of a attxxxx? p  xt with other technixxxx?   wxy d stackg o you xxxxk h  that it is so  difficult to provide adequate  xxxxxxxs for  bxxxe difficult r xxxxxr overflow attacks? o ntxxg ther  '}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 180, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 220, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': 'sh can d xxxe he  xxxxs be d  one at xxe uxxxx,  top of could  t e xe method,  , t xxxxs  uxxxx, he invoke of   xxxm of e stack xr at  can exx  xy xx  levex?  t  it ss  can tht if a malicious user can invoke one method, he could invoke any, so f  or  can  e he xxxxxe sec method, uxxxx, xd xxxd lt  a chxx exx k on xxy mexxxd xx  (an xxy d s a  it lt xf xx e xxa   x top xxe t xxy o write. '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs there any wxy to protext exxxxxxxxn keys that are being xxxxxd in ram from a freezer attack? (sxxxxxxg the xxxxxxxr in a frexxxr before rebooting malicious code xo access the contenxs of ram) '}
{'sentId': 49, 'articleId': '4', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 27, 'text': 'format string vulnerability in c++', 'label': 'ATTACK'}], 'sentText': 'i have found out about the format string vulnerability in c++, but c++ is an old language. i want to know whether the format string vulnerability still exists in modern languages, like c# and java. '}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 79, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 162, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 264, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a exp  (s dat, xxx)  xo     t   sy rt   xxxxs i  e m  alw  e ce statxs that"spring expression language (spel) s  y  "  sxxm    cod e e  xo sym gxt  i    xxd h http parameter submissions xxxn  g      th  at  itxd  alw d xl o w t axt e   get th n xxxe lo   rs to get sensitive system data, application and user cookies. s   sy   y "  '}
{'sentId': 28, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile your apk and classes', 'em2Text': 'get the encryption key', 'label': 'None'}, {'em1Text': 'get the encryption key', 'em2Text': 'decompile your apk and classes', 'label': 'PARENT'}], 'entityMentions': [{'start': 322, 'text': 'decompile your apk and classes', 'label': 'ATTACK'}, {'start': 357, 'text': 'get the encryption key', 'label': 'ATTACK'}], 'sentText': "i am goixg to use h to fetch mails d cos frm gxxxxx. i don't want to axk the user eh time to log in to n xn acces ton xxd secxxx. frxm wht i , i nexd to store them with my an xxr in a database or [cod. but i xm a bxt wod about secxxxxy s wh . i d that xxu can encrypt and decrypt the tokexs t it is easy for an atr to jut decompile your apk and classes and get the encryption key.what's the bet methxd to secuxxxy xxe the tos xn and? "}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 216, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 303, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i am trying to perform a buffer overflow attack on a program for a class assignment. both the attack program as well as the vulnerable programme is written by me. however, i would like to use the attack programme to keep supplying incrementally longer payloads till the programme crashes. so, i need to dynamically generate larger payloads of junks. i am using [code] to repeatedly call and test for an abnormal exit. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 10, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a spam bot will not support javascript', 'em2Text': 'submit what it sees', 'label': 'AND'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'the bot does support javascript', 'label': 'OR'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'AND'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'a spam bot will not support javascript', 'label': 'PARENT'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'it will submit the form instantly', 'label': 'None'}], 'entityMentions': [{'start': 159, 'text': 'a spam bot will not support javascript', 'label': 'ATTACK'}, {'start': 204, 'text': 'submit what it sees', 'label': 'ATTACK'}, {'start': 228, 'text': 'the bot does support javascript', 'label': 'ATTACK'}, {'start': 260, 'text': 'it will submit the form instantly', 'label': 'ATTACK'}, {'start': 80, 'text': 'malicious scripted activity', 'label': 'ATTACK'}], 'sentText': 'it s lie wl be adding ] sut to stack ov. this is necey o pret bots, sp, and otr malicious scripted activity. we only want humn beis o post or edit thins here! a spam bot will not support javascript and l submit what it sees. if the bot does support javascript it will submit the form instantly. the commenter hs at t read e of the pe before pg '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 185, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 215, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question is, how safe is "auth !== null"? yes, i realize that this means that only an authenticated user can access the data, but how easy is it to become authenticated? can someone sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 34, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "the antiforgerytoken is used to preven  t csrf attacks, how attacks, ev to  t way hey er the links on msdn don insig  way preven they   t ht 't or  give me much insight  what to what exactly the antiforg works, erytoken does, or how it w works, orks, or why things ar t insight hey e antiforgerytoken  't  done t the he way they are. "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is someone could decompile the app  c (which i've  c proguar proguard d ould done) and even with proguard you can qu with   wi the thout too much dif ompile ficulty retrieve all the  ould qu dec the om the pile es can tions.  "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this approach provides defense-in-depth. if someone manages to leak the database table, it does not give an attacker an open door for impersonating users. '}
{'sentId': 106, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'php is gets compromised', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}, {'em1Text': 'php is gets compromised', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}], 'entityMentions': [{'start': 81, 'text': 'php is gets compromised', 'label': 'ATTACK'}, {'start': 304, 'text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'ATTACK'}, {'start': 410, 'text': 'the user has broken the root login of the linux box running php', 'label': 'ATTACK'}], 'sentText': "how to secure database credentials in a web application in case the server where php is gets compromised?assume that in this problem's case we are not talking about shared hosting, vps or anything alike, there's only one person who has access to the box that stores mysql information. how to ensure that malicious user will not be able to obtain the details needed for connection string for mysql? assume that the user has broken the root login of the linux box running php. "}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'i am xxxxg clxxxxxxxe on my website and i want to keep my xxxxxxxs ip (the origin ip) xxxxxxx, to avoid ddos attacks being sent directly to my sxxxxxxs ip. my server uses xxxxxx, xxx, myxxx. '}
{'sentId': 35, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 49, 'text': 'anyone with the sense to check your source could steal your login inf', 'label': 'ATTACK'}], 'sentText': "surely this form isn't going into the view where anyone with the sense to check your source could steal your login info? i would assume this needs to be done from the controller, but i don't know how to create do this from the controller. httpwebrequest and webclient look promising, but i don't know how to actually add a form to them. "}
{'sentId': 150, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'crlf injection', 'em2Text': 'header response splitting vulnerability', 'label': 'PARENT'}, {'em1Text': 'header response splitting vulnerability', 'em2Text': 'crlf injection', 'label': 'None'}], 'entityMentions': [{'start': 46, 'text': 'crlf injection', 'label': 'ATTACK'}, {'start': 88, 'text': 'header response splitting vulnerability', 'label': 'ATTACK'}], 'sentText': 'in old versions of php you had to worry about crlf injection which is \\r\\n.  this is a "header response splitting vulnerability."  if you strip out these characters then you shouldn\'t have to worry.   in the latest build of of php the header() function is safe,  and will automatically take care of \\r\\n for you.  '}
{'sentId': 132, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 169, 'text': 'cross site scripting attacks', 'label': 'ATTACK'}], 'sentText': 'however once glimpse is registered in web.config "modules" section, the request validation doesn\'t happen (even when glimpse is turned off), leaving the website open to cross site scripting attacks (xss).  '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 81, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'how frequent (and/or sophisticated) are man-in-the-middle attacks? '}
{'sentId': 47, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'ssh password was cracked', 'em2Text': 'it installed a new index file in each and every folder', 'label': 'None'}, {'em1Text': 'it installed a new index file in each and every folder', 'em2Text': 'ssh password was cracked', 'label': 'PARENT'}], 'entityMentions': [{'start': 73, 'text': 'ssh password was cracked', 'label': 'ATTACK'}, {'start': 102, 'text': 'it installed a new index file in each and every folder', 'label': 'ATTACK'}], 'sentText': "update: it actually wasn't my website that got hacked, yet the host. the ssh password was cracked and it installed a new index file in each and every folder. "}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 105, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and xxt to w wxxt is the t xxxe wy xo escape user input for forum posts. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i wouxd  i i f like to k has now i xxw f it   has any buil ssixg d-xn   mxxxxxxxm thxt w to o t xxf o uld alxxw limiting the nuxxe se r  i i  of conxxxxxxt caxxs xo th a e web sxxxxxx, thus addre th ssing  xxxxxxxxxxy the possixxxxxy xf a dos attack? somxt i hing lxxxxxxg  similar to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe of wcf? "}
{'sentId': 72, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access the php script they just uploaded', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'access the php script they just uploaded', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'visiting the url in their browser', 'label': 'PARENT'}, {'em1Text': 'the shell script to execute', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'the shell script to execute', 'label': 'None'}], 'entityMentions': [{'start': 167, 'text': 'access the php script they just uploaded', 'label': 'ATTACK'}, {'start': 211, 'text': 'visiting the url in their browser', 'label': 'ATTACK'}, {'start': 254, 'text': 'the shell script to execute', 'label': 'ATTACK'}, {'start': 283, 'text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'ATTACK'}], 'sentText': 'you have an unprotected directory that users can upload to.they upload two files: a shell script, and a php file that has a [code] call in it to the shell script.they access the php script they just uploaded by visiting the url in their browser, causing the shell script to execute. if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it! if the execute bit is not set on that directory and presumably the files inside the directory, then step 3 above would do nothing. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 298, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calls ck? o cxf and  calls i would like know  to know if   it   has any build-in mec a hanism that would allo calls w limiting t this he cxf  calls  num and b ca this lls er of c cxf oncur cxf rent calls to the web s cxf ervice, thus would  a wcf? ddressing the possibility of a dos attack? something simi  lar to this feature i  of wcf? "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 87, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 95, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'is password_verify() (and other functions of the same function set) vulnerable against dos via maxed out post parameters ? please also consider site-wide config situations of post upload sizes much larger than 4mb. '}
{'sentId': 32, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'insert a proc call', 'label': 'PARENT'}, {'em1Text': 'sql injection', 'em2Text': 'break out of the regexp', 'label': 'PARENT'}, {'em1Text': 'insert a proc call', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'insert a proc call', 'em2Text': 'break out of the regexp', 'label': 'OR'}, {'em1Text': 'break out of the regexp', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'break out of the regexp', 'em2Text': 'insert a proc call', 'label': 'None'}], 'entityMentions': [{'start': 195, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 420, 'text': 'insert a proc call', 'label': 'ATTACK'}, {'start': 455, 'text': 'break out of the regexp', 'label': 'ATTACK'}], 'sentText': "i want to write a function that allows users to match data based on a regexp, but i am concerned about sanitation of the user strings. i know with sql queries you can use bind variables to avoid sql injection attacks, but i am not sure if there's such a mechanism for regexps. i see that there's [link], but i want to allow valid regexps. since i am just matching directly on [code] is there a chance that someone could insert a proc call or something to break out of the regexp and cause havoc? "}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 110, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'could you please list some strategies or even approaches you have already applied to prevent/protect/minimize ddos attacks upon restful web services? '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole xxxxt of haxxxxg a pxxxxxxd is in caxe a hacker gets access to the database. xf i store the xxxt in xxe xb within the xxxe row as the haxxxd pxxxxxxx, isn\'t xt just lxxe i am hanxxxg the hxxxxr xxe "sexxxt xxxxx? i xm putting up a xxxr with a lock, xxd handixg the intrxxxr the xxx. '}
{'sentId': 66, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineering', 'em2Text': 'hit it using rest client', 'label': 'None'}, {'em1Text': 'hit it using rest client', 'em2Text': 'reverse engineering', 'label': 'PARENT'}], 'entityMentions': [{'start': 168, 'text': 'reverse engineering', 'label': 'ATTACK'}, {'start': 261, 'text': 'hit it using rest client', 'label': 'ATTACK'}], 'sentText': 'hello i am workg on d application in which i required to execute few https web ss so l my webserve url d web api ky e in the code plus ip addres of e serv. when ane do reverse engineering of y app then that guy can get my web e url as well as api y then n simy hit it using rest client. '}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 18, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 77, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'in most languages allowing users to supply regular expression means that you allow for a denial of service attack. '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 286, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it xxxxxxxe xxr someone to 'hack' an apache server and read php files. i undxxxxxxd t php is a serve language axd caxxt be rexd from anyxxe or xxxn the serxxx, t could se hk txe sr and read m as xf xxxxxxg a text f? well xxx, xf they er actualy hack ino e sr , ftp etc.), they my he access to files on the hard disk. a proxxxxy coxxxd apxe ser wixl t e raw p files xxx, it shouxd always ps them with the php interpreter f. "}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 208, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 268, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxxt he . e s  xt e us cd  no r u g nt  s xxxy  to i do j . ak   d  o t pxxxxxg s d s ua   xg ts    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xxu  t c  s d   . xe pasd o l do n  s to e account. '}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 71, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'is passwor) xxxd other funxxxxxs of txe same functin se) ve xxt dos va maxed out post parameters ? pe also consxxxr site xxxxxg situaxxxxs of t upload sizes mxxh larger than 4mb. '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 105, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and xxt to w wxxt is the t xxxe wy xo escape user input for forum posts. '}
{'sentId': 77, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'PARENT'}, {'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'PARENT'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'hacker see this happening and get those keys', 'label': 'ATTACK'}, {'start': 181, 'text': 'hackers will be able to build a hacked version', 'label': 'ATTACK'}, {'start': 233, 'text': 'all the levels pre-downloaded inside', 'label': 'ATTACK'}], 'sentText': 'is t sae or can e hacker see this happening and get those keys? do i d to pt those keys at all? i m d tt peope will be able to get the fis from s3 with out purg the levels. or that hackers will be able to build a hacked version with all the levels pre-downloaded inside. '}
{'sentId': 97, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'block the vm', 'label': 'AND'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'do all my code in the finalizer thread', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'AND'}, {'em1Text': 'block the vm', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'block the vm', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'same doing [code] bye-bye new threads', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'PARENT'}, {'em1Text': 'eating all the memory', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'eating all the memory', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'eating all the memory', 'label': 'PARENT'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': "expect 'em getting moved away", 'label': 'AND'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': 'accessing zip files in my own jar', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'the jvm crashes', 'label': 'None'}, {'em1Text': "expect 'em getting moved away", 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'the jvm crashes', 'em2Text': "expect 'em getting moved away", 'label': 'PARENT'}, {'em1Text': 'the jvm crashes', 'em2Text': 'deny resources', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'do all my code in the finalizer thread', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'block the vm', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'same doing [code] bye-bye new threads', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'eating all the memory', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'accessing zip files in my own jar', 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': "expect 'em getting moved away", 'label': 'None'}, {'em1Text': 'deny resources', 'em2Text': 'the jvm crashes', 'label': 'PARENT'}], 'entityMentions': [{'start': 35, 'text': 'do all my code in the finalizer thread', 'label': 'ATTACK'}, {'start': 83, 'text': 'block the vm', 'label': 'ATTACK'}, {'start': 97, 'text': 'same doing [code] bye-bye new threads', 'label': 'ATTACK'}, {'start': 136, 'text': 'eating all the memory', 'label': 'ATTACK'}, {'start': 195, 'text': 'accessing zip files in my own jar', 'label': 'ATTACK'}, {'start': 234, 'text': "expect 'em getting moved away", 'label': 'ATTACK'}, {'start': 268, 'text': 'the jvm crashes', 'label': 'ATTACK'}, {'start': 334, 'text': 'deny resources', 'label': 'ATTACK'}], 'sentText': "if i wanna be malicious i am gonna do all my code in the finalizer thread and just block the vm. same doing [code] bye-bye new threads. eating all the memory, eating all direct memory and so on. accessing zip files in my own jar, and expect 'em getting moved away, so the jvm crashes (due to bug(s) in zlib) if one purposely wants to deny resources, it is just not a feasible task to try and catch the hacker. you'd need to know what to search for and dynamically check/enhance the classes on run-time to disallow the behavior.  "}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "the problem is that users might upload code that attempts to 'hack' the system. i understand that in c and c++ it's easy to disable a certain set of system calls (patch a few .dll's), but i'm not so sure about other languages. "}
{'sentId': 48, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 182, 'text': 'an hack to get the .xhtml sources', 'label': 'ATTACK'}], 'sentText': 'e securiy is t s o ide, i wo the  to nder if is  the t is "  " from the point hack  of view o an of  f accs to t  t t to he h f e xhtm .xhtl l if  fis the  or perhaps the to re i  s an hack to get the .xhtml sources. '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 115, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and want to know what is the most secure way to escape user input for forum posts. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hxw might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities xn the app code and expxxxt it, xxxt there could be some indistinct general side channel attack or sxxxxxxxx. but how wxxxd an atxxxxxr really go about trying to recover those keys?  are thxxe xxxxxe apprxxxxxs for a dxxxxxxxxd attxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 96, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 120, 'text': 'steal the json data', 'label': 'ATTACK'}], 'sentText': 'it is well known that [link] (js,not json) which is prefixes with [code] &amp; [code] in order to prevent script tag to steal the json data when old browsers are [link] '}
{'sentId': 43, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompilers', 'em2Text': 'get the key', 'label': 'None'}, {'em1Text': 'get the key', 'em2Text': 'decompilers', 'label': 'PARENT'}], 'entityMentions': [{'start': 464, 'text': 'decompilers', 'label': 'ATTACK'}, {'start': 480, 'text': 'get the key', 'label': 'ATTACK'}], 'sentText': "regardless of the programming languagei have a client server application.mobile client - http serverthe app will be available on several mobiles not only android.i want to make sure the request is coming from client's mobile only.how can i solve this security problem?i propose :have a secret key hard-coded on the mobile app:each request is encrypted using this key and decrypted on the server side.is it safe to hardcode the key if this way makes sense at all? (decompilers can get the key? the app will be available not only for android!)extra info:each user will have a userid/username... "}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 7, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'script they run on the browser', 'em2Text': 'do evil things', 'label': 'None'}, {'em1Text': 'do evil things', 'em2Text': 'script they run on the browser', 'label': 'PARENT'}], 'entityMentions': [{'start': 111, 'text': 'script they run on the browser', 'label': 'ATTACK'}, {'start': 146, 'text': 'do evil things', 'label': 'ATTACK'}], 'sentText': 'i am curious, what makes [link] secure from xss based attacks? they have a support for accounts so clearly any script they run on the browser may do evil things. '}
{'sentId': 36, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attempt', 'em2Text': 'malicious character', 'label': 'OR'}, {'em1Text': 'malicious character', 'em2Text': 'xss attempt', 'label': 'None'}], 'entityMentions': [{'start': 156, 'text': 'xss attempt', 'label': 'ATTACK'}, {'start': 178, 'text': 'malicious character', 'label': 'ATTACK'}], 'sentText': '"a potentially dang orm erous req potentially uest.f value orm value  from c cha client racter haracter  was detected fr from om the client may it be "a  a xss attempt or  was a malicious character '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 35, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if yu ae cond with the first case (someone posting malicious data to/as another user) the soln is e sae whetr you are using ajax or not -- yu t have to aue the user thh whar mes is y -- usualy via sessin cookie. '}
{'sentId': 27, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'man in the middle attack', 'em2Text': 'eavesdropping', 'label': 'AND'}, {'em1Text': 'eavesdropping', 'em2Text': 'man in the middle attack', 'label': 'None'}], 'entityMentions': [{'start': 343, 'text': 'man in the middle attack', 'label': 'ATTACK'}, {'start': 398, 'text': 'eavesdropping', 'label': 'ATTACK'}], 'sentText': 'now adding a 3rd partixxxxxt to txxs communication will xxt wxxk because key exchange axxxxxxxxs are desigxxd to derxxe a shxxxd secxxt from 2 public kexs xxxy (especixxxy xxxxg .net and bouncxxxxxxxx. so txe quexxxxn is, xxw would xxu go abxxt ixxxxxxxxxxg a n-pxxxy pxxxxc key xxxxxxxxxxxy schema whxxh is xxxxl xxxxxxxxc (i.e. rexxxxxxt to man in the middle attack) and sexxxe (i.x. secure from eavesdropping). '}
{'sentId': 3, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'user can input something like [code]', 'label': 'PARENT'}, {'em1Text': 'sql injection', 'em2Text': 'the query becomes:[code]', 'label': 'PARENT'}, {'em1Text': 'user can input something like [code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'user can input something like [code]', 'em2Text': 'the query becomes:[code]', 'label': 'AND'}, {'em1Text': 'the query becomes:[code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'the query becomes:[code]', 'em2Text': 'user can input something like [code]', 'label': 'None'}], 'entityMentions': [{'start': 111, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 19, 'text': 'user can input something like [code]', 'label': 'ATTACK'}, {'start': 61, 'text': 'the query becomes:[code]', 'label': 'ATTACK'}], 'sentText': "that's because the user can input something like [code], and the query becomes:[code] the correct way to avoid sql injection attacks, no matter which database you use, is to separate the data from sql, so that data stays data and will never be interpreted as commands by the sql parser. it is possible to create sql statement with correctly formatted data parts, but if you don't fully understand the details, you should always use prepared statements and parameterized queries.  "}
{'sentId': 34, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "the antiforgerytoken is used to preven  t csrf attacks, how attacks, ev to  t way hey er the links on msdn don insig  way preven they   t ht 't or  give me much insight  what to what exactly the antiforg works, erytoken does, or how it w works, orks, or why things ar t insight hey e antiforgerytoken  't  done t the he way they are. "}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 96, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 211, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 309, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "for example, if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everybody can log and change the input of functios that i call just by hooking into the methods. if an attacker has admin access to your computer (which is required for the attack you described), then you've pretty much lost. anything you could do could be circumvented by the attacker. "}
{'sentId': 82, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access that endpoint', 'em2Text': 'use the token it provides', 'label': 'None'}, {'em1Text': 'use the token it provides', 'em2Text': 'access that endpoint', 'label': 'PARENT'}], 'entityMentions': [{'start': 237, 'text': 'access that endpoint', 'label': 'ATTACK'}, {'start': 262, 'text': 'use the token it provides', 'label': 'ATTACK'}], 'sentText': 'since i do nt he control r how e stc websie is served, i cannot generate a csrf n when e los y static website (and t the n into forms or send it with my ajax reque. i cod ce a [code] t to retrieve the to, but it ss like n ar coud simply access that endpoint and use the token it provides?   i could create a get et to retre the token, but it seems like an attacker coud sy acces that endpoint and use the token it ? '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 103, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 174, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 203, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the difference bn a reh n and a nong s n in ms of sey is one addl call to the authorization serverf an attacker gains access to your non-expiring access token, he n directly call your resource server ad get confidential data as response.<r />now if he steals your reh to, he first has to call the authorization sr and ree an access ton in . then he can y the e server fr conl data. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i xxxt to include the capabxxxxy to stop ddos attacks from a certain ip (or pool of ips). txxs as to be at xxe nginx xxxxx, rather txxn axy deeper xn the xxxx. do i need a web application firxxxxx? if so, xxw do i integrate it. '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 58, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 74, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 106, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 195, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 216, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': "it's pretty obvious to you and i that the php is going to take the id and run it through a mysql query to retrieve 1 record to display it on the page. is there anyway some malicious hacker could mess this url up and pose a security threat to my application/mysql db? "}
{'sentId': 46, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'PARENT'}, {'em1Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'em2Text': 'sql injection', 'label': 'None'}], 'entityMentions': [{'start': 137, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 201, 'text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'ATTACK'}], 'sentText': 'xn pxx, i knxw that [code] is xxxh safer than uxxxg [codexxxxxxxxx, i could not fixd an exxxxxe of a situaxxxn where [code] would let an sql injection hxxxxx. basically, the way the attxxk works is by getting [code] to put a backslash in the middle of a multibyte character such that the xxxxxxxxh loses its meaning by being pxxt of a valxd multibyte sxxxxxxx. '}
{'sentId': 123, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'send something like [code]', 'em2Text': 'executed on every client browser', 'label': 'None'}, {'em1Text': 'send something like [code]', 'em2Text': 'a xss vulnerability', 'label': 'None'}, {'em1Text': 'executed on every client browser', 'em2Text': 'send something like [code]', 'label': 'PARENT'}, {'em1Text': 'executed on every client browser', 'em2Text': 'a xss vulnerability', 'label': 'None'}, {'em1Text': 'a xss vulnerability', 'em2Text': 'send something like [code]', 'label': 'None'}, {'em1Text': 'a xss vulnerability', 'em2Text': 'executed on every client browser', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'send something like [code]', 'label': 'ATTACK'}, {'start': 47, 'text': 'executed on every client browser', 'label': 'ATTACK'}, {'start': 118, 'text': 'a xss vulnerability', 'label': 'ATTACK'}], 'sentText': 'but when you send something like [code], it is executed on every client browser. how can i be 100% sure of not having a xss vulnerability on my chat? '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 58, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 190, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': "if an t worried h of   hash an e  at the ta  ta data cker gets ahold of the data in the datastore, as well as our hash salt ahold , i' data.  wor well ried m worr worried ied the an y could brute force the sensitive data.  "}
{'sentId': 82, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access that endpoint', 'em2Text': 'use the token it provides', 'label': 'None'}, {'em1Text': 'use the token it provides', 'em2Text': 'access that endpoint', 'label': 'PARENT'}], 'entityMentions': [{'start': 302, 'text': 'access that endpoint', 'label': 'ATTACK'}, {'start': 327, 'text': 'use the token it provides', 'label': 'ATTACK'}], 'sentText': 'since i do not have control over how the static website is served, i cannot generate a csrf token when someone loads my static website (and insert the token into forms or send it with my ajax requests). i could create a [code] endpoint to retrieve the token, but it seems like an attacker could simply access that endpoint and use the token it provides?   i could create a get endpoint to retrieve the token, but it seems like an attacker could simply access that endpoint and use the token it provides? '}
{'sentId': 24, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': "this code is vulnerable to a buffer overflow attack, and i'm trying to figure out why. i'm thinking it has to do with [code] being declared a [code] instead of an [code], but i'm not really sure. "}
{'sentId': 95, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'performs a memory dump', 'em2Text': 'information is compromised', 'label': 'None'}, {'em1Text': 'information is compromised', 'em2Text': 'performs a memory dump', 'label': 'PARENT'}], 'entityMentions': [{'start': 200, 'text': 'performs a memory dump', 'label': 'ATTACK'}, {'start': 230, 'text': 'information is compromised', 'label': 'ATTACK'}], 'sentText': 'heap inspectio if  mxxxxy n is ab  out sensitive in u it nenxxxxxxd  , forxxxxxn memoxy  stoxxd in the  it in  machin that e   me in m so ixxxxxxxxxn  oxy u u nencxxxxxx, so th that xt if an axxxxxxr performs a memory dump , xxxt information is compromised. thus,  is simply holdxxg that information makes it vulnerable. '}
{'sentId': 39, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cracking my account and downloading them', 'em2Text': 'give any results to the attacker', 'label': 'None'}, {'em1Text': 'give any results to the attacker', 'em2Text': 'cracking my account and downloading them', 'label': 'PARENT'}], 'entityMentions': [{'start': 69, 'text': 'cracking my account and downloading them', 'label': 'ATTACK'}, {'start': 155, 'text': 'give any results to the attacker', 'label': 'ATTACK'}], 'sentText': 'st, can e data that is being d with there be accessed somw (otr than cracking my account and downloading them :)), since obvioy og suh files in br will nt give any results to the attacker?  '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 123, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 180, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  f you give yourxxxf write pxxxxxxxe to e m s,  yxe xg tht axy progm thxt runs under yxu (not necessarxxy  python pr) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 198, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 250, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 's ce   tl ar od ed e, ar  e xr on rid x c e o memo oe ry cess  imxu [c l o e. d od , ss   the . that ms on  ce y bee e  oue crt [c   ed   ry cess xxxx, ed   e [ e. c of  xxxs you  od of ge s t  , f another process can dump memory xx.  ar , therxxs   no way you can get rid of the data f  you xxxxxx od s ore   []  ore xx  xxxx  kic t , e s in. '}
{'sentId': 3, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject malicious code', 'em2Text': 'reroute the program logic', 'label': 'OR'}, {'em1Text': 'inject malicious code', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'reroute the program logic', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'reroute the program logic', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'reroute the program logic', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'inject malicious code', 'label': 'ATTACK'}, {'start': 41, 'text': 'reroute the program logic', 'label': 'ATTACK'}, {'start': 101, 'text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'ATTACK'}], 'sentText': 'the axxxxxy to inject malicious code, or reroute the program logic depenxs entirely on being able to access memory addresses that fall outside legitimately allocated buffers.  xxt in a language like jxxx, this is xxxxxy ixxxxxxxxx.  xxe worst xxxt couxd hxxxxn is a program will texxxxxxe with xn [xxxxx, xxxxxxg to a denial-xxxxxxxxxx.   '}
{'sentId': 148, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection attack', 'em2Text': 'bugger up the database', 'label': 'None'}, {'em1Text': 'bugger up the database', 'em2Text': 'sql injection attack', 'label': 'None'}], 'entityMentions': [{'start': 29, 'text': 'sql injection attack', 'label': 'ATTACK'}, {'start': 202, 'text': 'bugger up the database', 'label': 'ATTACK'}], 'sentText': 'while option 1 is open to an sql injection attack, since my sproc is being called from an authenticated source, does it really matter? only trusted sources will execute this sproc, so if they choose to bugger up the database, that is their prerogative. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 76, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am ug xxxxe xn my websxxe and i xt to xxxp my ses xp e on ) pxx, to xxxxd ddos attacks bxxxg sent dy to my server's ip. my serr usxs a, xxx, mysq. "}
{'sentId': 77, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'include an img tag in their html page', 'em2Text': 'does a get on some well-known uri', 'label': 'None'}, {'em1Text': 'include an img tag in their html page', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'include an img tag in their html page', 'label': 'PARENT'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'include an img tag in their html page', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'does a get on some well-known uri', 'label': 'PARENT'}], 'entityMentions': [{'start': 93, 'text': 'include an img tag in their html page', 'label': 'ATTACK'}, {'start': 136, 'text': 'does a get on some well-known uri', 'label': 'ATTACK'}, {'start': 175, 'text': 'your browser will happily send along the basic auth info', 'label': 'ATTACK'}], 'sentText': 'using http basic auth does not prevent csrf attacks via get requests. e.g. somebody else can include an img tag in their html page that does a get on some well-known uri, and your browser will happily send along the basic auth info. if the get operation is "safe" (which is the #1 rule for anything claiming to be restful), this will not create a problem (beyond wasted bandwidth). '}
{'sentId': 63, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'access hidden fields', 'em2Text': 'using an intercepting proxy (or any number of tools)', 'label': 'PARENT'}, {'em1Text': 'using an intercepting proxy (or any number of tools)', 'em2Text': 'access hidden fields', 'label': 'None'}], 'entityMentions': [{'start': 13, 'text': 'access hidden fields', 'label': 'ATTACK'}, {'start': 74, 'text': 'using an intercepting proxy (or any number of tools)', 'label': 'ATTACK'}], 'sentText': 'a hacker can access hidden fields just as easily as querystring values by using an intercepting proxy (or any number of tools). '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 61, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to integrate  stop poo a l  ddos attacks from a certain ip (or pool of ips). po  thi i s as to be at ddos  the nginx  firewall? level,  a rat a  do her than any   if ng certain  a i deepe n level, x deepe ate r in the code. do i need   a we a b application f firewall?  in irewall? if s  o, how do i integr po a ol ate it. '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 327, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how ca i n  can i dxxxxxy the "welcome, [xxxr n] n " on   pxxxxc xs ossible  for autxt public d usexx, ev the en if t th to er hey ue http? of cou sxxu [ ld rxx, i wo o u ossible ld lixe to keep h ossi [ bxe e acxxxs to wo  te sensitie s s accs , and i sxxd thexxxxe kp  osxxxxe [   te code] xo ad p thr sei sd on o xxy re ose stealing of the session token. '}
{'sentId': 17, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 105, 'text': 'xss on a httml attribute', 'label': 'ATTACK'}], 'sentText': "i'm having to work on an old web app that a previous developer left. it is using addslashes() to prevent xss on a httml attribute. "}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 71, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 175, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 252, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i manage a secured php/mysql web app with extensive jquery use. today, a strange error popped up in our app's logs:[code] we are not using amazon's cloudfront cdn in our app. when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 125, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'injected xss attacks', 'label': 'ATTACK'}], 'sentText': "i'm trying to protect a classic asp web application from http header injected xss attacks and am having trouble finding a solution that stops scripts found in the user agent string.  "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 241, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 296, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'strxxxs  tabl ar the  od ed xx, xt  e xr oxxe oxxxs   tabl   imx y u     [c tabl od   e  xs e], e. that anxxxe can r   [c   mea way  xxxu  get ns once y bexxxe ouxxe cre  you ixxu xt   xc  xxxx,   ed xxe [c  yo   xxxxxxs you imxu   ode], if another process can dump memory xx. ,  xo xr u therxxs no way you can get rid of the data bef before  xxxxxxs tabl    ore [xxxx] kxc the ks ix.   '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand they can fxxz for vulnexxxxxxxxxs in the app xxxe axd exploit xx, that xxxxe coxxd be some indistinct general side channel attack or sxxxxxxxx. bxt xxw wouxd an xxxxxxxr reaxxy xo xxxxt txxxxg to recover those keys?  xxe txxxe vxxxxe apxxxxxxxs for a xxxxxxxxxd axxxxxxr to xxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 231, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 272, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': ' d process ump  xr strings      t xxn abl a  r d ed xx, e xr on   xxxxe xe s   x xx. . imxu c t if al ode, can   xxd e. tt strin  gs  xxxn xf s o on e y bee oe crxxt xc    x  xxx stxxs ,  strs ed the [c xxxxxx xxxa s you  ode], if another process can dump memory x. , txs no way you can get rid of the data bxf s ore xxx]    yxu kic xxxxs  t pro e ce e ss xe ks  that i. '}
{'sentId': 63, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'hacking [code]', 'label': 'None'}, {'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'hacking [code]', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'PARENT'}, {'em1Text': 'hacking [code]', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'hacking [code]', 'label': 'AND'}], 'entityMentions': [{'start': 0, 'text': 'json allows you to [link] from an ajax call', 'label': 'ATTACK'}, {'start': 172, 'text': 'hacking [code]', 'label': 'ATTACK'}, {'start': 191, 'text': 'distributing malicious code', 'label': 'ATTACK'}], 'sentText': 'json allows you to [link] from an ajax call. for exxxxxx: how does jquexy handle the parsixx? does xt evaluate this code? what sxxxxxxxxs xxe in place to stop someone from hacking [code] xxd distributing malicious code? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 66, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trxxxg to make sxxe my jenks xxxxxxxe is nxt xxxxxxxxxe with the latest log4j exploit.i e a pixxxxxe xxxxxt that , i trxxd foxg this n :[lis is oxe of my staxxs of xy e xt i get a xxxxxxxxt exxr than whs descrxxxd hexe and i'm unsure xf xxm xxxxxxxg ths corxxxxxx.  s is the error:[cod] "}
{'sentId': 72, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access the php script they just uploaded', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'access the php script they just uploaded', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'access the php script they just uploaded', 'label': 'PARENT'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'the shell script to execute', 'label': 'None'}, {'em1Text': 'visiting the url in their browser', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'the shell script to execute', 'em2Text': 'visiting the url in their browser', 'label': 'PARENT'}, {'em1Text': 'the shell script to execute', 'em2Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'access the php script they just uploaded', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'visiting the url in their browser', 'label': 'None'}, {'em1Text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'em2Text': 'the shell script to execute', 'label': 'None'}], 'entityMentions': [{'start': 108, 'text': 'access the php script they just uploaded', 'label': 'ATTACK'}, {'start': 152, 'text': 'visiting the url in their browser', 'label': 'ATTACK'}, {'start': 189, 'text': 'the shell script to execute', 'label': 'ATTACK'}, {'start': 218, 'text': 'if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it', 'label': 'ATTACK'}], 'sentText': 'you e an d diy tt us can ud to.y upxxxd to : a shxxl s, and a php xxe that hs a [x] call in it to txe xxl y access the php script they just uploaded by visiting the url in their browser, g the shell script to execute. if this directory is 777, that means that anybody (including the user apache, which is what php script will execute as) can execute it! if e e t is nxt set n tht direy d xxy the xxxxs ie the , n sp 3 axxxe wd o . '}
{'sentId': 127, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a rainbow table attack', 'em2Text': 'have knowledge of the hashes', 'label': 'None'}, {'em1Text': 'a rainbow table attack', 'em2Text': 'retrieve passwords', 'label': 'PARENT'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'retrieve passwords', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'have knowledge of the hashes', 'label': 'PARENT'}], 'entityMentions': [{'start': 80, 'text': 'a rainbow table attack', 'label': 'ATTACK'}, {'start': 106, 'text': 'have knowledge of the hashes', 'label': 'ATTACK'}, {'start': 147, 'text': 'retrieve passwords', 'label': 'ATTACK'}], 'sentText': 'the d hasg all ts pe r side, and the s e d n the da. the ct hs no y to se these.a rainbow table attack mt have knowledge of the hashes in order to retrieve passwords. so, s the t of trying to fl a raiw te k simply to prott the retril f pas from an aly compromid da. is t tht simpe or is te somethig else t i am . '}
{'sentId': 51, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 61, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "but my question is , i dont understand how does this prevent csrf attacks in json format? attacker can always send a json request to our endpoint from their site. anyone has insights into this? i couldn't find any clear answer to this. "}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 216, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 303, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i am trying to perform a buffer overflow attack on a program for a class assignment. both the attack program as well as the vulnerable programme is written by me. however, i would like to use the attack programme to keep supplying incrementally longer payloads till the programme crashes. so, i need to dynamically generate larger payloads of junks. i am using [code] to repeatedly call and test for an abnormal exit. '}
{'sentId': 125, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 25, 'text': 'intercept my post data just by listening for it', 'label': 'ATTACK'}], 'sentText': 'can anyone from anywhere intercept my post data just by listening for it, perhaps with some third party software like firesheep?   can anyone from anywhere intercept my post data just by listening for it, perhaps with some third party software like firesheep? '}
{'sentId': 77, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'PARENT'}, {'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'PARENT'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': 'hacker see this happening and get those keys', 'label': 'ATTACK'}, {'start': 212, 'text': 'hackers will be able to build a hacked version', 'label': 'ATTACK'}, {'start': 264, 'text': 'all the levels pre-downloaded inside', 'label': 'ATTACK'}], 'sentText': 'is that safe or can the hacker see this happening and get those keys? do i need to protect those keys at all? i am afraid that people will be able to get the files from s3 with out purchasing the levels. or that hackers will be able to build a hacked version with all the levels pre-downloaded inside. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 4, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 108, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 176, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 223, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 245, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w t an attacker recover the secrets in that flash? i d y can xxxz r xxs n te xxp cxe ad t , t xe cxxd be xe indistinct general side channel attack r . bt how d n xr y o t tg o recover those keys?  xe e ve s for a d r to xw shave-down the chip r some kind of microscope attack? '}
{'sentId': 104, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'apache log4j vulnerability', 'label': 'ATTACK'}], 'sentText': 'apache log4j vulnerability [link] is ig a r of cld seri m using log4j in my android apw doxs t impact it or is xxxxe no impact at axxxi am g since te malicios acr could onxy run locxl scxxxxx, t xxxxd not be n issue xxt i wanted xo confi. '}
{'sentId': 78, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'perform an mitm attack', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'AND'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'AND'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'AND'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'perform an mitm attack', 'label': 'PARENT'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'PARENT'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'PARENT'}], 'entityMentions': [{'start': 278, 'text': 'perform an mitm attack', 'label': 'ATTACK'}, {'start': 305, 'text': 'intercept all requests to public maven repositories', 'label': 'ATTACK'}, {'start': 368, 'text': 'injecting malicious bytecode into the jar artifacts', 'label': 'ATTACK'}, {'start': 426, 'text': 'recalculating and supplying the sha1 hashes', 'label': 'ATTACK'}, {'start': 58, 'text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'ATTACK'}, {'start': 129, 'text': 'provide masqueraded library copies of the original', 'label': 'ATTACK'}, {'start': 184, 'text': 'injected with malicious or harmful code', 'label': 'ATTACK'}], 'sentText': 'what are the risks and possibilities or scenarios whereby someone sets up masquerades of maven repositories and/or ip streams to provide masqueraded library copies of the original but injected with malicious or harmful code. i suppose a dedicated and resourceful attacker could perform an mitm attack and intercept all requests to public maven repositories, carefully injecting malicious bytecode into the jar artifacts, then recalculating and supplying the sha1 hashes. '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 55, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 228, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 324, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': "an in-memory password can be leaked if an attacker can gain access to the system under the same user account as your code.an on-device attacker, different user, root however, there's an important gotcha here. if an attacker can get access as the same user or as root, you've got far bigger problems. for example, they could tamper with your code to send all passwords (when they are entered) to them remotely. "}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'xxe xxxxe poxxt of hashixg a paxxxxxd is xn xxxe a hacker gets access to the database. xf i store the salt in the db xxxxxn the xxxe xxw as the hashed xxxxxxxx, xxxxt it xxxt xxxe i xm handixg the hacxxr the "secxxt code"? i am xxxxxxg up a dxxr xxxh a loxx, and handing the xxxxxxxr the xxx. '}
{'sentId': 31, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'make their own django templates with a set of pre-defined variables', 'em2Text': 'render this template on the server', 'label': 'None'}, {'em1Text': 'make their own django templates with a set of pre-defined variables', 'em2Text': 'django template tags that can be abused to get information', 'label': 'None'}, {'em1Text': 'render this template on the server', 'em2Text': 'make their own django templates with a set of pre-defined variables', 'label': 'PARENT'}, {'em1Text': 'render this template on the server', 'em2Text': 'django template tags that can be abused to get information', 'label': 'None'}, {'em1Text': 'django template tags that can be abused to get information', 'em2Text': 'make their own django templates with a set of pre-defined variables', 'label': 'None'}, {'em1Text': 'django template tags that can be abused to get information', 'em2Text': 'render this template on the server', 'label': 'PARENT'}], 'entityMentions': [{'start': 24, 'text': 'make their own django templates with a set of pre-defined variables', 'label': 'ATTACK'}, {'start': 102, 'text': 'render this template on the server', 'label': 'ATTACK'}, {'start': 296, 'text': 'django template tags that can be abused to get information', 'label': 'ATTACK'}], 'sentText': "is it safe to let users make their own django templates with a set of pre-defined variables, and then render this template on the server? i would only pass a very limited set of parameters to [code], all of which are strings. templates would be something like: so, the question is, are there any django template tags that can be abused to get information that users are not supposed to get? i'm most worried about the [code] tag. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 113, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 178, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 226, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 248, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mxxxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxs xn e app xxe xd t , t te d be xe indistinct general side channel attack r . t xxw d n r y o t g o recover those keys?  xe e ve xs for a d xr to w shave-down the chip r some kind of microscope attack? '}
{'sentId': 102, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone with physical access to the machine', 'em2Text': 'copy the cookie', 'label': 'AND'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'someone with physical access to the machine', 'label': 'PARENT'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'reuse it on another machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 363, 'text': 'someone with physical access to the machine', 'label': 'ATTACK'}, {'start': 410, 'text': 'copy the cookie', 'label': 'ATTACK'}, {'start': 430, 'text': 'reuse it on another machine', 'label': 'ATTACK'}, {'start': 467, 'text': 'stealing the session', 'label': 'ATTACK'}], 'sentText': 'most web xxxxxxxxxxxs xxe cookies to manage the xxxxxxn for a user and allxw you xo xxxy logged in even if txe xxxxxxr xxs cxxxxxxxxxxs axxxxe we did everythixg by txe boxk to make sure xxe coxxxe ixxxxf xs sxxxxxxxxxxt xxe contexxxxt http onlyset securxxxl is used for txe connecxxxxxe xxxxk for tamxxxxxg with xxe xxxxxxt xf the cookxxxs it xxxxxxxe to prexxxt someone with physical access to the machine to copy the cookie and reuse it on another machine and thxs stealing the session? '}
{'sentId': 30, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'database is compromised', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'database is compromised', 'label': 'PARENT'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'compromises the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 33, 'text': 'database is compromised', 'label': 'ATTACK'}, {'start': 66, 'text': 'all of the secrets will have to be changed', 'label': 'ATTACK'}, {'start': 383, 'text': 'compromises the machine', 'label': 'ATTACK'}, {'start': 417, 'text': 'encryption can be circumvented', 'label': 'ATTACK'}], 'sentText': "it's the most os sol, but if the database is compromised so, then all of the secrets will have to be changed. to me this sn is nt ideal because it has l of the problems of storing a password n plai. ths will provide some , because if e database is d then the ss will still be safe. but reverse encryn res an enn , and the key has to be stored on te server. it means that if an attar compromises the machine, then the encryption can be circumvented. "}
{'sentId': 30, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'database is compromised', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'database is compromised', 'label': 'PARENT'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'compromises the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'database is compromised', 'label': 'ATTACK'}, {'start': 81, 'text': 'all of the secrets will have to be changed', 'label': 'ATTACK'}, {'start': 466, 'text': 'compromises the machine', 'label': 'ATTACK'}, {'start': 500, 'text': 'encryption can be circumvented', 'label': 'ATTACK'}], 'sentText': "it's the most obvious solution, but if the database is compromised somehow, then all of the secrets will have to be changed. to me this solution is not ideal because it has all of the problems of storing a password in plain-text. this will provide some security, because if the database is compromised then the secrets will still be safe. but reversible encryption requires an encryption key, and the key has to be stored on the server. it means that if an attacker compromises the machine, then the encryption can be circumvented. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 135, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 216, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'xxe  r there exxxxxxxxxx, xxxd this xxxxxr is xo since rmally  there subj  exxe dos d t be o is minimal, b dos ut  but since txxxe are no access restrictions, the server xy xxxxxxxxxxxx,   access  can obviou  sly be attacked by dos etc. '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 28, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'f yu e cod with te ft case (someone posting malicious data to/as another user) the soln is e e whetr u e using ajax or not - yu t have to aue the user thh r mes is y -- usy via sessn cooki. '}
{'sentId': 38, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'clear the whole database', 'em2Text': 'inserting a delete statement', 'label': 'PARENT'}, {'em1Text': 'inserting a delete statement', 'em2Text': 'clear the whole database', 'label': 'None'}], 'entityMentions': [{'start': 47, 'text': 'clear the whole database', 'label': 'ATTACK'}, {'start': 75, 'text': 'inserting a delete statement', 'label': 'ATTACK'}], 'sentText': "i don't  don't w them  w ant them  a t ideas o clear the whole database by inserting a delete statement. them would  my ide w as would  them be: "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 33, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 56, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 101, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is txxt the xxr simy adds a slash then some encoded javascript n imxxe txg with t bo, xh kills the page.  simpe and xxxxxe attaxx.   '}
{'sentId': 46, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'PARENT'}, {'em1Text': 'getting [code] to put a backslash in the middle of a multibyte character', 'em2Text': 'sql injection', 'label': 'None'}], 'entityMentions': [{'start': 137, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 201, 'text': 'getting [code] to put a backslash in the middle of a multibyte character', 'label': 'ATTACK'}], 'sentText': 'in php, i know thxt [coxx] is much xxxxr than using [coxxxxxxxxxxx, i cxxxd not find an example of a sixxxxxxn wxxxe [code] would let an sql injection haxxxx. basically, the way xxe atxxxk wxxxs is by getting [code] to put a backslash in the middle of a multibyte character such txxt the backsxxxh loses xxs meaning by bexxg part of a valid multibyte sexxxxxx. '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 259, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 428, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 463, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'to gixe context why xt xs the way it is, txe xxxxxxd coxxxxxs an expiration tixe and on txe device when the token is xxxxt to expire i should prompt the user to re enter their credexxxxxs to gxt a new token. now this xxxxt seem lxxe a secxxxxy threat becaxxe a hacker could manipulate the token on the device, but the server checxs txe token xo make sure it is authentic which is why i do xxt wxxt the key on txe device because this can be mined by a hacker, xxd make the entire application vulnerable. '}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 72, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 96, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interg g quite fast: they e astonishingly ls f attempts o circumvent security and exploit vulnerabilities in standard software packages tt are commonly found n sites, like phpmyadmin, forums, etc. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 237, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 300, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t post he . e is  st separate us could  no r accu mag nt  s bit.ly  to hi do j . ak   d  do stt posting s and s upda   masg tes    tr on. malicious users could create links on my bit.ly account. app.  they would need to do a separate attack to     bre or ote n accou  t acc  links d   . he password to l do ogin  as to e account. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can xxxz for xxxxxxxxxxxxxxs in the app coxe and xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or somxxxxxx. but how xxxxd xn attacker really go about trying to recover those keys?  are thexe viabxe approaches for a determined attackxr to somxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 38, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'ls y xe e a tl xxf prxn le thxs ot if an attacket uses this code to bypass the csrf token? '}
{'sentId': 137, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'i read a comment about malford tags being used fr xss attacks. how am i supd to sanitize against these. if i use a library le htmlpurif, does it take of s as part of its work? or s this an independent thing? i dt hear pe talking about t much. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 210, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 266, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "    if e  y syst ou give y  ourself wr rig sits   runs ite   privi g obtain i rs ve lege to te st and  into em si,  you're risking  lege tht any   m tt runs r y runs ou t ny   r ss oo code t pyth to on pro) cn inject malicious code into the system  site-packages ad obtain root privilege. "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welxxxx, [yoxr nxxxx"  pages they  on pxxxxc pa pagxs xxs fo of r axxxxxxxxa and ted users, even i pages p  f they us  xxxxxd therefore e hxxx? of cours  cours shoxxd e, i wou axxxxxxxc e] a ld  th ages erefore  the like to kee [codx] p the ac xxxxxxxxxa cess to the sensitive p an therefore d ages sxxx, xxd i should  xa xo  txxxxxxxe keep [cod f e] to avoid possibxe stealing of the session token an . '}
{'sentId': 77, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 71, 'text': 'inject javascript and manipulate the variables or access functions', 'label': 'ATTACK'}], 'sentText': 'are there ways to prevent, or make it difficult enough, for someone to inject javascript and manipulate the variables or access functions? a thought i had is to change all var names randomly on each reload so the malware script would need to be rewritten every time? or are there other less painful ways? '}
{'sentId': 144, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 70, 'text': 'cross-site scripting (xss)', 'label': 'ATTACK'}], 'sentText': '  i am trying to  o (xss)  prot t in. rying ect my webe from cross-e  cross-site scripting (xss) and   m n and g   f using rer s ect sions to vi i date  . user inputs.  '}
{'sentId': 10, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a spam bot will not support javascript', 'em2Text': 'submit what it sees', 'label': 'AND'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'the bot does support javascript', 'label': 'OR'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'AND'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'a spam bot will not support javascript', 'label': 'PARENT'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'it will submit the form instantly', 'label': 'None'}], 'entityMentions': [{'start': 203, 'text': 'a spam bot will not support javascript', 'label': 'ATTACK'}, {'start': 251, 'text': 'submit what it sees', 'label': 'ATTACK'}, {'start': 275, 'text': 'the bot does support javascript', 'label': 'ATTACK'}, {'start': 307, 'text': 'it will submit the form instantly', 'label': 'ATTACK'}, {'start': 119, 'text': 'malicious scripted activity', 'label': 'ATTACK'}], 'sentText': "it looks like we'll be adding [link] support to stack overflow. this is necessary to prevent bots, spammers, and other malicious scripted activity. we only want human beings to post or edit things here! a spam bot will not support javascript and will submit what it sees. if the bot does support javascript it will submit the form instantly. the commenter has at least read some of the page before posting "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 52, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 288, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "xs it xe fxr someone to 'hack' an apache server and read php files. i uxxxxxxd that pp is a servere lxxxxxe d t be read m anywhere otxxr than the serv, but could soxe hack e r and rxd txxm as if reading a text file? wxl yes, if they r y hack into the server (ss, ftp etc.), they may have access to files on the hard disk. a xxxxxxxy confixxxxd apacxe sxxxxr will not se rxw php fxxxs tho, it sxxxxd alws prs them xh txe php inxxxxxr . "}
{'sentId': 90, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a security vulnerability to read php source', 'em2Text': 'string dumps from a security breach', 'label': 'OR'}, {'em1Text': 'string dumps from a security breach', 'em2Text': 'a security vulnerability to read php source', 'label': 'None'}], 'entityMentions': [{'start': 140, 'text': 'a security vulnerability to read php source', 'label': 'ATTACK'}, {'start': 298, 'text': 'string dumps from a security breach', 'label': 'ATTACK'}], 'sentText': "make ia  the file unread php able v made ia  via  is the web using rules via  in .htacces m v ade s (in case php fails o p r  the there  's a security vulnerability to read php source)destroy the p (to assword in memory after the db connect is  the made   the (to ( via (to  unse is t) (to prevent string dumps from a security breach,  r injectio there n, etc. th (to e security  )  "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 13, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'kernel or cross-process memory disclosure', 'label': 'ATTACK'}], 'sentText': 'in order to mitigate against kernel or cross-process memory disclosure (the [link] attack), [link], [code] introduced to [code] to perform indirect calls through a so-called retpoline. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 6, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 117, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 185, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 236, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 259, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mit an attacker recover the secrets in that flash? i d thy can xxxz fxr xs xn te app cxe d t x, t te cxxxd be xxxe indistinct general side channel attack or . t how d an r y o t tg o recover those keys?  xxe txe ve xxs fr a d ar to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 56, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in r, when i want to find by a user given value d avoid sql injection (e aposts and e l) i can do somg like this: i w that an unse way f doing ts (possible sql inject) is this: my question is, does e following md pret sql injection or not? '}
{'sentId': 101, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'buffer overflow security vulnerability', 'label': 'ATTACK'}], 'sentText': 'assuming that a c# program uses only managed .net code, is it possible to have a buffer overflow security vulnerability within that program? if so, how would such vulnerability be possible? '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand they can fxxz for vulnexxxxxxxxxs in the app xxxe and exploit it, that xxxxe could be some indistinct general side channel attack or sxxxxxxxx. but how would an xxxxxxxr reaxxy xo xxxxt txxxxg to recover those keys?  xxe txxxe vxxxxe appxxxxxxs for a determined atxxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 24, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': "this code is vulnerable to a buffer overflow attack, and i'm trying to figure out why. i'm thinking it has to do with [code] being declared a [code] instead of an [code], but i'm not really sure. "}
{'sentId': 38, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 136, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'what exa attacks ct is ly is goin attacks g on in th attacks e background that mak attacks es it s what o [link] preven pr ly events ts sql injection atta o cks in a .net parameterize on d query? to   is it just str i d t ipping out any o  susp so exa mething ect what  characters or is there something more to it? es  background  '}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 95, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 171, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 188, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'but what if a malicious script will first make some simple get request (by [link]) in order to download the page containing the antiforgery token in a hidden input field, extracts it, and use it to make a valid [link]?  '}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 79, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 109, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 232, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm workig on a legacy rails appln and the conts have many instances of [. whn running a brakeman scan n it, [code] opens up the application to mass assignment vulnerabilities. my question is- what s te mot effee wy to get around s params.permit! vulnerability and repe it? "}
{'sentId': 62, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time  taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 235, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 271, 'text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '     a  se in   , a timi  ng h to      to   atk tg    i a s  se a e g analyzi a  t  a ng     to  c side hl attack     in   whic  a  h  a t  he  a analy  zi t se  ex se ecute  alg  orit y, analyzi  hm i . timing    tr a to   ttempts to compromise a cryptosystem  s by at  analyzing the time  taken to execute cryptographic algorithms. ch   a y,  '}
{'sentId': 106, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'php is gets compromised', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}, {'em1Text': 'php is gets compromised', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}], 'entityMentions': [{'start': 81, 'text': 'php is gets compromised', 'label': 'ATTACK'}, {'start': 304, 'text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'ATTACK'}, {'start': 410, 'text': 'the user has broken the root login of the linux box running php', 'label': 'ATTACK'}], 'sentText': "how to sxxxxe datxxxxe xxxxxxxxxxs in a web axxxxxxxxxn in case the server where php is gets compromised?axxxxe that in this xxxxxxxxs case xe are not talking about xxxxxd hosting, vps or anything alike, there's only one perxxn who has acxxxs to the box thxt stores myxxl information. how to ensuxe that malicious user will not be able to obtain the details needed for connection string for mysql? assume that the user has broken the root login of the linux box running php. "}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 105, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and xxt to w wxxt is the t xxxe wy xo escape user input for forum posts. '}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 137, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'i m n m means o m st lan of  m g service uag allowin es allowing users to supply regular expression means you  that yo allowin allow g u allow for a denial of service attack. '}
{'sentId': 35, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 32, 'text': 'anyone with the sense to check your source could steal your login inf', 'label': 'ATTACK'}], 'sentText': "y this m isn't gg into e view e anyone with the sense to check your source could steal your login info? i d e this s to e e from e cont, bt i dont w how to create o ths from e . htt and t look prom, bt i t know hw o ay add a form to t. "}
{'sentId': 14, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'run fortify scan', 'em2Text': "i'm logging the exceptions using [code]", 'label': 'AND'}, {'em1Text': 'run fortify scan', 'em2Text': 'get access to this info and get system info', 'label': 'None'}, {'em1Text': "i'm logging the exceptions using [code]", 'em2Text': 'run fortify scan', 'label': 'None'}, {'em1Text': "i'm logging the exceptions using [code]", 'em2Text': 'get access to this info and get system info', 'label': 'None'}, {'em1Text': 'get access to this info and get system info', 'em2Text': 'run fortify scan', 'label': 'None'}, {'em1Text': 'get access to this info and get system info', 'em2Text': "i'm logging the exceptions using [code]", 'label': 'PARENT'}], 'entityMentions': [{'start': 7, 'text': 'run fortify scan', 'label': 'ATTACK'}, {'start': 52, 'text': "i'm logging the exceptions using [code]", 'label': 'ATTACK'}, {'start': 151, 'text': 'get access to this info and get system info', 'label': 'ATTACK'}], 'sentText': "when i run fortify scan on my project i do sxe xxxt i'm logging the exceptions using [code] and xt says this is xxt the rxxxt xxy becaxxe attxxxxs may get access to this info and get system info from this and plan an atxxxx. "}
{'sentId': 108, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 22, 'text': 'malicious uploading a short shell script', 'label': 'ATTACK'}], 'sentText': 'now, consider someone malicious uploading a short shell script: '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 153, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudfla my re on my website and   i wan my t to keep  i my s ddos erver's ip (the orig cloudfla in i cloudflare p) private, am   to to avoid ddos attacks bei apache, n private, g sent dir server ectly to    apache, my server's ip. my server  ip. uses  cloud orig flare apache, php, my my sql. "}
{'sentId': 45, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'someone was able to view your connection data', 'em2Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'None'}, {'em1Text': 'someone was able to view your connection data', 'em2Text': 'that person would be able to view part or all of your database', 'label': 'None'}, {'em1Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'em2Text': 'someone was able to view your connection data', 'label': 'None'}, {'em1Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'em2Text': 'that person would be able to view part or all of your database', 'label': 'None'}, {'em1Text': 'that person would be able to view part or all of your database', 'em2Text': 'someone was able to view your connection data', 'label': 'PARENT'}, {'em1Text': 'that person would be able to view part or all of your database', 'em2Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'None'}], 'entityMentions': [{'start': 245, 'text': 'someone was able to view your connection data', 'label': 'ATTACK'}, {'start': 300, 'text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'ATTACK'}, {'start': 377, 'text': 'that person would be able to view part or all of your database', 'label': 'ATTACK'}], 'sentText': 'remote access to mysql is not very secure. when your remote computer first connects to your mysql database, the password is encrypted before being transmitted over the internet. but after that, all data is passed as unencrypted "plain text". if someone was able to view your connection data (such as a "hacker" capturing data from an unencrypted wifi connection you\'re using), that person would be able to view part or all of your database.  '}
{'sentId': 54, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 159, 'text': 'inject something dangerous into a privileged shell command', 'label': 'ATTACK'}], 'sentText': "the daemon will pick up actions from a queue and execute them. however, since i'll be accepting input from users, i want to make sure they're not permitted to inject something dangerous into a privileged shell command. "}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per usxr salt prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table would xxxe to be generated for xxxh xxd every uxxr who had a unique salt in order to obtaxn their passworx.  xxxs wouxd be a txxe xxxxxxxxg process which is what makes salts exxxxxxxx.  this does not help a trexxxxxxs amouxt against xxxxxxxxxy or brxxe xxxxe attxxxx. '}
{'sentId': 55, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'does named query feature of hibernate helps to prevent sql injection attack? i am defining named queries in hbm.xml file not as annotation.<br/> '}
{'sentId': 57, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'em2Text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'OR'}, {'em1Text': 'compromise the user-experience for other players by, for example, hacking', 'em2Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'None'}], 'entityMentions': [{'start': 282, 'text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'ATTACK'}, {'start': 402, 'text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'ATTACK'}], 'sentText': "pointers and insight on security measures that i should take into consideration when developing software, mainly games, such as the one described below. by security i mean checking and double checking that a user doesn't act in a way not intended. this could mean behaviour such as sending his/her updated collection of the most malicious viruses in existance to the server/other clients, or otherwise compromise the user-experience for other players by, for example, hacking. "}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 4, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'send a file with an exploit/code', 'label': 'ATTACK'}], 'sentText': 'i need to validate all these files as imagespeople can probably send a file with an exploit/code that can likelybe a problem. but in my case i am mostly going to do a file open andsave and let the browser show the image     '}
{'sentId': 112, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'get user information', 'em2Text': 'combined into a url similar to the one below', 'label': 'None'}, {'em1Text': 'get user information', 'em2Text': 'with the user information from above added to the url', 'label': 'PARENT'}, {'em1Text': 'combined into a url similar to the one below', 'em2Text': 'get user information', 'label': 'None'}, {'em1Text': 'combined into a url similar to the one below', 'em2Text': 'with the user information from above added to the url', 'label': 'AND'}, {'em1Text': 'with the user information from above added to the url', 'em2Text': 'get user information', 'label': 'None'}, {'em1Text': 'with the user information from above added to the url', 'em2Text': 'combined into a url similar to the one below', 'label': 'None'}], 'entityMentions': [{'start': 100, 'text': 'get user information', 'label': 'ATTACK'}, {'start': 139, 'text': 'combined into a url similar to the one below', 'label': 'ATTACK'}, {'start': 189, 'text': 'with the user information from above added to the url', 'label': 'ATTACK'}], 'sentText': 'above is the code, as it appeared on the pages. i have played around with this code and it seems to get user information using: it is then combined into a url similar to the one below, but with the user information from above added to the url '}
{'sentId': 15, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'used the eval function for the exploit', 'em2Text': 'run their php code on your site', 'label': 'None'}, {'em1Text': 'run their php code on your site', 'em2Text': 'used the eval function for the exploit', 'label': 'PARENT'}], 'entityMentions': [{'start': 87, 'text': 'used the eval function for the exploit', 'label': 'ATTACK'}, {'start': 162, 'text': 'run their php code on your site', 'label': 'ATTACK'}], 'sentText': ' fender has ane hd t ph to p shell of ainy  m  o l aiy r si php p m t? it  on m et aiy used the eval function for the exploit shl  to . k php ers are al has e to run their php code on your site. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 122, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 254, 'text': 'stolen the cookie', 'label': 'ATTACK'}], 'sentText': 'i xxxe xxxd e advice xxxxw to protect agat any attak t think that xe sie is stxxl vxxxxxxxxe if xxxxxxxy manages to xxt at the cxe (albt only for a st time). is thee a way to complxxxxy dy xxe forms autxxxxxxxxxxn session on logout so xxxt even if e xxd stolen the cookie txe would be no cxxxxe of using it mxxxxxxxxy '}
{'sentId': 41, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'cross site request forgery', 'em2Text': 'send along the cookie with the session id', 'label': 'PARENT'}, {'em1Text': 'cross site request forgery', 'em2Text': 'reading the session identifier', 'label': 'PARENT'}, {'em1Text': 'send along the cookie with the session id', 'em2Text': 'cross site request forgery', 'label': 'None'}, {'em1Text': 'send along the cookie with the session id', 'em2Text': 'reading the session identifier', 'label': 'AND'}, {'em1Text': 'reading the session identifier', 'em2Text': 'cross site request forgery', 'label': 'None'}, {'em1Text': 'reading the session identifier', 'em2Text': 'send along the cookie with the session id', 'label': 'None'}], 'entityMentions': [{'start': 33, 'text': 'cross site request forgery', 'label': 'ATTACK'}, {'start': 126, 'text': 'send along the cookie with the session id', 'label': 'ATTACK'}, {'start': 332, 'text': 'reading the session identifier', 'label': 'ATTACK'}], 'sentText': 'yes, it is sufficient to prevent cross site request forgery.  the browser will make a request to mysite.com, and it will also send along the cookie with the session id. the thing to understand here is that evilsite.com cannot read the cookie, but it can still get its job done. browser same-origin policy prevents evilsite.com from reading the session identifier whether its in the cookie or embedded in html page. but because browser automatically sends the cookie to your server even if the resource was requested from the html code in another domain, you have xsrf.  '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 59, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 137, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 306, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is usin since g t he  st he method beo a w a bad choice? t generates a random number between 0-1000. since there ae on th y 0 o m p, and their md5 hashes are known, it shoul ials d take  ju an at at ae  c w ker ju wi  bew to th ju out ju ju    ju  a 0-1000. n generates d st a 1000 tr be u longing ials to verify the account without it really belonging to them '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 112, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 142, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 172, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 244, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i inherited some code that was recently attacked by repeated remote form submissions. however, the attacker now requests the form page first, starting a valid session, and then passes the session cookie in the following post request. therefore having a valid session token. so fail on my part. '}
{'sentId': 4, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': "steal the user's csrf token", 'em2Text': 'via js', 'label': 'PARENT'}, {'em1Text': 'via js', 'em2Text': "steal the user's csrf token", 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "steal the user's csrf token", 'label': 'ATTACK'}, {'start': 58, 'text': 'via js', 'label': 'ATTACK'}], 'sentText': "what prevents the attacker to steal the user's csrf token via js? can't he just find the csrf element and get it's value with js? "}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 106, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'le tn ts say we have a l  like csrf pro f  this tect say ion l tection   we th t is ike t e hs ont i we f an attacket uses this code to bypass the csrf token? '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there any way to protect encryption keys that are being stored in ram from a freezer attack? (sticking the computer in a freezer before rebooting malicious code to access the contents of ram) '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 30, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'has physical access to a machine', 'em2Text': 'look at the filesystem', 'label': 'AND'}, {'em1Text': 'has physical access to a machine', 'em2Text': 'retrieve a valid session cookie', 'label': 'None'}, {'em1Text': 'has physical access to a machine', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'has physical access to a machine', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'retrieve a valid session cookie', 'label': 'None'}, {'em1Text': 'look at the filesystem', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'has physical access to a machine', 'label': 'PARENT'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'look at the filesystem', 'label': 'None'}, {'em1Text': 'retrieve a valid session cookie', 'em2Text': 'hijack a session', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'has physical access to a machine', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'look at the filesystem', 'label': 'None'}, {'em1Text': 'hijack a session', 'em2Text': 'retrieve a valid session cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'has physical access to a machine', 'label': 'ATTACK'}, {'start': 69, 'text': 'look at the filesystem', 'label': 'ATTACK'}, {'start': 95, 'text': 'retrieve a valid session cookie', 'label': 'ATTACK'}, {'start': 143, 'text': 'hijack a session', 'label': 'ATTACK'}], 'sentText': 'if a xxxxxxxxs user has physical access to a machine, xxxy can xxxxl look at the filesystem to retrieve a valid session cookie axd use txxt to hijack a session? '}
{'sentId': 36, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attempt', 'em2Text': 'malicious character', 'label': 'OR'}, {'em1Text': 'malicious character', 'em2Text': 'xss attempt', 'label': 'None'}], 'entityMentions': [{'start': 85, 'text': 'xss attempt', 'label': 'ATTACK'}, {'start': 102, 'text': 'malicious character', 'label': 'ATTACK'}], 'sentText': '"a potentially dangerous request.form value was detected from the client may it be a xss attempt or a malicious character '}
{'sentId': 27, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'another application has access to your cookies', 'em2Text': 'impersonate you on the website anyway', 'label': 'None'}, {'em1Text': 'impersonate you on the website anyway', 'em2Text': 'another application has access to your cookies', 'label': 'PARENT'}], 'entityMentions': [{'start': 3, 'text': 'another application has access to your cookies', 'label': 'ATTACK'}, {'start': 65, 'text': 'impersonate you on the website anyway', 'label': 'ATTACK'}], 'sentText': 'if another application has access to your cookies, then they can impersonate you on the website anyway, so access to the api is no different.all authentication methods still go through our control.regular expiry of tokens means that if they are compromised then there is a limited time for exploitation. '}
{'sentId': 83, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'use atom tables', 'em2Text': 'store executable code', 'label': 'None'}, {'em1Text': 'store executable code', 'em2Text': 'use atom tables', 'label': 'PARENT'}], 'entityMentions': [{'start': 110, 'text': 'use atom tables', 'label': 'ATTACK'}, {'start': 129, 'text': 'store executable code', 'label': 'ATTACK'}], 'sentText': 'the security d has been abuzz over a nw ce n te called "atom bombing" (see ] and [link]).  siy stated, an r n use atom tables to store executable code. '}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 78, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 102, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 'jwt does not protect you to a man-in-the-middle (mitm) attack. if an attacker gets a valid token, can effectively impersonate. even if the content is encrypted. '}
{'sentId': 54, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 11, 'text': 'evil people can do bad things if they identify your public key', 'label': 'ATTACK'}], 'sentText': "presumably evil people can do bad things if they identify your public key. google seems to think so, apparently. i can guess what this step does, but i'm not sure i really want to speculate on that in an open forum, and give anyone any ideas.  you want to do it though. "}
{'sentId': 84, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 16, 'text': 'an sql injection attempt', 'label': 'ATTACK'}], 'sentText': "clearly this is an sql injection attempt. but why the constant shown above? i can't see how it could be particularly significant, though it seems to appear quite frequently. "}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 2, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 95, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'e uploaded several gifs, which when viewed with a browser, the browser said it was invalid, ad my virus scanner alerted me that it was a injection.  see bew for a p file cog the gifs. '}
{'sentId': 54, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 11, 'text': 'evil people can do bad things if they identify your public key', 'label': 'ATTACK'}], 'sentText': "presumably evil people can do bad things if they identify your public key. google seems to think so, apparently. i can guess what this step does, but i'm not sure i really want to speculate on that in an open forum, and give anyone any ideas.  you want to do it though. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 262, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm  o new to  simi th lar cxf and i   would like b  to know if it has any build-in mechan f ism th limiting at would allow limiti o ng the numbe and r o servi the ce,  it f concurrent calls  wcf to the web to  dos  service, thus addressing the possibility of a dos attack? somethin something g sim th ilar to this feature of wcf w  e th b i'm  i'm  ? "}
{'sentId': 71, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'http request misuse', 'em2Text': 'tweak your malicious script to authenticate', 'label': 'PARENT'}, {'em1Text': 'tweak your malicious script to authenticate', 'em2Text': 'http request misuse', 'label': 'None'}], 'entityMentions': [{'start': 123, 'text': 'http request misuse', 'label': 'ATTACK'}, {'start': 263, 'text': 'tweak your malicious script to authenticate', 'label': 'ATTACK'}], 'sentText': "i've made a voting on comments like the one this website has(something similar), and i'm slightly concerned about possible http request misuse. you'll know what i mean after i show you the questionable code: not even user authentication is very helpful, you just tweak your malicious script to authenticate and you can do it again. how can i make this request more secure, what can i do? thank you "}
{'sentId': 88, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker get an access', 'em2Text': "stole the user's cookie", 'label': 'None'}, {'em1Text': "stole the user's cookie", 'em2Text': 'hacker get an access', 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'hacker get an access', 'label': 'ATTACK'}, {'start': 107, 'text': "stole the user's cookie", 'label': 'ATTACK'}], 'sentText': "soluti the ons (how to prevent hacker get an access i to f prevent  h cooki  soluti hacker e (how ): e/she stole the user's cookie): "}
{'sentId': 24, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'i nexd to avo xxxxxxxxxxn avo . id being vulnexxxxe to sql injection in my asp in .xe in t axxxxc   ne injection ed ation. how mixxt i accomplish applixxxxxx.  th applic is? '}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "the problem is that users might upload code that attempts to 'hack' the system. i understand that in c and c++ it's easy to disable a certain set of system calls (patch a few .dll's), but i'm not so sure about other languages. "}
{'sentId': 95, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'performs a memory dump', 'em2Text': 'information is compromised', 'label': 'None'}, {'em1Text': 'information is compromised', 'em2Text': 'performs a memory dump', 'label': 'PARENT'}], 'entityMentions': [{'start': 80, 'text': 'performs a memory dump', 'label': 'ATTACK'}, {'start': 110, 'text': 'information is compromised', 'label': 'ATTACK'}], 'sentText': 'hexp inspxxxxxn is about se information stored in the xe my unex, so tt xf an r performs a memory dump , thxt information is compromised. thus, sixxxy hg that informan s it vulxxxxxxx. '}
{'sentId': 89, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'create a 100timessha512 function', 'em2Text': 'dos vulnerability', 'label': 'None'}, {'em1Text': 'dos vulnerability', 'em2Text': 'create a 100timessha512 function', 'label': 'PARENT'}], 'entityMentions': [{'start': 150, 'text': 'create a 100timessha512 function', 'label': 'ATTACK'}, {'start': 267, 'text': 'dos vulnerability', 'label': 'ATTACK'}], 'sentText': 'so, i wonder whether adding it every time adds some strength to the hash. for example, would it be possible that an attacker found some clever way to create a 100timessha512 function which were way faster than simply executing sha512 100 times? yes, it does expose a dos vulnerability, but it also prevents brute force attacks (or at least makes them prohibitively slow).  there is absolutely a tradeoff, but to some the benefits exceed the risks... '}
{'sentId': 137, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': "i read a comment about malformed tags being used for xss attacks. how am i supposed to sanitize against these. if i use a library like htmlpurifier, does it take of this as part of its work? or is this an independent thing? i don't hear people talking about it much. "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 154, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'how th ev e e th u e v run x,  [code] i do not u ud d the s   xxxxs d about sexxxxy .  that  the cxxxx, running [code] xxxxs x c how an xe hr the y  ud o run any javascript code that you can run. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 208, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 268, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxxt he . e s  xt e us cd  no r u g nt  s xxxy  to i do j . ak   d  o t pxxxxxg s d s ua   xg ts    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xxu  t c  s d   . xe pasd o l do n  s to e account. '}
{'sentId': 122, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 288, 'text': 'stolen the cookie', 'label': 'ATTACK'}], 'sentText': 'i have followed the advice below to protect against any attack but think that the site is still vulnerable if somebody manages to get at the cookie (albeit only for a short time). is there a way to completely destroy the forms authentication session on logout so that even if someone had stolen the cookie there would be no chance of using it maliciously '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 54, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 180, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 271, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked if xn atxxxxr can gain access to the system under the same user account as your code.n oxxxxxe , dxxxt u, t , xxxs an t a xx. if xn xxxxxxxr cn get access as the same user or as root, yoxxxe gxt far bigger pro. for xxxxxxx, txxy xxxxd tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 47, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 163, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 238, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked f xn r can gain access to the system under the same user account as your code.n oxxe , dxxxt u, t , xxxs an t a xx. f xn xr cn get access as the same user or as root, ye t r bigger pro. fr xx, txxy xxd tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 38, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 184, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'when creating apps that put data to a database is mysql_real_escape_string and general checking (is_numeric etc) on input data enough? what about other types of attacks different from sql injection. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand they can fxxz for vulnexxxxxxxxxs in the app xxxe and exploit it, that xxxxe could be some indistinct general side channel attack or sxxxxxxxx. but how would an xxxxxxxr reaxxy xo xxxxt txxxxg to recover those keys?  xxe txxxe vxxxxe appxxxxxxs for a determined atxxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 119, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is that the attacker simply adds a slash then some encoded javascript (an image tag with alert box), which kills the page.  simple and effective attack.   '}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 174, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'cou xxxn ld you please list som axxxxxy e strat servxxxx? egi som es  ld or even approaxxxs you   haxe al even ready  services? xxxxxxd to prevent/protec hxxe t es /minimize ddos attacks upon restful   xxb services? '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the mexxxxxs i get in my webhook callback. hoxxxxx, a malxxxxxs usxr can add my bot to a thousand big groups and xxxl poxxxxxy result in denial of service for all other users. exxn if telegram hxxe imxxxxxxxxd some rate limiting such user actions may still rxxxxt in denial of service for all other usexx. '}
{'sentId': 62, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time  taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 95, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 124, 'text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryptography, a timing attack is a side channel attack in which the  attacker attempts to compromise a cryptosystem by analyzing the time  taken to execute cryptographic algorithms. '}
{'sentId': 125, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'injected xss attacks', 'label': 'ATTACK'}], 'sentText': "i'm tryin that g to protext a classic asp e  web applixxxxo xxm n from htt  e web p header injected xss attacks web  and am having trouxxe fin string. ding  fixxxxg a sxxxxxxn that s a p nd to tryxn ps xxr ap found plixxxxo xxxs found in th ixxxxxxd e us  er a soxxxxxn gext string.  "}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 86, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 172, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'i m n m  a xxn g s o m xt n t es o     uag of  m t  g sxxxxxe g    a l  lxxxn   g  es allowing users to supply regular expression mea  ns xxu  xxt   yo a xxn llxxn w   g u allow for a denial of service attack. g  l  xxxn  g  '}
{'sentId': 21, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss and javascript injection attacks', 'em2Text': 'inject bad web code', 'label': 'None'}, {'em1Text': 'xss and javascript injection attacks', 'em2Text': 'arbitrary strings passed through it', 'label': 'None'}, {'em1Text': 'inject bad web code', 'em2Text': 'xss and javascript injection attacks', 'label': 'None'}, {'em1Text': 'inject bad web code', 'em2Text': 'arbitrary strings passed through it', 'label': 'PARENT'}, {'em1Text': 'arbitrary strings passed through it', 'em2Text': 'xss and javascript injection attacks', 'label': 'None'}, {'em1Text': 'arbitrary strings passed through it', 'em2Text': 'inject bad web code', 'label': 'None'}], 'entityMentions': [{'start': 119, 'text': 'xss and javascript injection attacks', 'label': 'ATTACK'}, {'start': 280, 'text': 'inject bad web code', 'label': 'ATTACK'}, {'start': 308, 'text': 'arbitrary strings passed through it', 'label': 'ATTACK'}], 'sentText': "i hxxe a page whxxe i wxxt to acxxxt an email address in the get parameters. if i xxe [codxx, am i still xxxxxxxxxe to xss and javascript injection attacks, and the lixx? i'm not xxxxxg if it's a good, or good enough, vxxxxxxxr of email addxxxxxx. i want to know if one can still inject bad web code throuxh arbitrary strings passed through it -- do i nexd to do additional filterxxg to prexxxt thax? "}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 105, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 156, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 232, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 261, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'bt wt   if  d a  ue xxxxxxxu   f s s [l xo ixxx?  e sxxe  xxxxt w xn xl f t  l a  k xxxxxxu e  f  pe a t make some simple get request (by [link]) in r  t o download the page containing the antiforgery token in a hidden input field, extracts it   se , an what d use it to make a valid [link]?  '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 208, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 268, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxxt he . e s  xt e us cd  no r u g nt  s xxxy  to i do j . ak   d  o t pxxxxxg s d s ua   xg ts    tr on. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xe n xxu  t c  s d   . xe pasd o l do n  s to e account. '}
{'sentId': 57, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'em2Text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'OR'}, {'em1Text': 'compromise the user-experience for other players by, for example, hacking', 'em2Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'None'}], 'entityMentions': [{'start': 206, 'text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'ATTACK'}, {'start': 325, 'text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'ATTACK'}], 'sentText': 'pois ad insight on security s t i should take io n when g , mainly games, such as te one ded bel. y security i mn checking and de chg that a user doest act in a way not intended. ts could mean behr such as sending his/her updated collection of the most malicious viruses in existance to the server/other clients, r otherwise compromise the user-experience for other players by, for example, hacking. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 135, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 216, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d they can xxxz fxr xxxxxxxxxxxxxxs xn te app cxe ad t xx, t te cxxxd be xxxe indistinct general side channel attack or . but how d an attacker y go t tryig o recover those keys?  xxe txxxe ve xxxs for a d ar to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 86, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 195, 'text': 'snooping in between and intercepting the message', 'label': 'ATTACK'}], 'sentText': "pretty simple and straight forward. everything works fine. but i'm afraid that the websocket connection to node.js is unsecure. when node.js sends a message to the recipient, i don't want anyone snooping in between and intercepting the message. i would like to make sure my users feel safe and trust the service i have built for them. "}
{'sentId': 31, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'our whole history of changes', 'label': 'AND'}, {'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'copying a single folder', 'label': 'PARENT'}, {'em1Text': 'our whole history of changes', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'our whole history of changes', 'em2Text': 'copying a single folder', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'our whole history of changes', 'label': 'None'}], 'entityMentions': [{'start': 138, 'text': 'steal not only the latest intellectual properly ', 'label': 'ATTACK'}, {'start': 190, 'text': 'our whole history of changes', 'label': 'ATTACK'}, {'start': 227, 'text': 'copying a single folder', 'label': 'ATTACK'}], 'sentText': "it's been difficult to nail down his exact security concern but i've gathered that it centers on the fact that a malicious employee could steal not only the latest intellectual properly but our whole history of changes just by copying a single folder. "}
{'sentId': 37, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 36, 'text': 'session fixation attacks', 'label': 'ATTACK'}], 'sentText': "i' the m   wondering how to prevent session fixation attacks  to  in in a when sp.net  prevent (see [lin way k]) have be on en doing more digging on this. the be  be  identifier any st way to preve   digging nt session en  fixation att   fixa en tion acks in any web a [lin pp  licati attacks on is to issue a new session id doing entifier when a  in. user logs in. "}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 106, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 134, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 86, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': 'o se a file i dd the followg s rs a hashve that is std n a file. whener the usr ws to access the file, he enters the password, and if the same hash is generated, e can access the fili se ths ist y s, but how e it is? how high is e ce tht string#hae gs the e hash h two dift inputg to your ans i changd the co t should be betr now?? '}
{'sentId': 58, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'em2Text': 'my virus scanner alerted me that it was a injection', 'label': 'None'}, {'em1Text': 'my virus scanner alerted me that it was a injection', 'em2Text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'uploaded several gifs, which when viewed with a browser, the browser said it was invalid', 'label': 'ATTACK'}, {'start': 102, 'text': 'my virus scanner alerted me that it was a injection', 'label': 'ATTACK'}], 'sentText': 'sxxxxxe uploaded several gifs, which when viewed with a browser, the browser said it was invalid, and my virus scanner alerted me that it was a injection.  xxe below xxr a xxp xxxe contaxxxxg these gifs. '}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 69, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 214, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': "my questixn is, since the post data is sent over curl/ssl, can it be intercepted or stolen while in traffic? cxn the hxxxxr view txe sexxxxn id in plain texxxxxe most important component here)?  xxu xo not want to implement this with php because this is easily xxxxxxxd xxxh webxxxxxxs alxxx. your sexxxr a hxxxxxxg xxl ([linxx) xxn act as an [lxxx] xxd as a [link] to sexxxr b. it's a commxn setup to divide rxxxxxxxxxxxxxs betwexn servers. resxxxxh these topics please. "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there any way to protect encryption keys that are being stored in ram from a freezer attack? (sticking the computer in a freezer before rebooting malicious code to access the contents of ram) '}
{'sentId': 11, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 126, 'text': 'read the plain-text password used to access the external service', 'label': 'ATTACK'}], 'sentText': 'xxxx: due to disn rxd in the co, let e clary the threat xxm trying xo addrxxx: i want to prevent an xxxxxxxr from being ae to read the plain-text password used to access the external service. meanixg t if they sw gaind non access xo our network or xxxxx, xxxn h te e dxxp they would nxt be able to rexd the passwors in pxxxn txxx. '}
{'sentId': 19, 'articleId': '3', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineers the app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'AND'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'AND'}, {'em1Text': 'creates his own app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'creates his own app', 'label': 'PARENT'}, {'em1Text': 'puts app in the store', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'PARENT'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'AND'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'reverse engineers the app', 'label': 'ATTACK'}, {'start': 39, 'text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'ATTACK'}, {'start': 139, 'text': 'creates his own app', 'label': 'ATTACK'}, {'start': 160, 'text': "bakes in company's sender id and server registration interface", 'label': 'ATTACK'}, {'start': 224, 'text': 'puts app in the store', 'label': 'ATTACK'}, {'start': 273, 'text': "impersonates company's real app as far as gcm goes", 'label': 'ATTACK'}, {'start': 326, 'text': "it registers to receive messages from company's sender id", 'label': 'ATTACK'}, {'start': 393, 'text': "sends its gcm registration id to company's servers", 'label': 'ATTACK'}], 'sentText': 'attacker reverse engineers the app and extracts both the sender id and the server interface used to receive gcm registration ids. attacker creates his own app, bakes in company\'s sender id and server registration interface, puts app in the store.  the attack app basically impersonates company\'s real app as far as gcm goes:  it registers to receive messages from company\'s sender id and then sends its gcm registration id to company\'s servers just like the "real" app does. '}
{'sentId': 86, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 105, 'text': 'optimizations from modifying your code behavior', 'label': 'ATTACK'}], 'sentText': 'yes, your concerns are legitimate. you need to use specifically designed function like [link] to prevent optimizations from modifying your code behavior. '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 116, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 132, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 164, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 263, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 284, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': 'ixxs  o e it e  xt  y   xe  xxy  o it bxxs to yu a s  mess xxd ql nd  t  it i up  tt te p xs a   x. g i g  og t  to take the id and run it through a mysql query to retrieve 1 record o d  a y il t y xt o d n xxe xxxx. is id  there  t anywy som xxxx. o  e mas r cd mess this url up xxd pose a security threat to my application/mysql db? '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 90, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': 'if an ar gets ahold of the data in the datastore, as well as our hash salt, im wod they d brute force the sensitive data.  '}
{'sentId': 27, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'server allow cross-website requests', 'em2Text': 'specify some external script that could be dangerous', 'label': 'None'}, {'em1Text': 'specify some external script that could be dangerous', 'em2Text': 'server allow cross-website requests', 'label': 'PARENT'}], 'entityMentions': [{'start': 93, 'text': 'server allow cross-website requests', 'label': 'ATTACK'}, {'start': 148, 'text': 'specify some external script that could be dangerous', 'label': 'ATTACK'}], 'sentText': "now let's imagine someone want to include some malicious script within your website. if your server allow cross-website requests, then people could specify some external script that could be dangerous for your server or the others users. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd xxxy can fuzz for vulnxxxxxxxxxxs in txe xxp xxxe and expxxxt ix, xxxt there xxxxd be sxxe indistinct general side channel attack or sometxxxx. bxt how woxxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe vixxxe approachxs xxr a dexxxxxxxd attaxxxr xo somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 59, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}], 'sentText': 'as far as i can see this xxxxxd xxxxxxt a man-in-the-middle attack, or am i missing something?at pxxxt 7 the client should know xf someone is trying to give the sxxxxr the wrong key to encrxxt wixx, xs no one xxxe but the server can dxxxxxt xxxxxxxxxxxx. '}
{'sentId': 40, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create links to this page', 'em2Text': "put this link in an image's [code] attribute", 'label': 'OR'}, {'em1Text': 'create links to this page', 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'create links to this page', 'label': 'None'}, {'em1Text': "put this link in an image's [code] attribute", 'em2Text': 'force users to get logged out', 'label': 'None'}, {'em1Text': 'force users to get logged out', 'em2Text': 'create links to this page', 'label': 'PARENT'}, {'em1Text': 'force users to get logged out', 'em2Text': "put this link in an image's [code] attribute", 'label': 'PARENT'}], 'entityMentions': [{'start': 102, 'text': 'create links to this page', 'label': 'ATTACK'}, {'start': 136, 'text': "put this link in an image's [code] attribute", 'label': 'ATTACK'}, {'start': 189, 'text': 'force users to get logged out', 'label': 'ATTACK'}], 'sentText': "ths will g e current user out of his/her . since this s a sie get requ, a malicious user could either create links to this page or even put this link in an image's [code] attribute that wd force users to get logged out. i would l like o main te sy of the logout k t havg to go too far, but at the se time i d le to be able to prevent e above scenario from o.  "}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 116, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'fr sey r, i xs t so,  e  xs   dee  xxxe to c a xs ttacker. he so, ck s  the integri check ty xf xxxe e execution, g tampered software by an attacker. so, my x integri xxxn i e s '}
{'sentId': 50, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': '/posts page that takes id paramater', 'em2Text': 'displays info', 'label': 'AND'}, {'em1Text': '/posts page that takes id paramater', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': '/posts page that takes id paramater', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': '/posts page that takes id paramater', 'label': 'PARENT'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': 'displays info', 'label': 'None'}], 'entityMentions': [{'start': 47, 'text': '/posts page that takes id paramater', 'label': 'ATTACK'}, {'start': 136, 'text': 'displays info', 'label': 'ATTACK'}, {'start': 173, 'text': 'user/hacker will know the real object id of the document', 'label': 'ATTACK'}], 'sentText': "let's say there is a posts collection, and the /posts page that takes id paramater (something like /posts/4d901acd8df94c1fe600009b) and displays info about it. this way the user/hacker will know the real object id of the document. is it okay or is it not secure? "}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 182, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 222, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': ' d s ump  xr sts      t cxn xxl a  r d d x, e xr on   e xe s   x . . imxu c t f l x, can   rd . tt strxn  gs  mean xf s o on e y bee e t [c    x  x s ,  sts ed e [c xx da s yu  o, f another process can dump memory x. , xs no way you can get rid of the data bef s oe []    u kc ss  t pro e e e ss xe ks  t . '}
{'sentId': 12, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 382, 'text': 'accessing the underlying system in malicious ways', 'label': 'ATTACK'}], 'sentText': "i recently learned about java's security model. most people think java is secure because it is immune to buffer overflows, etc, but there is this entire java security model centered around checking whether code has permission to take certain actions. they're really solving a challenging problem: how to let arbitrary untrusted code (say in a web browser) run but be prevented from accessing the underlying system in malicious ways while retaining the ability to interact with the system in some ways. "}
{'sentId': 69, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'logs into your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'AND'}, {'em1Text': 'logs into your site', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'PARENT'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'PARENT'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'cookies are shared to the flash app', 'label': 'PARENT'}], 'entityMentions': [{'start': 89, 'text': 'logs into your site', 'label': 'ATTACK'}, {'start': 114, 'text': 'then browses over to another website with a malicious flash app', 'label': 'ATTACK'}, {'start': 183, 'text': 'flash app can connect back to your site', 'label': 'ATTACK'}, {'start': 240, 'text': 'cookies are shared to the flash app', 'label': 'ATTACK'}, {'start': 288, 'text': "the flash app to hijack the user's session", 'label': 'ATTACK'}], 'sentText': "by adding the cros, te n sy concern is that flash apps can now connt to r .  so if somee logs into your site, and then browses over to another website with a malicious flash app, tht flash app can connect back to your site.  e it's in a b, cookies are shared to the flash app.  ts allows the flash app to hijack the user's session to do whatever t s your webse s witt the usr kg about it. "}
{'sentId': 81, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'how frequent (and/or sophisticated) are man-in-the-middle attacks? '}
{'sentId': 63, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 94, 'text': 'a brute force password guessing attack', 'label': 'ATTACK'}], 'sentText': 'does anyone know of a django app which can be used to extend django auth and lock accounts if a brute force password guessing attack is mounted? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 45, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 86, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 151, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the m is  simple t e  alert  se r  wh simply adds a slash   te im  tt n s a  scrt ome encoded javascript  sh n im s ae tg wih tht  alt bx age ), which kills the page. kills   simpe a tht nd effe attack.   e  '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 119, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is that the attacker simply adds a slash then some encoded javascript (an image tag with alert box), which kills the page.  simple and effective attack.   '}
{'sentId': 10, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 94, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 123, 'text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryptography, a timing attack is a side channel attack in which the attacker attempts to compromise a cryptosystem by analyzing the time taken to execute cryptographic algorithms. every logical operation in a computer takes time to execute, and the time can differ based on the input; with precise measurements of the time for each operation, an attacker can work backwards to the input. '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 310, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how ca i n  xxn i dxy the "welcom, [xxr name] n " n   pc xxxxs e  for xxxt public ed u, ev the en if t th to xr xxy e xxxx? of cou su [ ld r, i wo to u ose ld lixe to kep th ossi [ bxe e s xo o  the sensitxxe xxxs s xxxxxs afe, and i sd xxxe kp  osxe [   the coxx] xo axxxd p ther xxxxi shxxxd on xxo xxy re e stealing of the session token. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 107, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force', 'em2Text': 'find the $secret', 'label': 'None'}, {'em1Text': 'find the $secret', 'em2Text': 'brute force', 'label': 'PARENT'}], 'entityMentions': [{'start': 38, 'text': 'brute force', 'label': 'ATTACK'}, {'start': 58, 'text': 'find the $secret', 'label': 'ATTACK'}], 'sentText': 'is there any xxxxxr a find ttack than brute force the  to find the $secret in xxxxxxxxxs there any better attack xxxn bru attack te  xxxxe   f f  att  ack o attxxk rc attack e  [xxxxx? to fxxd the att  ack  $sxxxxt usixg [link] xo ? '}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in rails, when i want to find by a user given value and avoid sql injection (escape apostrophes and the like) i can do something like this: i know that an unsafe way of doing this (possible sql injection) is this: my question is, does the following method prevent sql injection or not? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe and expxxxt it, xxxt there xxxxd be sxxe indistinct general side channel attack or something. bxt how wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe viable approaches for a dexxxxxxxd attaxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 153, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'post to the form from another page using some nifty post-to-iframe hack it', 'label': 'ATTACK'}], 'sentText': 'if someone tries to post to the form from another page using some nifty post-to-iframe hack it will be [coxxx, you can throw xt out immxxxxxxxx. '}
{'sentId': 95, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker could fetch the encrypted string', 'em2Text': 'fetch the key', 'label': 'None'}, {'em1Text': 'attacker could fetch the encrypted string', 'em2Text': 'decrypt the data', 'label': 'None'}, {'em1Text': 'fetch the key', 'em2Text': 'attacker could fetch the encrypted string', 'label': 'PARENT'}, {'em1Text': 'fetch the key', 'em2Text': 'decrypt the data', 'label': 'None'}, {'em1Text': 'decrypt the data', 'em2Text': 'attacker could fetch the encrypted string', 'label': 'None'}, {'em1Text': 'decrypt the data', 'em2Text': 'fetch the key', 'label': 'PARENT'}], 'entityMentions': [{'start': 357, 'text': 'attacker could fetch the encrypted string', 'label': 'ATTACK'}, {'start': 400, 'text': 'fetch the key', 'label': 'ATTACK'}, {'start': 426, 'text': 'decrypt the data', 'label': 'ATTACK'}], 'sentText': 'how is such encryption p de ei crypt ossible i b  w ossible onder? the algorithm would b decrypt e ei  f  ixed and therefore  in ei would  the t key her the  well-known or deductible (say one the  of seven widely u so sed in indu the stry  encrypted alg  o indu rithms) and there must be a key so must mew decrypt here in the p so rogram ei . so s . o  the attacker could fetch the encrypted string, fetch the key in  a in nd decrypt the data. '}
{'sentId': 73, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'PARENT'}, {'em1Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'em2Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'AND'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'None'}, {'em1Text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'em2Text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'a wordpress page i manage started redirecting to ad/malware pages', 'label': 'ATTACK'}, {'start': 85, 'text': "the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options'", 'label': 'ATTACK'}, {'start': 197, 'text': "embedded in the json option 'yuzo_related_post_css_and_style' of the option_value", 'label': 'ATTACK'}], 'sentText': "about an hour ago a wordpress page i manage started redirecting to ad/malware pages. the snippet was embedded in wp_options in an entry with the key 'yuzo_related_post_options' - more specifically embedded in the json option 'yuzo_related_post_css_and_style' of the option_value. that option gets echoed without sanitizing. "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 206, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 245, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': ' d process p  xr ss      t can abl a  r d ed ex, e xr n   oue e s   x xx. . imxu c t if l , can   rid e. tt n  gs  men if s o n e y bee oe crext [c    x  xxx strs ,  strs ed the [c xxxxxx a s you  ode], if another process can dump memory x. , s no way you can get rid of the data bef s ore [li]    you kc strs  t o e ce e s he ks  t . '}
{'sentId': 10, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 94, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 123, 'text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryptography, a timing attack is a side channel attack in which the attacker attempts to compromise a cryptosystem by analyzing the time taken to execute cryptographic algorithms. every logical operation in a computer takes time to execute, and the time can differ based on the input; with precise measurements of the time for each operation, an attacker can work backwards to the input. '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 76, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 163, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 243, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 282, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my problem is that i fxxl the password would likely be intercepted. xn (1), the hash could be extracted by a man-in-the-middle attack. txe xxxxxxxr can xxw simply use that hash to get access to the user's information. xn (2), the atxxxxxr can intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 54, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 93, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'however, env vars are not particularly secure either. they are visible via [code], and hence they are available to any user that can run [code] commands. (of course, any user that has access to [code] on the host also [link] anyway.) '}
{'sentId': 53, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cycript technology', 'em2Text': 'all ios application are able to debug', 'label': 'AND'}, {'em1Text': 'cycript technology', 'em2Text': 'able to access variables and methods inside application', 'label': 'None'}, {'em1Text': 'cycript technology', 'em2Text': 'overwrite the runtime variables and methods', 'label': 'None'}, {'em1Text': 'all ios application are able to debug', 'em2Text': 'cycript technology', 'label': 'None'}, {'em1Text': 'all ios application are able to debug', 'em2Text': 'able to access variables and methods inside application', 'label': 'AND'}, {'em1Text': 'all ios application are able to debug', 'em2Text': 'overwrite the runtime variables and methods', 'label': 'None'}, {'em1Text': 'able to access variables and methods inside application', 'em2Text': 'cycript technology', 'label': 'None'}, {'em1Text': 'able to access variables and methods inside application', 'em2Text': 'all ios application are able to debug', 'label': 'None'}, {'em1Text': 'able to access variables and methods inside application', 'em2Text': 'overwrite the runtime variables and methods', 'label': 'None'}, {'em1Text': 'overwrite the runtime variables and methods', 'em2Text': 'cycript technology', 'label': 'None'}, {'em1Text': 'overwrite the runtime variables and methods', 'em2Text': 'all ios application are able to debug', 'label': 'None'}, {'em1Text': 'overwrite the runtime variables and methods', 'em2Text': 'able to access variables and methods inside application', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'cycript technology', 'label': 'ATTACK'}, {'start': 29, 'text': 'all ios application are able to debug', 'label': 'ATTACK'}, {'start': 71, 'text': 'able to access variables and methods inside application', 'label': 'ATTACK'}, {'start': 156, 'text': 'overwrite the runtime variables and methods', 'label': 'ATTACK'}], 'sentText': 'with the cycript technology, all ios application are able to debug and able to access variables and methods inside application.  and also it is possible to overwrite the runtime variables and methods.    with the cycript technology, all ios application are able to debug and able to access variables and methods inside application. and also it is possible to overwrite the runtime variables and methods. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 298, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calls ck? o cxf and  calls i would like know  to know if   it   has any build-in mec a hanism that would allo calls w limiting t this he cxf  calls  num and b ca this lls er of c cxf oncur cxf rent calls to the web s cxf ervice, thus would  a wcf? ddressing the possibility of a dos attack? something simi  lar to this feature i  of wcf? "}
{'sentId': 121, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 93, 'text': 'become compromised via script injection', 'label': 'ATTACK'}], 'sentText': '[link] gives me concern about the potential for a [link], in a case where my application has become compromised via script injection. '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 333, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 373, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my qxxxxi but on xx, how xxxe is "auth !== nxxx" th is at ? yes, i   rxxxxxe txxt thxs mea th dxxxxxxx? is n sxxe s that onl xxxxxxxn y a but n axxxxxxxxxxxd user can access  this th is   how ,  xxxxxxxxxxs e da n ta, but xxw easy  i is it to becxxe auxh ye c credent right xxxs an s, exxxxxxxx? authe up ntxxxxxd  cxn s then omeone sign up for the app, i   up  , and then use those credentials to get request right into my database? '}
{'sentId': 27, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 151, 'text': 'manages to get dodgy code onto a server', 'label': 'ATTACK'}], 'sentText': "i want to know how to disable the eval modifier in php's regex system eg. [code]. it's a potential exploit that can be used in place of eval if anyone manages to get dodgy code onto a server. i had a problem recently with a wordpress theme from woothemes that had a security hole that allowed hackers to upload a back door server admin type script. "}
{'sentId': 3, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 268, 'text': 'injections into the database', 'label': 'ATTACK'}], 'sentText': "when you're making serious web apps that'll handle large amounts of data, what precautions should i take against my data inputs to fully sanitise it? i know there's the obvious trim, escaping, xss cleaning, etc - but what other techniques should i incorporate to stop injections into the database? "}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 166, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a stae sxxxk clxxxxr ruxg xn a rexe servxr axd i'm nxw to spxxx. it s tt therxxs no authxn e prog the cr xxxxxxxs (7x) poxt by xxxxxxx. anyoxe xxn jxxt xxxxxy submit their own code to the cluster without any restrictions. "}
{'sentId': 10, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a spam bot will not support javascript', 'em2Text': 'submit what it sees', 'label': 'AND'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'the bot does support javascript', 'label': 'OR'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'AND'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'a spam bot will not support javascript', 'label': 'PARENT'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'it will submit the form instantly', 'label': 'None'}], 'entityMentions': [{'start': 203, 'text': 'a spam bot will not support javascript', 'label': 'ATTACK'}, {'start': 251, 'text': 'submit what it sees', 'label': 'ATTACK'}, {'start': 275, 'text': 'the bot does support javascript', 'label': 'ATTACK'}, {'start': 307, 'text': 'it will submit the form instantly', 'label': 'ATTACK'}, {'start': 119, 'text': 'malicious scripted activity', 'label': 'ATTACK'}], 'sentText': "it looks like we'll be adding [link] support to stack overflow. this is necessary to prevent bots, spammers, and other malicious scripted activity. we only want human beings to post or edit things here! a spam bot will not support javascript and will submit what it sees. if the bot does support javascript it will submit the form instantly. the commenter has at least read some of the page before posting "}
{'sentId': 113, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'cookies can be stolen', 'em2Text': 'xss attacks', 'label': 'PARENT'}, {'em1Text': 'cookies can be stolen', 'em2Text': 'csrf', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'csrf', 'label': 'PARENT'}, {'em1Text': 'csrf', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'csrf', 'em2Text': 'xss attacks', 'label': 'None'}], 'entityMentions': [{'start': 4, 'text': 'cookies can be stolen', 'label': 'ATTACK'}, {'start': 36, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 139, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'no. cookies can be stolen  sinc via xss attacks request.  (and other vect attacks ors)also, this attacks  might  no. be  be susceptible to csrf sinc since e a cookie will be  sto b  e len    stolen submitted automatically wi no. th any req sto uest. '}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 69, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 214, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': "my question is, since the post data is sent over curl/ssl, can it be intercepted or stolen while in traffic? can the hacker view the session id in plain text(the most important component here)?  you do not want to implement this with php because this is easily achieved with webservers alone. your server a handling ssl ([link]) can act as an [link] and as a [link] to server b. it's a common setup to divide responsibilites between servers. research these topics please. "}
{'sentId': 3, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'attacker modifies his remote host or user agent or something', 'em2Text': 'inserting attacking code into his remote host or user agent or ect', 'label': 'PARENT'}, {'em1Text': 'inserting attacking code into his remote host or user agent or ect', 'em2Text': 'attacker modifies his remote host or user agent or something', 'label': 'None'}], 'entityMentions': [{'start': 99, 'text': 'attacker modifies his remote host or user agent or something', 'label': 'ATTACK'}, {'start': 185, 'text': 'inserting attacking code into his remote host or user agent or ect', 'label': 'ATTACK'}], 'sentText': 'i am considering to record access log,   and i am considering to view it via wev browser,   but if attacker modifies his remote host or user agent or something, can he attack to me? by inserting attacking code into his remote host or user agent or ect. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 224, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 336, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevx can x, i do xt xxxd axxx  t vulxxx run xxxxx. xe  code s running  how xxxx  ru evxx,  abo ab can out ut xxx cxx , xxxxxx  . to c xxxxy od javascript e    r  un xxxxy v  ulxxxx xxxxy xxxx. cxxxxxxxx  , ru xxxy nning , running [code] gx , x axxx  xxxx xt xxx axxx you  y x about s te hr  code un  th vulxxx e axxx run xt ning y to run any javascript code that you can run vulxxx r  un xxxxx. . r x un.  '}
{'sentId': 89, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'create a 100timessha512 function', 'em2Text': 'dos vulnerability', 'label': 'None'}, {'em1Text': 'dos vulnerability', 'em2Text': 'create a 100timessha512 function', 'label': 'PARENT'}], 'entityMentions': [{'start': 150, 'text': 'create a 100timessha512 function', 'label': 'ATTACK'}, {'start': 267, 'text': 'dos vulnerability', 'label': 'ATTACK'}], 'sentText': 'so, i wonder whether adding it every time adds some strength to the hash. for example, would it be possible that an attacker found some clever way to create a 100timessha512 function which were way faster than simply executing sha512 100 times? yes, it does expose a dos vulnerability, but it also prevents brute force attacks (or at least makes them prohibitively slow).  there is absolutely a tradeoff, but to some the benefits exceed the risks... '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuxz for vulnxxxxxxxxxxs in txe app xxxe axd expxxxt it, xxxt thexe xxxxd xe sxxe indistinct general side channel attack or sometxxxx. bxt xxw wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  axe txxxe xxxxxe apxxxxxxxs for a dexxxxxxxd xxxxxxxr to xxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 127, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i wan xxxt ty le t t  o know if this an i d xn  ly this  so, lxxxxe on  sxxxxxt pxxxxxxs axy securi i   ty issues  o (like xss attacks xxx) '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 15, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 105, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': 'if an xxxxxxxr gets ahold of the data in the datastore, as well as our hash salt, ixm worrxxd txxy could brute force the sensitive data.  '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there any way to protect encryption keys that are being stored in ram from a freezer attack? (sticking the computer in a freezer before rebooting malicious code to access the contents of ram) '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 182, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'e access  load this r i this s nom access y sud to is mi i  can nimal,  to but sie th nimal, e th e are no access restrictions,   restrictions, usly the sr cn obv to o can y  can be attacked by dos etc. '}
{'sentId': 23, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'your code being exploited maliciously', 'em2Text': 'through buffer overflow exploits', 'label': 'PARENT'}, {'em1Text': 'your code being exploited maliciously', 'em2Text': 'code injection', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'code injection', 'label': 'OR'}, {'em1Text': 'code injection', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'code injection', 'em2Text': 'through buffer overflow exploits', 'label': 'None'}], 'entityMentions': [{'start': 229, 'text': 'your code being exploited maliciously', 'label': 'ATTACK'}, {'start': 273, 'text': 'through buffer overflow exploits', 'label': 'ATTACK'}, {'start': 309, 'text': 'code injection', 'label': 'ATTACK'}], 'sentText': 'whe h n writing code do you  an a maliciously, nd d ?  consciously progra you m avoid  de being  rogram fensively to ensur de e h the igh p the ro code gram quality and t malicio you usly, o avoid the whe ensur n  possibility of your code being exploited maliciously, e.g. through buffer overflow exploits or code injection ? '}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 50, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 295, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  y xxxxxxxxx: it is hiy recommd that yxu do not  hard-code the exact public license key string value xs provd by  ge . , you can conxxxxxt e whxxe pxxxxc lxe xxy  xxxxxg at runtime frm substxxxxx, or xxxxxxxe it fxxm an enxxxxxd  store, before pxxxxxg t to e cons. this xxxxxxxh s it  e dt for malicious third-parties to modify the public  license key string in r ak fil. '}
{'sentId': 56, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'apply an [link] the iframe', 'em2Text': 'the widget has loaded', 'label': 'PARENT'}, {'em1Text': 'apply an [link] the iframe', 'em2Text': 'resize the iframe to be the size of the page', 'label': 'None'}, {'em1Text': 'apply an [link] the iframe', 'em2Text': 'have this now invisible iframe follow the cursor', 'label': 'None'}, {'em1Text': 'apply an [link] the iframe', 'em2Text': 'the iframe receives the click event', 'label': 'None'}, {'em1Text': 'the widget has loaded', 'em2Text': 'apply an [link] the iframe', 'label': 'None'}, {'em1Text': 'the widget has loaded', 'em2Text': 'resize the iframe to be the size of the page', 'label': 'None'}, {'em1Text': 'the widget has loaded', 'em2Text': 'have this now invisible iframe follow the cursor', 'label': 'None'}, {'em1Text': 'the widget has loaded', 'em2Text': 'the iframe receives the click event', 'label': 'None'}, {'em1Text': 'resize the iframe to be the size of the page', 'em2Text': 'apply an [link] the iframe', 'label': 'PARENT'}, {'em1Text': 'resize the iframe to be the size of the page', 'em2Text': 'the widget has loaded', 'label': 'None'}, {'em1Text': 'resize the iframe to be the size of the page', 'em2Text': 'have this now invisible iframe follow the cursor', 'label': 'OR'}, {'em1Text': 'resize the iframe to be the size of the page', 'em2Text': 'the iframe receives the click event', 'label': 'None'}, {'em1Text': 'have this now invisible iframe follow the cursor', 'em2Text': 'apply an [link] the iframe', 'label': 'None'}, {'em1Text': 'have this now invisible iframe follow the cursor', 'em2Text': 'the widget has loaded', 'label': 'None'}, {'em1Text': 'have this now invisible iframe follow the cursor', 'em2Text': 'resize the iframe to be the size of the page', 'label': 'None'}, {'em1Text': 'have this now invisible iframe follow the cursor', 'em2Text': 'the iframe receives the click event', 'label': 'None'}, {'em1Text': 'the iframe receives the click event', 'em2Text': 'apply an [link] the iframe', 'label': 'None'}, {'em1Text': 'the iframe receives the click event', 'em2Text': 'the widget has loaded', 'label': 'None'}, {'em1Text': 'the iframe receives the click event', 'em2Text': 'resize the iframe to be the size of the page', 'label': 'None'}, {'em1Text': 'the iframe receives the click event', 'em2Text': 'have this now invisible iframe follow the cursor', 'label': 'PARENT'}], 'entityMentions': [{'start': 25, 'text': 'apply an [link] the iframe', 'label': 'ATTACK'}, {'start': 58, 'text': 'the widget has loaded', 'label': 'ATTACK'}, {'start': 164, 'text': 'resize the iframe to be the size of the page', 'label': 'ATTACK'}, {'start': 212, 'text': 'have this now invisible iframe follow the cursor', 'label': 'ATTACK'}, {'start': 322, 'text': 'the iframe receives the click event', 'label': 'ATTACK'}], 'sentText': 'the attacker is going to apply an [link] the iframe after the widget has loaded.  this mask will make the iframe invisible.   at this point the attacker can either resize the iframe to be the size of the page or have this now invisible iframe follow the cursor.  either way whenever the user clicks anywhere on the page,  the iframe receives the click event and its game over.  '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 187, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i would like to know if it has any build-in mechanism that would allow limiting the number of concurrent calls to the web service, thus addressing the possibility of a dos attack? something similar to this feature of wcf? "}
{'sentId': 1, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'csrf attacks', 'em2Text': 'attacker steals a token', 'label': 'PARENT'}, {'em1Text': 'attacker steals a token', 'em2Text': 'csrf attacks', 'label': 'None'}], 'entityMentions': [{'start': 67, 'text': 'csrf attacks', 'label': 'ATTACK'}, {'start': 302, 'text': 'attacker steals a token', 'label': 'ATTACK'}], 'sentText': 'as far as i understand there are two approaches in protecting from csrf attacks: 1) token per session, and 2) token per request 2) in the second case new csrf token is being generated on each request and after that an old one becomes invalid.it makes harder to exploit the vunerability because even if attacker steals a token (via xss) it expires when the user goes to the next page.but on the other hand this approach makes webapp less usable. here is a good quotation from [link]: '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 147, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile my app', 'em2Text': 'register and then "scan" my entire database', 'label': 'AND'}, {'em1Text': 'decompile my app', 'em2Text': 'sending requests with different gps data', 'label': 'PARENT'}, {'em1Text': 'decompile my app', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'decompile my app', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'decompile my app', 'label': 'PARENT'}, {'em1Text': 'gaining access to the api', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'gaining access to the api', 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'decompile my app', 'label': 'ATTACK'}, {'start': 49, 'text': 'register and then "scan" my entire database', 'label': 'ATTACK'}, {'start': 103, 'text': 'sending requests with different gps data', 'label': 'ATTACK'}, {'start': 351, 'text': 'gaining access to the api', 'label': 'ATTACK'}, {'start': 419, 'text': 'use his login information along with the key from the code', 'label': 'ATTACK'}], 'sentText': 'howxxxx, i fear somebody xxxxt decompile my app, register and then "scan" my entire database by sixxxy sending requests with different gps data that dxxxxxt actuaxxy cxxe xxxm an ios dxxxxx. is thexe any way to xxxxxxt this? ixxe xxxxxxd alrexxy and fxxxd thxs threat: i\'ve lookxd into api keys but didn\'t find a way how to stop a malicious uxxr xxxm gaining access to the api xxxxxxh regisxxxxxx/ decompilixg and thxn use his login information along with the key from the code. '}
{'sentId': 47, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'AND'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'create a licensing system built on the .net framework cryptography classes', 'em2Text': 'has admin access to your computer', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}, {'em1Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'em2Text': 'has admin access to your computer', 'label': 'AND'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'log and change the input of functios that i call just by hooking into the methods.', 'em2Text': 'has admin access to your computer', 'label': 'PARENT'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'None'}, {'em1Text': 'has admin access to your computer', 'em2Text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'None'}], 'entityMentions': [{'start': 11, 'text': 'create a licensing system built on the .net framework cryptography classes', 'label': 'ATTACK'}, {'start': 87, 'text': 'it could be bypassed system-wide for every .net application on the system using the framework', 'label': 'ATTACK'}, {'start': 199, 'text': 'log and change the input of functios that i call just by hooking into the methods.', 'label': 'ATTACK'}, {'start': 296, 'text': 'has admin access to your computer', 'label': 'ATTACK'}], 'sentText': "r , if i'd create a licensing system built on the .net framework cryptography classes, it could be bypassed system-wide for every .net application on the system using the framework. also, everyby cn log and change the input of functios that i call just by hooking into the methods. if an attackr has admin access to your computer h is requird for the attack you de, then youe prey h l. ang you d do coud be circumd by te at. "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 52, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 288, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it pe for someone to 'hack' an apache server and read php files. i understd that pp is a servere languae d t be read m anywhere other than the serv, but could some hack e r and red them as if reading a text file? wel yes, if they r y hack into the server (ss, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not se raw php files tho, it should alws prs them wh the php interprr . "}
{'sentId': 32, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'any variable that a user can control,  an attacker can also control', 'label': 'ATTACK'}], 'sentText': 'any variable that a user can control,  an attacker can also control and s  ,  an therefore a e of an attack.    ts   f ad   s c s ontr, n      a c any a of ll s alled  ed a "" vari, and is  can un.  '}
{'sentId': 160, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 36, 'text': 'xss attack vector', 'label': 'ATTACK'}], 'sentText': "in [link] article, i'm warned of an xss attack vector [code].  i'm wondering what type of syntax [code] is.  in my brief tests on chromium, it doesn't actually get rendered into a tag, leading me to believe that the syntax is used by either an sql engine, or a server side programming language.  i'm not concerned with stored/reflected xss, only dom-based ones.  i don't recognize it though, so maybe its like ruby or python or something? "}
{'sentId': 87, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'event injection', 'em2Text': 'special application permissions - [link] to be exact', 'label': 'PARENT'}, {'em1Text': 'special application permissions - [link] to be exact', 'em2Text': 'event injection', 'label': 'None'}], 'entityMentions': [{'start': 43, 'text': 'event injection', 'label': 'ATTACK'}, {'start': 68, 'text': 'special application permissions - [link] to be exact', 'label': 'ATTACK'}], 'sentText': "i think e bigget pm you'll face is that ug event injection requires special application permissions - [link] to be exact.  e grantg n an this n basically alls it to sime it es into any apn at ay time, t is cd quite dangerous bee a ban or y mas appln coud o a t of .  the my ens and bs do nt alw appls that e this p. "}
{'sentId': 52, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'extract the public key from the host application', 'em2Text': 'inject it into an assembly of your own', 'label': 'None'}, {'em1Text': 'extract the public key from the host application', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'extract the public key from the host application', 'label': 'PARENT'}, {'em1Text': 'inject it into an assembly of your own', 'em2Text': 'run mallicious code', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'extract the public key from the host application', 'label': 'None'}, {'em1Text': 'run mallicious code', 'em2Text': 'inject it into an assembly of your own', 'label': 'PARENT'}], 'entityMentions': [{'start': 244, 'text': 'extract the public key from the host application', 'label': 'ATTACK'}, {'start': 297, 'text': 'inject it into an assembly of your own', 'label': 'ATTACK'}, {'start': 340, 'text': 'run mallicious code', 'label': 'ATTACK'}], 'sentText': "can't this be spoofed? i am not sure if the setpublickey() method has any effect on a built assembly, but even the msdn documentation shows how you can use this on a dynamically generated assembly (reflection emit) so that would mean you could extract the public key from the host application and inject it into an assembly of your own and run mallicious code if the above was the safe-guard, or am i missing something? "}
{'sentId': 37, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'output escaping', 'label': 'None'}, {'em1Text': 'output escaping', 'em2Text': 'sql injection', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 39, 'text': 'output escaping', 'label': 'ATTACK'}], 'sentText': 'note: i take care of sql injection and output escaping elsewhere - this question is about input filtering only, thanks. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 128, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'a man in the middle attack', 'label': 'ATTACK'}], 'sentText': 'the followixg [link] discuxxxs how to destrxy a flaxk tokex, xxxxxxr this dxxs not prxxxxt a man in the middle attack.  is thxxe anyway to invalidate the token xo it is no longer active before the time it expxxxx? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 75, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 130, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  xf yu e yf we pe to e m sxxx,  ye g txxt ay m txt rs unr u t y  n x) can inject malicious code into the system  site-packages d obtain root privilege. '}
{'sentId': 20, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection attack', 'em2Text': 'your parameterized query passes a username to a stored procedure', 'label': 'PARENT'}, {'em1Text': 'sql injection attack', 'em2Text': 'within the stored procedure the parameter is concatenated to a sql command', 'label': 'None'}, {'em1Text': 'your parameterized query passes a username to a stored procedure', 'em2Text': 'sql injection attack', 'label': 'None'}, {'em1Text': 'your parameterized query passes a username to a stored procedure', 'em2Text': 'within the stored procedure the parameter is concatenated to a sql command', 'label': 'AND'}, {'em1Text': 'within the stored procedure the parameter is concatenated to a sql command', 'em2Text': 'sql injection attack', 'label': 'None'}, {'em1Text': 'within the stored procedure the parameter is concatenated to a sql command', 'em2Text': 'your parameterized query passes a username to a stored procedure', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': 'sql injection attack', 'label': 'ATTACK'}, {'start': 222, 'text': 'your parameterized query passes a username to a stored procedure', 'label': 'ATTACK'}, {'start': 292, 'text': 'within the stored procedure the parameter is concatenated to a sql command', 'label': 'ATTACK'}], 'sentText': "no, you can't avoid all sql injection attacks by using parameters. dynamic sql is the real issue, and this can occur in stored procedures as well as in your application code. e.g., this is prone to a sql injection attack: your parameterized query passes a username to a stored procedure, and within the stored procedure the parameter is concatenated to a sql command and then executed. for an example of many kinds of sql injection attacks, see this [link]. you will see that simply escaping single quotes is just scratching the surface, and that there are many ways around that. "}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 212, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 313, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 397, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': 'but, is there anyway to steal httponly cookies, with xss? (ignoring the question of httponly support?)....the answer is: yes.a subset of xss is known as [link] (or go to the original [link]). this attack has the xss payload send an http trace request to the web server (or [link], forward or reverse), which will echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookies... '}
{'sentId': 5, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'this attack to work', 'em2Text': 'use a fileupload at some point', 'label': 'PARENT'}, {'em1Text': 'this attack to work', 'em2Text': 'the files stored must be executed via php', 'label': 'None'}, {'em1Text': 'use a fileupload at some point', 'em2Text': 'this attack to work', 'label': 'None'}, {'em1Text': 'use a fileupload at some point', 'em2Text': 'the files stored must be executed via php', 'label': 'AND'}, {'em1Text': 'the files stored must be executed via php', 'em2Text': 'this attack to work', 'label': 'None'}, {'em1Text': 'the files stored must be executed via php', 'em2Text': 'use a fileupload at some point', 'label': 'None'}], 'entityMentions': [{'start': 16, 'text': 'this attack to work', 'label': 'ATTACK'}, {'start': 88, 'text': 'use a fileupload at some point', 'label': 'ATTACK'}, {'start': 138, 'text': 'the files stored must be executed via php', 'label': 'ATTACK'}], 'sentText': 'so in order for this attack to work, you need to have two conditions : the website must use a fileupload at some point that you can accessthe files stored must be executed via php, even the image files (in that case). '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 50, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': "reset palin's password", 'em2Text': 'her  birthdate', 'label': 'PARENT'}, {'em1Text': "reset palin's password", 'em2Text': 'zip code', 'label': 'None'}, {'em1Text': "reset palin's password", 'em2Text': 'where she met her spouse -- the  security question on her yahoo  account', 'label': 'None'}, {'em1Text': 'her  birthdate', 'em2Text': "reset palin's password", 'label': 'None'}, {'em1Text': 'her  birthdate', 'em2Text': 'zip code', 'label': 'AND'}, {'em1Text': 'her  birthdate', 'em2Text': 'where she met her spouse -- the  security question on her yahoo  account', 'label': 'None'}, {'em1Text': 'zip code', 'em2Text': "reset palin's password", 'label': 'None'}, {'em1Text': 'zip code', 'em2Text': 'her  birthdate', 'label': 'None'}, {'em1Text': 'zip code', 'em2Text': 'where she met her spouse -- the  security question on her yahoo  account', 'label': 'AND'}, {'em1Text': 'where she met her spouse -- the  security question on her yahoo  account', 'em2Text': "reset palin's password", 'label': 'None'}, {'em1Text': 'where she met her spouse -- the  security question on her yahoo  account', 'em2Text': 'her  birthdate', 'label': 'None'}, {'em1Text': 'where she met her spouse -- the  security question on her yahoo  account', 'em2Text': 'zip code', 'label': 'None'}], 'entityMentions': [{'start': 105, 'text': "reset palin's password", 'label': 'ATTACK'}, {'start': 134, 'text': 'her  birthdate', 'label': 'ATTACK'}, {'start': 150, 'text': 'zip code', 'label': 'ATTACK'}, {'start': 182, 'text': 'where she met her spouse -- the  security question on her yahoo  account', 'label': 'ATTACK'}], 'sentText': "  from [link] magazine:    ...the palin hack didn't require any  real skill. instead, the hacker simply  reset palin's password using her  birthdate, zip code and information  about where she met her spouse -- the  security question on her yahoo  account, which was answered (wasilla  high) by a simple google search. "}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 375, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a standa  lone  cluste spark c t lust  i submit er runnin   h that ave g on and  a  t i heir remote server an master's d i'm default.  new  default. to spark. i standalone t app ave ears that ation  there's no authentic restrictions. ation scheme protect just ing the cluste new r master's (707 their 7) p there's ort by def restrictions. ault. anyone can just simply submit their own code to the cluster without any restrictions. "}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 69, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 214, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': "my questixn is, since the post data is sent over curl/ssl, can it be intercepted or stolen while in traffic? cxn the hxxxxr view txe sexxxxn id in plain texxxxxe most important component here)?  xxu xo not want to implement this with php because this is easily xxxxxxxd xxxh webxxxxxxs alxxx. your sexxxr a hxxxxxxg xxl ([linxx) xxn act as an [lxxx] xxd as a [link] to sexxxr b. it's a commxn setup to divide rxxxxxxxxxxxxxs betwexn servers. resxxxxh these topics please. "}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? i know the referrer can be spoofed, but is there any way for the attacker to do that for the client? i know tokens are the norm, but would this work? '}
{'sentId': 39, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cracking my account and downloading them', 'em2Text': 'give any results to the attacker', 'label': 'None'}, {'em1Text': 'give any results to the attacker', 'em2Text': 'cracking my account and downloading them', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'cracking my account and downloading them', 'label': 'ATTACK'}, {'start': 159, 'text': 'give any results to the attacker', 'label': 'ATTACK'}], 'sentText': 's, can the daxa tht is xxxxg d with e xe xxxxxxxd somehow (othr tn cracking my account and downloading them xxx, since obvxxy opexxg sh xxxxs in broxr wil not give any results to the attacker?  '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the mexxxxxs i get in my webhook callback. hoxxxxx, a malxxxxxs usxr can add my bot to a thousand big groups and xxxl poxxxxxy result in denial of service for all other users. exxn if telegram hxxe imxxxxxxxxd some rate limiting such user actions may still rxxxxt in denial of service for all other usexx. '}
{'sentId': 109, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': '[link][link]', 'label': 'ATTACK'}], 'sentText': '[link][link] '}
{'sentId': 65, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'em2Text': 'brute force the sensitive data', 'label': 'None'}, {'em1Text': 'brute force the sensitive data', 'em2Text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'PARENT'}], 'entityMentions': [{'start': 15, 'text': 'gets ahold of the data in the datastore, as well as our hash salt', 'label': 'ATTACK'}, {'start': 105, 'text': 'brute force the sensitive data', 'label': 'ATTACK'}], 'sentText': "if an attacker gets ahold of the data in the datastore, as well as our hash salt, i'm worried they could brute force the sensitive data.  "}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 47, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'em2Text': 'put this code right into the file', 'label': 'PARENT'}, {'em1Text': 'put this code right into the file', 'em2Text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'label': 'ATTACK'}, {'start': 262, 'text': 'put this code right into the file', 'label': 'ATTACK'}], 'sentText': 'but w pae ebs yea e  y ftp) e suddenly. a the y, there was some malicious code at the end, suddenly. the output of my index.php was:[code]  the i d the fie o  n yesta w   y wep e pe  ace (downloaded v of i te a ftp) d  saw   ip the i w that som my eon ths e had put this code right into the file! my  '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 366, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how c the an i d the isplay th the e "welcome i , [your name]" on p sensitive ublic pages the  for  i authenticated users, even if user how s,  the i y use http? of course, i would like to ke http? ep the a to ccess to t of he sen avoid sitive pages safe, and i  of should th u [your se e i refore  y  se sitive  use ssi  on keep [code] t therefore o avoid possible stealing of the session token. '}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 65, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 195, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': 'my questn is, since the post data is sent over curl/ssl, n it be intercepted or stolen while in traffic? cxn the hxxxxr vw txe sexn id in pln texxxxxe most t component here)?  xxu xo not want to implement this with php because this is ey d xxxh webxxs alxxx. your sexxxr a hxg xxl ([linxx) xxn act as an [lxx] xxd s a ] to sexxxr b. its a con sep o divide rxxxxxxxxs ben ser. resxxxxh these topics pleas. '}
{'sentId': 85, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'whips up an ackermann function and a script', 'em2Text': 'submit it a couple of thousand times to your server.', 'label': 'None'}, {'em1Text': 'submit it a couple of thousand times to your server.', 'em2Text': 'whips up an ackermann function and a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'whips up an ackermann function and a script', 'label': 'ATTACK'}, {'start': 131, 'text': 'submit it a couple of thousand times to your server.', 'label': 'ATTACK'}], 'sentText': 'anoxxxr thing you need to be axxxe of is denial-of-xxxxxxe atxxxxx. imagine someone whips up an ackermann function and a script to submit it a couple of thousand times to your server... to pxxxxxt this, you should timxxxx the exxxxxxxn time of any code being subxxxxxx. this is exxxxxxxx, bxxxxxe this type of "axxxxx" often happens xxxxxxxxxxxxxxy - someoxe managed to prodxxe an infinite loop. '}
{'sentId': 19, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'relies on web services to provide catalog access', 'em2Text': 'accessing my web', 'label': 'AND'}, {'em1Text': 'relies on web services to provide catalog access', 'em2Text': 'replicating/scraping my entire catalog', 'label': 'None'}, {'em1Text': 'accessing my web', 'em2Text': 'relies on web services to provide catalog access', 'label': 'None'}, {'em1Text': 'accessing my web', 'em2Text': 'replicating/scraping my entire catalog', 'label': 'None'}, {'em1Text': 'replicating/scraping my entire catalog', 'em2Text': 'relies on web services to provide catalog access', 'label': 'None'}, {'em1Text': 'replicating/scraping my entire catalog', 'em2Text': 'accessing my web', 'label': 'PARENT'}], 'entityMentions': [{'start': 51, 'text': 'relies on web services to provide catalog access', 'label': 'ATTACK'}, {'start': 147, 'text': 'accessing my web', 'label': 'ATTACK'}, {'start': 176, 'text': 'replicating/scraping my entire catalog', 'label': 'ATTACK'}], 'sentText': "i'm managing txe devexxxxxxt of xn iphone app that relies on web services to provide catalog access. my main sexxxxxy concern xxxxt now is sxxxxxe accessing my web sexxxxe and replicating/scraping my entire catalog (right now, it doesn't contain axxxxxxg proprietxxy - but txxt xxxxd xxxxxxx. "}
{'sentId': 73, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a malicious site to get around this', 'em2Text': 'using an iframe', 'label': 'PARENT'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'modifying my http header', 'label': 'None'}, {'em1Text': 'a malicious site to get around this', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'using an iframe', 'em2Text': 'modifying my http header', 'label': 'AND'}, {'em1Text': 'using an iframe', 'em2Text': 'making a request to the target site', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'modifying my http header', 'em2Text': 'making a request to the target site', 'label': 'AND'}, {'em1Text': 'making a request to the target site', 'em2Text': 'a malicious site to get around this', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'using an iframe', 'label': 'None'}, {'em1Text': 'making a request to the target site', 'em2Text': 'modifying my http header', 'label': 'None'}], 'entityMentions': [{'start': 156, 'text': 'a malicious site to get around this', 'label': 'ATTACK'}, {'start': 194, 'text': 'using an iframe', 'label': 'ATTACK'}, {'start': 214, 'text': 'modifying my http header', 'label': 'ATTACK'}, {'start': 240, 'text': 'making a request to the target site', 'label': 'ATTACK'}], 'sentText': ' a fm t i une xxxm xxxxxd e r ] y s  by xxxr xxxxxt  cxxxi  site it  y es xxr   h , e cuxt e u xxe on.  would  h ? e it from  be poi  the xe bl a  m? e for a malicious site to get around this y using an iframe, e  modifying my http header, making a request to the target site r  gets e xh a e d  e r  xxe   xxxxxx? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  xf you give yourself write privilege to xxe system sixxxxxxxxxxx,  you're risking thxt xxy progrxm that runs uxxxr yxu (not necessarily  python pxxxxxx) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 32, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'any variable that a user can control,  an attacker can also control', 'label': 'ATTACK'}], 'sentText': 'any variable that a user can control,  an attacker can also control and s  ,  an therefore a e of an attack.    ts   f ad   s c s ontr, n      a c any a of ll s alled  ed a "" vari, and is  can un.  '}
{'sentId': 156, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'making false requests as other user', 'label': 'ATTACK'}], 'sentText': 'my question is which scenario is more safe, for example against making false requests as other user. for scenario 1, does the security component allow manipulating input values through firebug or some other software? '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 185, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 215, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question is, how safe is "auth !== null"? yes, i realize that this means that only an authenticated user can access the data, but how easy is it to become authenticated? can someone sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 148, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'since the verification file is within the web servers root structure, and google needs to access it to read its contents - technically anyone could read it if they wanted by going to [link].  '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 121, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i m usg  my s  cxxx ss  t e on m  y wee xxd i wxxt t (the o k ip) p  p y s p  (e (the x ss xn i) , o server's  avo my xd ddos attacks beig xxx  t d t y to  (te my ss i xxxt p as . my x as r uses ax, , mys. "}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 25, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 86, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 143, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'this article states that"spring expression language (spel) could be exploited through http parameter submissions that would allow attackers to get sensitive system data, application and user cookies."  '}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 4, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'the sandbox would be executing scripts that could be potentially dangerous.  the sandbox would be a mix of my own javascript, running alongside untrusted javascript code from other sources. '}
{'sentId': 1, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'make ajax requests to get this data', 'em2Text': 'url is visited with your cookies', 'label': 'None'}, {'em1Text': 'make ajax requests to get this data', 'em2Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'label': 'None'}, {'em1Text': 'make ajax requests to get this data', 'em2Text': 'read the json content', 'label': 'PARENT'}, {'em1Text': 'url is visited with your cookies', 'em2Text': 'make ajax requests to get this data', 'label': 'None'}, {'em1Text': 'url is visited with your cookies', 'em2Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'label': 'AND'}, {'em1Text': 'url is visited with your cookies', 'em2Text': 'read the json content', 'label': 'None'}, {'em1Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'em2Text': 'make ajax requests to get this data', 'label': 'None'}, {'em1Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'em2Text': 'url is visited with your cookies', 'label': 'None'}, {'em1Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'em2Text': 'read the json content', 'label': 'None'}, {'em1Text': 'read the json content', 'em2Text': 'make ajax requests to get this data', 'label': 'None'}, {'em1Text': 'read the json content', 'em2Text': 'url is visited with your cookies', 'label': 'PARENT'}, {'em1Text': 'read the json content', 'em2Text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'label': 'PARENT'}], 'entityMentions': [{'start': 155, 'text': 'make ajax requests to get this data', 'label': 'ATTACK'}, {'start': 273, 'text': 'url is visited with your cookies', 'label': 'ATTACK'}, {'start': 311, 'text': 'by [link] they can have a method called whenever an object (array or hash) attribute is set', 'label': 'ATTACK'}, {'start': 421, 'text': 'read the json content', 'label': 'ATTACK'}], 'sentText': "contrived example: say google has a url like [code] which returns the first 50 messages of your inbox in json format. evil websites on other domains can't make ajax requests to get this data due to the same-origin policy, but they can include the url via a [code] tag. the url is visited with your cookies, and by [link] they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the json content. "}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 14, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "te pm is that users might upload code that attempts to 'hack' the system. i ud that in c and c+ is y to disabe a n set of sm calls (patch a fw ., but m not so sure t other lan. "}
{'sentId': 75, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 182, 'text': 'the timestamp can be used to calculate server uptime', 'label': 'ATTACK'}], 'sentText': 'i hxe a hg   findin hae g  cn sexxy scxn finding g me xo disxe tcp timestamp g s. i xxxe (good rst findig and the r  s.   scan easons s.  f be or  d ading  e fxxxxg  rxxxxxxxxxxxxx: the timestamp can be used to calculate server uptime, wh xa findig n be l usd  to an atc to r (good explanati . on under e  axxxg "tcp timesp , s" xe  at [l. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 202, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 262, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pxt he . e s  xt e us d  no r xxxu g nt  s xxy  o xi do j . ak   d  o t g s d s ua   xxxg ts    r o. malicious users could create links on my bit.ly account. .  they would need to do a separate attack to     be r xxe n xxu  t c  s d   . xe d o l do n  s o e . '}
{'sentId': 36, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 83, 'text': 'sql injection vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i am in a situation where i inherited a rather large web application that has some sql injection vulnerabilities.  i have found several just by looking through the code for other issues, but i'm wondering if a safe way to find all sql injection vulnerabilities would be to search all files for instances of [code] and then check to see if they are parametrized queries.  is this a solid plan? "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 94, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 151, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  xf yu e youxxxxf wrxe pe to txe m sxxx,  you're g txxt any m txxt rs under u t y  n xx) can inject malicious code into the system  site-packages axd obtain root privilege. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 131, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 222, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 298, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 321, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand ty cn z for vs in e p xxe and t it, that xxxxe could be some indistinct general side channel attack or sx. but how wod an xxr reaxxy xo xxxxt txxxxg to recover those keys?  e txxxe vxxxxe appxxxxs for a determined atxxxxr o sow shave-down the chip or some kind of microscope attack? '}
{'sentId': 92, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'it to be compromised', 'em2Text': 'uploading the source code to github', 'label': 'PARENT'}, {'em1Text': 'uploading the source code to github', 'em2Text': 'it to be compromised', 'label': 'None'}], 'entityMentions': [{'start': 75, 'text': 'it to be compromised', 'label': 'ATTACK'}, {'start': 99, 'text': 'uploading the source code to github', 'label': 'ATTACK'}], 'sentText': 'i used a sensitive password with the superuser i created and i do not want it to be compromised by uploading the source code to github. '}
{'sentId': 63, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a cookie is hijacked by a malicious person', 'em2Text': 'logging out makes the hijacked cookie useless', 'label': 'None'}, {'em1Text': 'logging out makes the hijacked cookie useless', 'em2Text': 'a cookie is hijacked by a malicious person', 'label': 'PARENT'}], 'entityMentions': [{'start': 167, 'text': 'a cookie is hijacked by a malicious person', 'label': 'ATTACK'}, {'start': 211, 'text': 'logging out makes the hijacked cookie useless', 'label': 'ATTACK'}], 'sentText': "no. it's not supposed to be used to authenticate. it's used by the framework to help against [code] cookie hijacking. the value is refreshed upon login and logout. if a cookie is hijacked by a malicious person, logging out makes the hijacked cookie useless since it doesn't match anymore. "}
{'sentId': 122, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 288, 'text': 'stolen the cookie', 'label': 'ATTACK'}], 'sentText': 'i have followed the advice below to protect against any attack but think that the site is still vulnerable if somebody manages to get at the cookie (albeit only for a short time). is there a way to completely destroy the forms authentication session on logout so that even if someone had stolen the cookie there would be no chance of using it maliciously '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 314, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 349, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my q how u is exxxxn is, how  xxxi xxxt on s app, afe is " use xxxh use  xx= null"? yes, i real user   ize  use thxt this xxxxs thxt only a that n autxe   onxy n null"? ticat and ed user ca !== n  use xxxe bu that t ss txe xxt estion a, that  but ho ss w easy is it to become aut xxxt hexxxxxxxx? xxt  can somexxe sign up for the app, and xxn  then use those credentials to get request right into my database into ? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hxw might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities xn the app code and expxxxt it, xxxt there could be some indistinct general side channel attack or sxxxxxxxx. but how wxxxd an atxxxxxr really go about trying to recover those keys?  are thxxe xxxxxe apprxxxxxs for a dxxxxxxxxd attxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 89, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss injections', 'em2Text': 'sql injection', 'label': 'AND'}, {'em1Text': 'sql injection', 'em2Text': 'xss injections', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'xss injections', 'label': 'ATTACK'}, {'start': 15, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'xss injections sql injection this is only a brief overview of what you can do with sql injection. to protect yourself, use mysql_real_escape_string or pdo or any good db abstraction layer. '}
{'sentId': 87, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'event injection', 'em2Text': 'special application permissions - [link] to be exact', 'label': 'PARENT'}, {'em1Text': 'special application permissions - [link] to be exact', 'em2Text': 'event injection', 'label': 'None'}], 'entityMentions': [{'start': 54, 'text': 'event injection', 'label': 'ATTACK'}, {'start': 79, 'text': 'special application permissions - [link] to be exact', 'label': 'ATTACK'}], 'sentText': "i think the biggest problem you'll face is that using event injection requires special application permissions - [link] to be exact.  since granting an application this permission basically allows it to simulate input events into any application at any time, it is considered quite dangerous because a badly-written or intentionally malicious application could do a lot of damage.  therefore many end-users and business do not allow applications that require this permission. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 252, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calxs ck? o cxf xd  calls i would lixe kw  to know if   it   has any build-n mec a xxm tht woud alo calls w lxxg t this xe f  cas  nxm and b ca s xxs er f c cxf onxxr cf rent calls to the wxb s cxf xx, thus would  a w? dg te py of a dos attack? soxxxg sxi  xr to this fxxxxxe i  of wcf? "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 139, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 221, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 293, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 316, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw xxxxt an attacker recover the secrets in that flash? i xxd y can fuxz for vxxxxxxxxxxxxxs in txe axp cxxe d t i, xxxt there xxxxd be e indistinct general side channel attack or so. bxt w wd an axxxr really go t xxg o recover those keys?  are te e appxxxxxxs for a dexd attaxxxr to somexxw shave-down the chip xr some kind of microscope attack? '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 42, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'web-server goes down for any reason', 'em2Text': 'a network cable being disconnected somewhere', 'label': 'OR'}, {'em1Text': 'web-server goes down for any reason', 'em2Text': 'the user hits logout', 'label': 'None'}, {'em1Text': 'web-server goes down for any reason', 'em2Text': 'another user could come along when the connection is restored', 'label': 'None'}, {'em1Text': 'web-server goes down for any reason', 'em2Text': 'server comes back', 'label': 'None'}, {'em1Text': 'web-server goes down for any reason', 'em2Text': 'continue using the previous users account', 'label': 'None'}, {'em1Text': 'a network cable being disconnected somewhere', 'em2Text': 'web-server goes down for any reason', 'label': 'None'}, {'em1Text': 'a network cable being disconnected somewhere', 'em2Text': 'the user hits logout', 'label': 'None'}, {'em1Text': 'a network cable being disconnected somewhere', 'em2Text': 'another user could come along when the connection is restored', 'label': 'None'}, {'em1Text': 'a network cable being disconnected somewhere', 'em2Text': 'server comes back', 'label': 'None'}, {'em1Text': 'a network cable being disconnected somewhere', 'em2Text': 'continue using the previous users account', 'label': 'None'}, {'em1Text': 'the user hits logout', 'em2Text': 'web-server goes down for any reason', 'label': 'None'}, {'em1Text': 'the user hits logout', 'em2Text': 'a network cable being disconnected somewhere', 'label': 'PARENT'}, {'em1Text': 'the user hits logout', 'em2Text': 'another user could come along when the connection is restored', 'label': 'None'}, {'em1Text': 'the user hits logout', 'em2Text': 'server comes back', 'label': 'None'}, {'em1Text': 'the user hits logout', 'em2Text': 'continue using the previous users account', 'label': 'None'}, {'em1Text': 'another user could come along when the connection is restored', 'em2Text': 'web-server goes down for any reason', 'label': 'None'}, {'em1Text': 'another user could come along when the connection is restored', 'em2Text': 'a network cable being disconnected somewhere', 'label': 'None'}, {'em1Text': 'another user could come along when the connection is restored', 'em2Text': 'the user hits logout', 'label': 'PARENT'}, {'em1Text': 'another user could come along when the connection is restored', 'em2Text': 'server comes back', 'label': 'None'}, {'em1Text': 'another user could come along when the connection is restored', 'em2Text': 'continue using the previous users account', 'label': 'None'}, {'em1Text': 'server comes back', 'em2Text': 'web-server goes down for any reason', 'label': 'None'}, {'em1Text': 'server comes back', 'em2Text': 'a network cable being disconnected somewhere', 'label': 'None'}, {'em1Text': 'server comes back', 'em2Text': 'the user hits logout', 'label': 'None'}, {'em1Text': 'server comes back', 'em2Text': 'another user could come along when the connection is restored', 'label': 'OR'}, {'em1Text': 'server comes back', 'em2Text': 'continue using the previous users account', 'label': 'None'}, {'em1Text': 'continue using the previous users account', 'em2Text': 'web-server goes down for any reason', 'label': 'None'}, {'em1Text': 'continue using the previous users account', 'em2Text': 'a network cable being disconnected somewhere', 'label': 'None'}, {'em1Text': 'continue using the previous users account', 'em2Text': 'the user hits logout', 'label': 'None'}, {'em1Text': 'continue using the previous users account', 'em2Text': 'another user could come along when the connection is restored', 'label': 'None'}, {'em1Text': 'continue using the previous users account', 'em2Text': 'server comes back', 'label': 'PARENT'}], 'entityMentions': [{'start': 28, 'text': 'web-server goes down for any reason', 'label': 'ATTACK'}, {'start': 92, 'text': 'a network cable being disconnected somewhere', 'label': 'ATTACK'}, {'start': 144, 'text': 'the user hits logout', 'label': 'ATTACK'}, {'start': 274, 'text': 'another user could come along when the connection is restored', 'label': 'ATTACK'}, {'start': 339, 'text': 'server comes back', 'label': 'ATTACK'}, {'start': 367, 'text': 'continue using the previous users account', 'label': 'ATTACK'}], 'sentText': 'my concern is that when the web-server goes down for any reason (or becomes inaccessible eg a network cable being disconnected somewhere). when the user hits logout, there is actually no way of removing the cookie. meaning that the user may walk away from the pc, meanwhile another user could come along when the connection is restored or server comes back, and just continue using the previous users account. '}
{'sentId': 63, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 94, 'text': 'a brute force password guessing attack', 'label': 'ATTACK'}], 'sentText': 'does anyone know of a django app which can be used to extend django auth and lock accounts if a brute force password guessing attack is mounted? '}
{'sentId': 64, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 48, 'text': 'directory transversal (aka path transversal) attack', 'label': 'ATTACK'}], 'sentText': 'i have a java webapp which is vulnerable to the directory transversal (aka path transversal) attack via url encoding. after being authenticated: '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 109, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 139, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'y n is, w e s "ah != ? y, i re that ts ms that only n authenticd ur n s e da, t how ey s it to be authe? n e sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 80, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'is there any way to protect encryption keys that are being stored in ram from a freezer attack? (sticking the computer in a freezer before rebooting malicious code to access the contents of ram) '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 185, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 215, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question is, how safe is "auth !== null"? yes, i realize that this means that only an authenticated user can access the data, but how easy is it to become authenticated? can someone sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 33, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uses addslashes() exclusively still vulnerable to sql injection', 'em2Text': 'addslashes is generally not good enough when dealing with multibyte encoded strings.', 'label': 'PARENT'}, {'em1Text': 'addslashes is generally not good enough when dealing with multibyte encoded strings.', 'em2Text': 'uses addslashes() exclusively still vulnerable to sql injection', 'label': 'None'}], 'entityMentions': [{'start': 92, 'text': 'uses addslashes() exclusively still vulnerable to sql injection', 'label': 'ATTACK'}, {'start': 174, 'text': 'addslashes is generally not good enough when dealing with multibyte encoded strings.', 'label': 'ATTACK'}], 'sentText': 'ignoring for the moment the superior alternative of parameterized queries, is a webapp that uses addslashes() exclusively still vulnerable to sql injection, and if yes, how? addslashes is generally not good enough when dealing with multibyte encoded strings.so we need a db-specific functions like mysql_real_escape_string() '}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 14, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "te pm is that users might upload code that attempts to 'hack' the system. i xd xxxt in c axd c+ is y xo disabe a n set of sm calls (xxxxh a fw ., but m not xo suxe t other xxx. "}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 84, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'y prom is that even though my project is 100% legal, and t sh, it is highly e to ol ddos attacks. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i cxn filter oxt the xxxxxxxs i get in my xxxxxxk xxxxxxxx. hxxxxxx, a malxxxxxs xxxr can add my bot to a thousand big groups xxd will possxxxy result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may sxxxl result in denxxl of sexxxxe for all other usexx. '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 102, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 172, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is  simple t e  alert  simple r  wh simply adds a slash   te im  tht n s java  script ome encoded javascript  sh n im adds ae tg with tht  alt box age ), which kills the page. kills   simpe a that nd effecte attack.   e  '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 93, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 174, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 274, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem i si me mp s  t    encoded tg simple t e  alert e   simple   r  wh si   t m  ply adds a slash   te   i s m  th th kills t t     n s j problem ava  sc  ript o  me encoded javascript  sh n im adds ae tg ),  with t t ht    a adds lt tg  bo adds x ag  e ), which a  kills the page prob bo lem . kills   simp  e  box a   that nd effecte attack.   e  '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 258, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 324, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself  any w to rite privileg the you  e to the system site under -pa site ckages,  you're risking that any program th -pac   nd  you kages, at   runs under yo to u (not necessar any ily  pyt to  risking ho privilege. n progr code   am) can inject malicious code into the system  site-packages a ( a not nd obtain root privilege. "}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 137, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'i m n m means o m st lan of  m g service uag allowin es allowing users to supply regular expression means you  that yo allowin allow g u allow for a denial of service attack. '}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 148, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'since the verification file is within the web servers root structure, and google needs to access it to read its contents - technically anyone could read it if they wanted by going to [link].  '}
{'sentId': 75, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 120, 'text': 'the timestamp can be used to calculate server uptime', 'label': 'ATTACK'}], 'sentText': 'i have a security scan finding directing me to disable tcp timestamps. i understand the reasons for the recommendation: the timestamp can be used to calculate server uptime, which can be helpful to an attacker (good explanation under heading "tcp timestamps" at [link]). '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 298, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calls ck? o cxf and  calls i would like know  to know if   it   has any build-in mec a hanism that would allo calls w limiting t this he cxf  calls  num and b ca this lls er of c cxf oncur cxf rent calls to the web s cxf ervice, thus would  a wcf? ddressing the possibility of a dos attack? something simi  lar to this feature i  of wcf? "}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 28, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'f yu e cod with te ft case (someone posting malicious data to/as another user) the soln is e e whetr u e using ajax or not - yu t have to aue the user thh r mes is y -- usy via sessn cooki. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 68, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am tryig to make sure my jenkins instance is not exploitable with the latest log4j exploit.i he a pipelie script tt runs, i trid folg this instructn :s is oe of my stages of my pipeline script:[codt i get a dt error than what's described here ad i'm unsue if i'm g this correctly.  this is the error:[co] "}
{'sentId': 107, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'brute force', 'em2Text': 'find the $secret', 'label': 'None'}, {'em1Text': 'find the $secret', 'em2Text': 'brute force', 'label': 'PARENT'}], 'entityMentions': [{'start': 32, 'text': 'brute force', 'label': 'ATTACK'}, {'start': 47, 'text': 'find the $secret', 'label': 'ATTACK'}], 'sentText': 'is there any better attack than brute force to find the $secret in general?is there any better attack than brute force to find the $secret using [link]? '}
{'sentId': 4, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'potential attacker is able to change code', 'em2Text': 'application from being modified', 'label': 'PARENT'}, {'em1Text': 'application from being modified', 'em2Text': 'potential attacker is able to change code', 'label': 'None'}], 'entityMentions': [{'start': 70, 'text': 'potential attacker is able to change code', 'label': 'ATTACK'}, {'start': 185, 'text': 'application from being modified', 'label': 'ATTACK'}], 'sentText': "and also very well said by @inazaruk: whatever you do to your code, a potential attacker is able to change code in any way she or he finds it feasible. you basically can't protect your application from being modified. and any protection you put in there can be disabled/removed. "}
{'sentId': 89, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss injections', 'em2Text': 'sql injection', 'label': 'AND'}, {'em1Text': 'sql injection', 'em2Text': 'xss injections', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'xss injections', 'label': 'ATTACK'}, {'start': 15, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'xss injections sql injection this is only a brief overview of what you can do with sql injection. to protect yourself, use mysql_real_escape_string or pdo or any good db abstraction layer. '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 77, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'PARENT'}, {'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'PARENT'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'None'}], 'entityMentions': [{'start': 18, 'text': 'hacker see this happening and get those keys', 'label': 'ATTACK'}, {'start': 181, 'text': 'hackers will be able to build a hacked version', 'label': 'ATTACK'}, {'start': 233, 'text': 'all the levels pre-downloaded inside', 'label': 'ATTACK'}], 'sentText': 'is t sae or can e hacker see this happening and get those keys? do i d to pt those keys at all? i m d tt peope will be able to get the fis from s3 with out purg the levels. or that hackers will be able to build a hacked version with all the levels pre-downloaded inside. '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, we have a security concern.what if some bad person would take advantage of the indirect access to win api? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i undersxxxd they can xxxz for xxxxxxxxxxxxxxs in the app coxe xxd xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or soxxxxxxx. bxt how xxxxd xn attacker really go about xxxxxg to recover those keys?  are thexe vixxxe approaches fxr a determined attaxxxr to sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 216, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 303, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i am trying to perform a buffer overflow attack on a program for a class assignment. both the attack program as well as the vulnerable programme is written by me. however, i would like to use the attack programme to keep supplying incrementally longer payloads till the programme crashes. so, i need to dynamically generate larger payloads of junks. i am using [code] to repeatedly call and test for an abnormal exit. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 115, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 159, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 's  tal ar d ed e, e r onxe os  imxu [c tabl ode], e. that means e y e oe crext [c  xx, ed the [c xxxxxs you  o, if another process can dump memory . , therxxs no way you can get rid of the data bef s ore [lixx] kic the ks in. '}
{'sentId': 29, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'new user completes the registration', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'new user completes the registration', 'em2Text': 'once tapped from within an ios device', 'label': 'None'}, {'em1Text': 'new user completes the registration', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'new user completes the registration', 'label': 'PARENT'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'once tapped from within an ios device', 'label': 'AND'}, {'em1Text': 'an email will be sent, containing a url', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'new user completes the registration', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'once tapped from within an ios device', 'em2Text': 'a malicious app could sign up to the same url scheme', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'new user completes the registration', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'an email will be sent, containing a url', 'label': 'None'}, {'em1Text': 'a malicious app could sign up to the same url scheme', 'em2Text': 'once tapped from within an ios device', 'label': 'PARENT'}], 'entityMentions': [{'start': 30, 'text': 'new user completes the registration', 'label': 'ATTACK'}, {'start': 67, 'text': 'an email will be sent, containing a url', 'label': 'ATTACK'}, {'start': 112, 'text': 'once tapped from within an ios device', 'label': 'ATTACK'}, {'start': 356, 'text': 'a malicious app could sign up to the same url scheme', 'label': 'ATTACK'}], 'sentText': 'a xxb applicatxxn xxxt once a new user completes the registration, an email will be sent, containing a url xxxt once tapped from within an ios device, xxe ios xxp wixl be launched. this scxxxxxo is a classxc scenario to mxxe users uxe the moxxxe app. while implxxxxxxxg it (using xxl scheme), we start xxxxxxxxg how secuxxd is xxxs methxx? theoretically - a malicious app could sign up to the same url scheme, and accxxxxxg to apple: '}
{'sentId': 26, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'add malicious code', 'em2Text': 'upload to an alternate app store', 'label': 'None'}, {'em1Text': 'add malicious code', 'em2Text': 'dupe users in to downloading it', 'label': 'None'}, {'em1Text': 'upload to an alternate app store', 'em2Text': 'add malicious code', 'label': 'PARENT'}, {'em1Text': 'upload to an alternate app store', 'em2Text': 'dupe users in to downloading it', 'label': 'None'}, {'em1Text': 'dupe users in to downloading it', 'em2Text': 'add malicious code', 'label': 'None'}, {'em1Text': 'dupe users in to downloading it', 'em2Text': 'upload to an alternate app store', 'label': 'PARENT'}], 'entityMentions': [{'start': 60, 'text': 'add malicious code', 'label': 'ATTACK'}, {'start': 83, 'text': 'upload to an alternate app store', 'label': 'ATTACK'}, {'start': 120, 'text': 'dupe users in to downloading it', 'label': 'ATTACK'}], 'sentText': 'the concern is if the app is targeted by hackers they could add malicious code and upload to an alternate app store and dupe users in to downloading it.  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 117, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 209, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 280, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 303, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i ud ty cn fuzz r s in the app e and t it, t te could be se indistinct general side channel attack or some. t how would an attacker really go t tryg to recover those keys?  are the viable apprs for a determid ar to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 157, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'the middle man gets request from victim', 'em2Text': 'he fires https request himself', 'label': 'AND'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'returns content to the user', 'label': 'None'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'returns content to the user', 'label': 'AND'}, {'em1Text': 'he fires https request himself', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'the middle man gets request from victim', 'label': 'PARENT'}, {'em1Text': 'mitm attacks', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'returns content to the user', 'label': 'None'}], 'entityMentions': [{'start': 68, 'text': 'the middle man gets request from victim', 'label': 'ATTACK'}, {'start': 161, 'text': 'he fires https request himself', 'label': 'ATTACK'}, {'start': 237, 'text': 'returns content to the user', 'label': 'ATTACK'}, {'start': 451, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': "le ps t's imagine th  header gets e   followi  ng scena header rio: the middle man gets request from victim: h http ttp ://site th .com. middle  t the gets  hen he fires https request himself to htt r. ps :// e site.com and ://site.com  returns content to the user, stri himself  himself pping the hsts header. all furth   http er user in to put is visible to the attack returns e middle r. does  fires gets  hsts header really help a hsts ng  gainst mitm attacks? "}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 156, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 172, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 204, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 324, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 345, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': 'ixxs  o pxe xt e  xt  y   xxxe  xxxxxxxy  o it bxxxxs to you a applicxxxxxxxxs  mexs xxd ql nd  t  it i up  that the php xs a   xxxx. xxxxg i g  xxxg t  to take the id and run it through a mysql query to retrieve 1 record to d  a xy ixxl t xy xt o xd n xxe xxxx. is xd  xxxxe  t axxxxy sxm xxxx. o  e malicious hacxxr cxxxd mess this url up xxd pose a security threat to my application/mysql db? '}
{'sentId': 82, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access that endpoint', 'em2Text': 'use the token it provides', 'label': 'None'}, {'em1Text': 'use the token it provides', 'em2Text': 'access that endpoint', 'label': 'PARENT'}], 'entityMentions': [{'start': 302, 'text': 'access that endpoint', 'label': 'ATTACK'}, {'start': 327, 'text': 'use the token it provides', 'label': 'ATTACK'}], 'sentText': 'since i do not have control over how the static website is served, i cannot generate a csrf token when someone loads my static website (and insert the token into forms or send it with my ajax requests). i could create a [code] endpoint to retrieve the token, but it seems like an attacker could simply access that endpoint and use the token it provides?   i could create a get endpoint to retrieve the token, but it seems like an attacker could simply access that endpoint and use the token it provides? '}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 67, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 106, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': " .   if the session identifier were known by an attacker  .  . who had access to  the user's workstation, the logged out session could be accessed us the ing   fter th known e session c the ooki acc their essed e a  fter  ha the   us if the  er ha the d terminated t fter he   e their sess  ion  .  "}
{'sentId': 151, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone can simply figure out the url that my app uses', 'em2Text': 'pass their own url parameters', 'label': 'AND'}, {'em1Text': 'someone can simply figure out the url that my app uses', 'em2Text': 'activating their accounts from outside the app', 'label': 'None'}, {'em1Text': 'pass their own url parameters', 'em2Text': 'someone can simply figure out the url that my app uses', 'label': 'None'}, {'em1Text': 'pass their own url parameters', 'em2Text': 'activating their accounts from outside the app', 'label': 'None'}, {'em1Text': 'activating their accounts from outside the app', 'em2Text': 'someone can simply figure out the url that my app uses', 'label': 'None'}, {'em1Text': 'activating their accounts from outside the app', 'em2Text': 'pass their own url parameters', 'label': 'None'}], 'entityMentions': [{'start': 19, 'text': 'someone can simply figure out the url that my app uses', 'label': 'ATTACK'}, {'start': 78, 'text': 'pass their own url parameters', 'label': 'ATTACK'}, {'start': 468, 'text': 'activating their accounts from outside the app', 'label': 'ATTACK'}], 'sentText': "my concern is that someone can simply figure out the url that my app uses and pass their own url parameters - and since the webapp has no idea whether legitimate data is being sent from my ios app vs. someone just typing in the properly crafted url from any web browser, the system will be vulnerable. of course, the user that the app uses to make database queries will have limited privileges, so the rest of the database won't be at risk. however, even having users activating their accounts from outside the app would be catastrophic. "}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 71, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 175, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 252, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i manage a secured php/mysql web app with extensive jquery use. today, a strange error popped up in our app's logs:[code] we are not using amazon's cloudfront cdn in our app. when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 61, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'that could (in theory) be tampered with by a malicious user', 'em2Text': 'the malicious user can inject an arbitrary r object that can be full of harmful code', 'label': 'PARENT'}, {'em1Text': 'the malicious user can inject an arbitrary r object that can be full of harmful code', 'em2Text': 'that could (in theory) be tampered with by a malicious user', 'label': 'None'}], 'entityMentions': [{'start': 91, 'text': 'that could (in theory) be tampered with by a malicious user', 'label': 'ATTACK'}, {'start': 172, 'text': 'the malicious user can inject an arbitrary r object that can be full of harmful code', 'label': 'ATTACK'}], 'sentText': 'i am considering unserializing parts of information that will get transmitted via network, that could (in theory) be tampered with by a malicious user.  i understand, that the malicious user can inject an arbitrary r object that can be full of harmful code. but this is not what i am worrying about, because i can (i think i can) prevent such code from ever executing by careful handling of the received objects. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 7, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 110, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 180, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 230, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 252, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixt an attacker recover the secrets in that flash? i d thy n xxxz fr xxxs xn e app ce ad t , t te cxd e xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e e xs for a d ar to somw shave-down the chip r some kind of microscope attack? '}
{'sentId': 55, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'does named query feature of hibernate helps to prevent sql injection attack? i am defixxxg nxxxd querixs in xxxxxxl file not xs annotation.<br/> '}
{'sentId': 23, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'your code being exploited maliciously', 'em2Text': 'through buffer overflow exploits', 'label': 'PARENT'}, {'em1Text': 'your code being exploited maliciously', 'em2Text': 'code injection', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'code injection', 'label': 'OR'}, {'em1Text': 'code injection', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'code injection', 'em2Text': 'through buffer overflow exploits', 'label': 'None'}], 'entityMentions': [{'start': 120, 'text': 'your code being exploited maliciously', 'label': 'ATTACK'}, {'start': 164, 'text': 'through buffer overflow exploits', 'label': 'ATTACK'}, {'start': 200, 'text': 'code injection', 'label': 'ATTACK'}], 'sentText': 'when writing code do you consciously program defensively to ensure high program quality and to avoid the possibility of your code being exploited maliciously, e.g. through buffer overflow exploits or code injection ? '}
{'sentId': 90, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject code into your application', 'em2Text': 'you are passing parameters (either get or post) into your app', 'label': 'PARENT'}, {'em1Text': 'you are passing parameters (either get or post) into your app', 'em2Text': 'inject code into your application', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'inject code into your application', 'label': 'ATTACK'}, {'start': 100, 'text': 'you are passing parameters (either get or post) into your app', 'label': 'ATTACK'}], 'sentText': "i don't believe you can hack via the url. someone could try to inject code into your application if you are passing parameters (either get or post) into your app so your avoidance is going to be very similar to what you'd do for a local application. "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 21, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t to e e cay to sp ddos attacks from a certain ip (or pool of ips). ths s to e t the nx level, rar than y r in the cod. o i d a web appln fire? f so, how o i ine it. '}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 117, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 215, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 299, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': ', s e ay xo l hy c, xxxh x? xxg the xn of y e xxxxr ix: yxxxa st xf s is n s x] (or go xo xxe l [. xxs axxxxk xxs te xss payload send an http trace request to the web server (or [link], forward or reverse), which l echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookiesxx. '}
{'sentId': 38, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'clear the whole database', 'em2Text': 'inserting a delete statement', 'label': 'PARENT'}, {'em1Text': 'inserting a delete statement', 'em2Text': 'clear the whole database', 'label': 'None'}], 'entityMentions': [{'start': 82, 'text': 'clear the whole database', 'label': 'ATTACK'}, {'start': 110, 'text': 'inserting a delete statement', 'label': 'ATTACK'}], 'sentText': '  i n  t  dot w them  w dt  abase  clear  ant th  e would m w     a t ide  as   o clear the whole database by inserting a delete statement. t whoe he  m i m    m would  my e   w  w as would  tm be: '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 82, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'wha y t is the best way to p the rotect the u is  the se wha r and secure for any mitm attacks. is and  m my y way sec  ure enough secure ? what  '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is check i ing re referrer quest  the  enough referrer enough   to p  rotect against a cross site request forgery attack? i know  the the  the referrer   can be spoofed, but is th rk? ere any way for   the attacker   to do th referrer at  for for the but  clie be nt? i know tokens ar  that i e the no do rm, but would this  token referrer s wo forgery   rk? '}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': 'the whole point of using salts is to avoid the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes . thus, it only needs to be long enough to exclude the possibility that such a table already exists for a specific salt. '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 30, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'database is compromised', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'database is compromised', 'label': 'PARENT'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'compromises the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'database is compromised', 'label': 'ATTACK'}, {'start': 81, 'text': 'all of the secrets will have to be changed', 'label': 'ATTACK'}, {'start': 466, 'text': 'compromises the machine', 'label': 'ATTACK'}, {'start': 500, 'text': 'encryption can be circumvented', 'label': 'ATTACK'}], 'sentText': "it's the most obvious solution, but if the database is compromised somehow, then all of the secrets will have to be changed. to me this solution is not ideal because it has all of the problems of storing a password in plain-text. this will provide some security, because if the database is compromised then the secrets will still be safe. but reversible encryption requires an encryption key, and the key has to be stored on the server. it means that if an attacker compromises the machine, then the encryption can be circumvented. "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 154, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'how th ev e e th u e v run x,  [code] i do not u ud d the s   xxxxs d about sexxxxy .  that  the cxxxx, running [code] xxxxs x c how an xe hr the y  ud o run any javascript code that you can run. '}
{'sentId': 121, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 169, 'text': 'become compromised via script injection', 'label': 'ATTACK'}], 'sentText': '[link] gives me concer in [link] jection [link] . where  n about  application the potential for a [link], in a case where my ap application pl my icat n ion has [link]  become compromised via script injection i potential n . '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'thxs approxxh prxxxxxs defensxxxxxxxxxx. if someone manaxxs to leak the database table, it doxs not give an attackxr an open door for impersonating users. '}
{'sentId': 28, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'register with the service, login', 'em2Text': 'modifying the token that they receive to access the accounts of other users', 'label': 'None'}, {'em1Text': 'modifying the token that they receive to access the accounts of other users', 'em2Text': 'register with the service, login', 'label': 'PARENT'}], 'entityMentions': [{'start': 80, 'text': 'register with the service, login', 'label': 'ATTACK'}, {'start': 122, 'text': 'modifying the token that they receive to access the accounts of other users', 'label': 'ATTACK'}], 'sentText': 'since this is a public facing service i am however concerned that someone could register with the service, login and then modifying the token that they receive to access the accounts of other users. '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'xxxxxxxg a database is compromised a pxr user xxxt prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table woxxd have xo be gxxxxxxxd for each and every user who had a uxxxxe salt in order to obtxxn their pasxxxxx.  this would be a time consuming proxxxs which is what xxxxs salts effexxxxx.  this does not help a tremendous xxxxxt against dictionary or brute force attacks. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 171, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 292, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a exp  (s data, pel)  xo     rt   sy rt   sxxxs i  e sysm  alw  xe xe xxxxxs that"spring expression language (spel) s  y  "  stem    xxxxd e e  xo sysm get  i    ted h http parameter submissions thxxxxxxxn  g      th  at  ited  xxw xxd al o low at apxxxxxt e   xxt th ixn xxxxe lo   rs to get sensitive system data, application and user cookies. s   sy   y "  '}
{'sentId': 26, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hack around your javascript code', 'em2Text': 'know backdoors to your services and apis', 'label': 'None'}, {'em1Text': 'know backdoors to your services and apis', 'em2Text': 'hack around your javascript code', 'label': 'PARENT'}], 'entityMentions': [{'start': 183, 'text': 'hack around your javascript code', 'label': 'ATTACK'}, {'start': 221, 'text': 'know backdoors to your services and apis', 'label': 'ATTACK'}], 'sentText': "and when i say to my fellow java developers, i start using a javascript mvc, they start saying it's not secure enough, as javascript is all about client-side there is always a way to hack around your javascript code, and know backdoors to your services and apis.   there is always a way to hack around your javascript code, and know backdoors to your services and apis. "}
{'sentId': 59, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 35, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}], 'sentText': 'as r as i can see this sd prevet a man-in-the-middle attack, r am i missing something?at point 7 the ct sd know if someoe is trying to give the server the wrog ky to encrypt with, as no one e but the server n decrypt key2(pu. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 9, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 140, 'text': 'injection attack security', 'label': 'ATTACK'}], 'sentText': 'what are the best workarounds for using a sql [code] clause with instances of [code], which is not supported for multiple values due to sql injection attack security issues: one [code] placeholder represents one value, rather than a list of values. '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 89, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'encrypt my communication (c->s &amp; s->c)do 2-way authentication (c->s &amp; s->c)avoid man-in-middle attacks '}
{'sentId': 75, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 182, 'text': 'the timestamp can be used to calculate server uptime', 'label': 'ATTACK'}], 'sentText': 'i hae a hg   findin hae g  cn secuy scan finding g me to disae tcp timestamp g s. i unde (good rst findig and the r  s.   scan easons s.  f be or  d ading  e findig  recommendation: the timestamp can be used to calculate server uptime, wh ca findig n be l usd  to an atc to r (good explanati . on under e  ading "tcp timesp , s" be  at [l. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 132, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 197, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevxx,  vulxxxxxxxx. i do xt xxxd txe  g  s  the  you s xt  about  vulxxxxxxxx. xxxxxxxy vulxxxxxxxx. cxxxx javascr  ipt xxxx, g  running [code] g xt  xxxs xxxs te hr the xxxx,  axxxy  [code] to run any javascript code that you can run. '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 28, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 86, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 116, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 144, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 212, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i inherited some ce t was y attacked by repeated remote form submissions. , the r now requests the form page first, starting a valid session, d then passes the session cookie in the following post request. there having a valid session token. so fail n my . '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 105, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, and xxt to w wxxt is the t xxxe wy xo escape user input for forum posts. '}
{'sentId': 147, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile my app', 'em2Text': 'register and then "scan" my entire database', 'label': 'AND'}, {'em1Text': 'decompile my app', 'em2Text': 'sending requests with different gps data', 'label': 'PARENT'}, {'em1Text': 'decompile my app', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'decompile my app', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'register and then "scan" my entire database', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'gaining access to the api', 'label': 'None'}, {'em1Text': 'sending requests with different gps data', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'decompile my app', 'label': 'PARENT'}, {'em1Text': 'gaining access to the api', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'gaining access to the api', 'em2Text': 'use his login information along with the key from the code', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'decompile my app', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'register and then "scan" my entire database', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'sending requests with different gps data', 'label': 'None'}, {'em1Text': 'use his login information along with the key from the code', 'em2Text': 'gaining access to the api', 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'decompile my app', 'label': 'ATTACK'}, {'start': 49, 'text': 'register and then "scan" my entire database', 'label': 'ATTACK'}, {'start': 103, 'text': 'sending requests with different gps data', 'label': 'ATTACK'}, {'start': 351, 'text': 'gaining access to the api', 'label': 'ATTACK'}, {'start': 419, 'text': 'use his login information along with the key from the code', 'label': 'ATTACK'}], 'sentText': 'however, i fear somebody might decompile my app, register and then "scan" my entire database by simply sending requests with different gps data that doesn\'t actually come from an ios device. is there any way to prevent this? i\'ve googled already and found this threat: i\'ve looked into api keys but didn\'t find a way how to stop a malicious user from gaining access to the api through registering/ decompiling and then use his login information along with the key from the code. '}
{'sentId': 43, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompilers', 'em2Text': 'get the key', 'label': 'None'}, {'em1Text': 'get the key', 'em2Text': 'decompilers', 'label': 'PARENT'}], 'entityMentions': [{'start': 464, 'text': 'decompilers', 'label': 'ATTACK'}, {'start': 480, 'text': 'get the key', 'label': 'ATTACK'}], 'sentText': "regardless of the programming languagei have a client server application.mobile client - http serverthe app will be available on several mobiles not only android.i want to make sure the request is coming from client's mobile only.how can i solve this security problem?i propose :have a secret key hard-coded on the mobile app:each request is encrypted using this key and decrypted on the server side.is it safe to hardcode the key if this way makes sense at all? (decompilers can get the key? the app will be available not only for android!)extra info:each user will have a userid/username... "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how cxn i display the "wxxxxxx, [yxxr xxxxx"  pages thxy  on public pa pages ges fo xf r authentica and ted users, even i pages p  f xxxy us  should therexxxe e htxx? of cours  xxxxs should e, i wou auxxxxxxc e] a ld  xh xxxs erefore  the like to kxe [code] p txe ac authentica cess to the sensitive p an therefore d ages safe, and i shoxxd  pa to  thexxxxxe keep [cod f x] to axxxd pxxxxxxe stealing of the session token an . '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is someone could decompile the app  c (which i've  c proguar proguard d ould done) and even with proguard you can qu with   wi the thout too much dif ompile ficulty retrieve all the  ould qu dec the om the pile es can tions.  "}
{'sentId': 99, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 33, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': ' e receny i s  tudied a lot d to xss attacks. i s searc x g for pre xss vn tec  hniques of x for ss  x fr s  s r  .  '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 105, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, xxd xxt to w wxxt is the t xxxe xy xo xxxxxe user input for forum posts. '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 244, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 365, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the restricti  ons,  access  load this   ser but ver i   th e is s norm access a restrictions, l e ly subjected to is this  mi i restricti   can nim restrictions, a etc. l,  to but si   a nce t nimal, h nima usly access  l, e th r access e are no access restrictions,  can   re l, strictions, usl  y the serv to e er r can obv to io can this  usly re   ca can n be attacked by dos etc. '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 12, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 152, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i  to  . am creating a forum software using php and mysql backend, ad wa  nt to es es   wat   ps fm  mot . kxw i  t s the t e wy to es t o  a es pe am  user input for forum posts. '}
{'sentId': 104, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'apache log4j vulnerability', 'label': 'ATTACK'}], 'sentText': 'apache log4j vulnerability [link actor ] is  v androi ae  ulnerability impac is ting a numbe  wan in ted does  a r of cloud  t servicei a apache m usin it g log4j in a  my andri plw d ap impact plicatw dos it t it r is there no im my pact at  j i a of m as cu ap ld g s e ine the malics a does cto a i  r could ony run l , it shoud nt be  y apache  an issue but i wanted to con. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sure my jenkins instance is not exploitable with the latest log4j exploit.i have a pipeline script that runs, i tried following this instruction :[link]this is one of my stages of my pipeline script:[code]but i get a different error than what's described here and i'm unsure if i'm checking this correctly.  this is the error:[code] "}
{'sentId': 53, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'malicious user steals the [code] of an other user', 'em2Text': 'impersonate that user', 'label': 'None'}, {'em1Text': 'impersonate that user', 'em2Text': 'malicious user steals the [code] of an other user', 'label': 'PARENT'}], 'entityMentions': [{'start': 34, 'text': 'malicious user steals the [code] of an other user', 'label': 'ATTACK'}, {'start': 137, 'text': 'impersonate that user', 'label': 'ATTACK'}], 'sentText': 'a security issue may arise when a malicious user steals the [code] of an other user. without some kind of check, he will then be free to impersonate that user. we need to find a way to uniquely identify the client (not the user). '}
{'sentId': 128, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'a man in the middle attack', 'label': 'ATTACK'}], 'sentText': 'the following [link] discusses how to destroy a flask token, however this does not prevent a man in the middle attack.  is there anyway to invalidate the token so it is no longer active before the time it expires? '}
{'sentId': 64, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'directory transversal (aka path transversal) attack', 'label': 'ATTACK'}], 'sentText': 'i have beig  a java webapp w attc  k ep  h   is e t  encoding ) . webapp o the directory transversal (aka path transversal) attack vi direy a url  ph . after beig authentia l te: '}
{'sentId': 125, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 69, 'text': 'injected xss attacks', 'label': 'ATTACK'}], 'sentText': "i'm trying to protect a classic asp web application from http header injected xss attacks and am having trouble finding a solution that stops scripts found in the user agent string.  "}
{'sentId': 39, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded svg images on a website', 'em2Text': 'cross-site-script into there', 'label': 'None'}, {'em1Text': 'cross-site-script into there', 'em2Text': 'uploaded svg images on a website', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'uploaded svg images on a website', 'label': 'ATTACK'}, {'start': 178, 'text': 'cross-site-script into there', 'label': 'ATTACK'}], 'sentText': "i want to display user uploaded svg images on a website, but they're quite open to exploits: they serve the uploaded files from a separate hostname, specifically [code]. you can cross-site-script into there all you like but it doesn't get you anything: it lives in a different origin to [code] and can't touch its cookies or interact with its script. "}
{'sentId': 36, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attempt', 'em2Text': 'malicious character', 'label': 'OR'}, {'em1Text': 'malicious character', 'em2Text': 'xss attempt', 'label': 'None'}], 'entityMentions': [{'start': 156, 'text': 'xss attempt', 'label': 'ATTACK'}, {'start': 178, 'text': 'malicious character', 'label': 'ATTACK'}], 'sentText': '"a potentially dang orm erous req potentially uest.f value orm value  from c cha client racter haracter  was detected fr from om the client may it be "a  a xss attempt or  was a malicious character '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 21, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone attacked my application', 'em2Text': 'grab the api key', 'label': 'PARENT'}, {'em1Text': 'someone attacked my application', 'em2Text': 'fraudulent clicks made using my api key', 'label': 'None'}, {'em1Text': 'grab the api key', 'em2Text': 'someone attacked my application', 'label': 'None'}, {'em1Text': 'grab the api key', 'em2Text': 'fraudulent clicks made using my api key', 'label': 'AND'}, {'em1Text': 'fraudulent clicks made using my api key', 'em2Text': 'someone attacked my application', 'label': 'None'}, {'em1Text': 'fraudulent clicks made using my api key', 'em2Text': 'grab the api key', 'label': 'None'}], 'entityMentions': [{'start': 104, 'text': 'someone attacked my application', 'label': 'ATTACK'}, {'start': 140, 'text': 'grab the api key', 'label': 'ATTACK'}, {'start': 270, 'text': 'fraudulent clicks made using my api key', 'label': 'ATTACK'}], 'sentText': "i am currently working on a project which uses blogger api from google. day before yesterday (saturday) someone attacked my application and grab the api key, my daily limit for accessing posts is 100,000 (100k/24 hrs). i hit limit on saturday (i suspect that those were fraudulent clicks made using my api key, since i've only around 4k customers using the application, i embedded the api key in client side code). "}
{'sentId': 24, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'getting subscription_json from client', 'em2Text': 'converting it to string', 'label': 'AND'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'setting it to model object using gson library', 'label': 'None'}, {'em1Text': 'getting subscription_json from client', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'converting it to string', 'em2Text': 'setting it to model object using gson library', 'label': 'AND'}, {'em1Text': 'converting it to string', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'setting it to model object using gson library', 'em2Text': 'json injection', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'getting subscription_json from client', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'converting it to string', 'label': 'None'}, {'em1Text': 'json injection', 'em2Text': 'setting it to model object using gson library', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'getting subscription_json from client', 'label': 'ATTACK'}, {'start': 49, 'text': 'converting it to string', 'label': 'ATTACK'}, {'start': 80, 'text': 'setting it to model object using gson library', 'label': 'ATTACK'}, {'start': 167, 'text': 'json injection', 'label': 'ATTACK'}], 'sentText': 'i am getting subscription_json from client h i m converting it to string ad thn setting it to model object using gson library. on g the ce on foy securi, it is gig me json injection error on bew code with fg message : '}
{'sentId': 69, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'logs into your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'AND'}, {'em1Text': 'logs into your site', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'logs into your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'then browses over to another website with a malicious flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'PARENT'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': 'cookies are shared to the flash app', 'label': 'None'}, {'em1Text': 'flash app can connect back to your site', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': 'flash app can connect back to your site', 'label': 'PARENT'}, {'em1Text': 'cookies are shared to the flash app', 'em2Text': "the flash app to hijack the user's session", 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'logs into your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'then browses over to another website with a malicious flash app', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'flash app can connect back to your site', 'label': 'None'}, {'em1Text': "the flash app to hijack the user's session", 'em2Text': 'cookies are shared to the flash app', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'logs into your site', 'label': 'ATTACK'}, {'start': 92, 'text': 'then browses over to another website with a malicious flash app', 'label': 'ATTACK'}, {'start': 161, 'text': 'flash app can connect back to your site', 'label': 'ATTACK'}, {'start': 216, 'text': 'cookies are shared to the flash app', 'label': 'ATTACK'}, {'start': 259, 'text': "the flash app to hijack the user's session", 'label': 'ATTACK'}], 'sentText': "y xxxxxg txe , e n sy n xs that xh apps n xw cont to r .  so if se logs into your site, and then browses over to another website with a malicious flash app, tht flash app can connect back to your site.  e ixs in a , cookies are shared to the flash app.  xs s the flash app to hijack the user's session to do xxxxxxxr t s yr wee s witt xxe r g xxxxt it. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 133, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 222, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 282, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 305, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hw might an attacker recover the secrets in that flash? i underd they can z for vs in the app code and et it, that there cod be some indistinct general side channel attack or somet. but how wod an attacker reay go t tg to recover those keys?  are te viable s for a determined r o w shave-down the chip or some kind of microscope attack? '}
{'sentId': 61, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'someone will compromise the shared secret on the client', 'em2Text': 'post it on the internet', 'label': 'PARENT'}, {'em1Text': 'post it on the internet', 'em2Text': 'someone will compromise the shared secret on the client', 'label': 'None'}], 'entityMentions': [{'start': 52, 'text': 'someone will compromise the shared secret on the client', 'label': 'ATTACK'}, {'start': 154, 'text': 'post it on the internet', 'label': 'ATTACK'}], 'sentText': 'i am warned that should the app become popular that someone will compromise the shared secret on the client. just because they can and they will probably post it on the internet. so really it all comes down to the server side. unfortunately, i have no way to identify and block an attacker. this i would dearly love.  '}
{'sentId': 3, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject malicious code', 'em2Text': 'reroute the program logic', 'label': 'OR'}, {'em1Text': 'inject malicious code', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'reroute the program logic', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'reroute the program logic', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'reroute the program logic', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'inject malicious code', 'label': 'ATTACK'}, {'start': 40, 'text': 'reroute the program logic', 'label': 'ATTACK'}, {'start': 96, 'text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'ATTACK'}], 'sentText': 'the ability to inject malicious code, r reroute the program logic depends entiry on being ae to access memory addresses that fall outside legitimately allocated buffers.  but in a lane like java, this is simply impos.  te wot that could n is a pm will termine wih an , leadg to a .   '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 366, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how c the an i d the ixxxxy xh xxe e xxxxxxxe i , xxxxr name]" xn p xxxxxxxxe ublic pages xxe  for  i authenticaxxd users, even if user how s,  the i y use xxxx? of course, i would like xo ke http? ep the a to ccxxs to t of he sxn avoid sitive pages safe, and i  of xxxxxd xh u [your se e i refore  y  se xxxxxe  use ssi  on kexp [coxx] t xxxxxxxxe o avoid possible stealing of the session token. '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a response to the rexxxt [link] and xxxxxx, what is the best wxy xo secuxe your website agxxxxt brute force login attacks? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd thxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe and expxxxt it, xxxt there xxxxd be sxxe indistinct general side channel attack or something. bxt how wouxd an axxxxxxr really go abxxt xxxxxg to recover those keys?  are thxxe viable approaches for a dexxxxxxxd attaxxxr to somexxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'e the verification file is n the web sers root structure, and goe needs to access it to read is cons - tey e d read it if they wanted by going to [link].  '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "xs it possxxxe fxr somxxxe to 'hack' an apache server axd read php files. i undersxxxd txxt xxp is a server-sxxe lxxxxxxe and cannxt be xxxd xxxm anywhexe othxr thxn txe sxxxxx, but could xxxxxxe hack the serxxr and read txxm as xf readxxg a text filx? well yes, if xxxy ever axxxxxxy xxxk into the sexxxr (xxx, ftp etc.), xxxy xxy have access to files on the hard disk. a properly coxxxxxxxd apache sxxxxr will xxt sxxxe rxw php filxs xxxxxx, it sxxxxd always process them with the php interpxxxxr xxxxx. "}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is usixg the method bxxxw a xxd xxxxxx? xt generates a random number between 0-1000. since thexe are only 1xx0 optixxx, axd their md5 hashes are known, it should take an axxxxxxr xxxt a 1xx0 trials to verify the account without it really belonging to them '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate raxxxxw txxxe would have to be xxxxxxxxd for each xxd every uxxr who had a unixxe salt in order to xxxxxn their xxxxxxxx.  this woxxd be a time consuming procexs whxxh xs what maxxs salts xxxxxxxxx.  this xxxs not help a tremendous xxxxxt xxxxxxt dictionxxy or brute xxxxe attacks. '}
{'sentId': 164, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'possible attacks in ways to which the similar  function is not susceptible', 'label': 'ATTACK'}], 'sentText': '  a third-party code can see the scope in which eval() was invoked,  which can lead to possible attacks in ways to which the similar  function is not susceptible.    [link] '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 143, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 237, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 292, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 315, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxd thxy n fuzz for vulnxxxs in txe app cxxe and ext i, xxxt te xxxxd be sxxe indistinct general side channel attack or somethi. bxt how wouxd n axxxxxxr ry go t xxxxxg to recover those keys?  e e ve apps fr a dd attaxxxr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cxxxxxxxxe on my website xxd i wxxt to keep my server's ip (the oxxxxn ip) xxxxxxx, to avoxd ddos attacks being xxxt directly to my sxxxxxxs ip. my xxxxxr uses axxxxx, php, mysxx. "}
{'sentId': 103, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'command injection', 'em2Text': 'a variable can contain malicious code', 'label': 'None'}, {'em1Text': 'a variable can contain malicious code', 'em2Text': 'command injection', 'label': 'None'}], 'entityMentions': [{'start': 100, 'text': 'command injection', 'label': 'ATTACK'}, {'start': 267, 'text': 'a variable can contain malicious code', 'label': 'ATTACK'}], 'sentText': 'i was wondering, nowadays with the most recent versions of sh, bash, ksh etc. is it possible to get command injection by executing this (very simple) script? despite of the fact that one can already execute code if they have a shell of course, i am just wondering if a variable can contain malicious code like for example in php:  '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'xxe whole xxxxt of xxxxxxg a password is in cxxe a hacker gets access to the database. if i store the salt in the db within txe same xxw as xxe hashed pasxxxxx, isn\'t it just lxxe i am handing the hxxxxr the "secret code"? i am putting up a xxxr wixh a xxxx, and xxxxxxg txe intruder the key. '}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 96, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 136, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': 'shd xxxe xxxxs be done at xxe top of txe , the xxxm of e stack xr at exxxy levex?  it ss tht if a malicious user can invoke one method, he could invoke any, so for  exxxxxe secuxxxx, xd xxxd a chxxk on xxy mexxxd (and s a lt xf xxxxa xxxe to write. '}
{'sentId': 104, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'if i understood it correctly, the goal of the same-origin policy is to prevent csrf attacks and the goal of cors is to enable resource sharing if (and only if) the server agrees to share its data with applications hosted on other sites (origins). '}
{'sentId': 128, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'a man in the middle attack', 'label': 'ATTACK'}], 'sentText': 'the followg [l] discuxxxs how to destrxy a flaxk tokex, xr this dxxs not prxxxxt a man in the middle attack.  is thxxe any to e the token xo it s no lonr ae before e te it expxx? '}
{'sentId': 3, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject malicious code', 'em2Text': 'reroute the program logic', 'label': 'OR'}, {'em1Text': 'inject malicious code', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'reroute the program logic', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'reroute the program logic', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'reroute the program logic', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'inject malicious code', 'label': 'ATTACK'}, {'start': 41, 'text': 'reroute the program logic', 'label': 'ATTACK'}, {'start': 101, 'text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'ATTACK'}], 'sentText': 'the ability to inject malicious code, or reroute the program logic depends entirely on being able to access memory addresses that fall outside legitimately allocated buffers.  but in a language like java, this is simply impossible.  the worst that could happen is a program will terminate with an [code], leading to a denial-of-service.   '}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 137, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'i m n m means o m st lan of  m g service uag allowin es allowing users to supply regular expression means you  that yo allowin allow g u allow for a denial of service attack. '}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 136, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 88, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to se a file i dd the followg s rs a hashve that is std n a file. whener the user ws to access the file, he enters the password, and if the same hash is generated, he can access the file.i se this isn't realy sa, but how e it is? how high is e chance that string#hase gs the e hash with two dift inputg to your anss i changed the co t should be betr now?? "}
{'sentId': 111, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'man-in-the-middle attacks', 'em2Text': 'replay attacks', 'label': 'AND'}, {'em1Text': 'replay attacks', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}], 'entityMentions': [{'start': 51, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}, {'start': 198, 'text': 'replay attacks', 'label': 'ATTACK'}], 'sentText': 'how does challenge-response authentication prevent man-in-the-middle attacks? i read the wiki article but still i cannot understand. where challenge/response protocols really shine is in preventing replay attacks: if alice just sends bob a message along the lines of "please debit my account $5 and credit your account $5", mallory could record the message and replay the message to deplete alice\'s account. '}
{'sentId': 12, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 382, 'text': 'accessing the underlying system in malicious ways', 'label': 'ATTACK'}], 'sentText': "i recently learned about java's security model. most people think java is secure because it is immune to buffer overflows, etc, but there is this entire java security model centered around checking whether code has permission to take certain actions. they're really solving a challenging problem: how to let arbitrary untrusted code (say in a web browser) run but be prevented from accessing the underlying system in malicious ways while retaining the ability to interact with the system in some ways. "}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 44, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 140, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 217, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i mae a secured php/l b app h ee jqy u. to, a strange error popped up in our app's logs:[code] we are nt using amazons cloudfrt cdn n our . when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 76, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 163, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 243, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 282, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my problem xs that i xxxl the password would likely be intercepted. xn (xx, the hash could be extracted by a man-in-the-middle attack. txe xxxxxxxr can xxw sxxxxy use that hash to get access to the user's information. xn (2), xxe axxxxxxr can intercept the plain-text password, xxd use that to gain access to the user's account. "}
{'sentId': 5, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'the following query', 'em2Text': 'any possible injection that would get through the php', 'label': 'None'}, {'em1Text': 'any possible injection that would get through the php', 'em2Text': 'the following query', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'the following query', 'label': 'ATTACK'}, {'start': 15, 'text': 'any possible injection that would get through the php', 'label': 'ATTACK'}], 'sentText': 'do you know of any possible injection that would get through the php code above? consider the following query: '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 95, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'i am xxxxg cloudflaxe n xy we and i want to kp y servxxxs ip (the oxxxxn ip) xxxxxxx, to avoid ddos attacks bexxg sxxt diry to my servexxs ip. my sxxxxr uses , ph, . '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 148, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 206, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  x  f y y f e u e yf we pe  c e o pr    g de xo e m sxxx n ,  xe g txxt ay m xxt pr x) ixxxxxx. u   oxxxxn  rs u x) nr u t  x) y  n   x) into  can inject malicious code into the system  site-packages  m d obtain root privilege.   n  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 114, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 190, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 239, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 261, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d they can xxz fr s xn te app ce ad t x, t te cd be xxxe indistinct general side channel attack or . but how d an attacr y go t tg o recover those keys?  xxe e e xs for a d ar to sw shave-down the chip r some kind of microscope attack? '}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 137, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'i m n m means o m st lan of  m g service uag allowin es allowing users to supply regular expression means you  that yo allowin allow g u allow for a denial of service attack. '}
{'sentId': 24, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'i nexd to avo xxxxxxxxxxn axo . id beixg vulnexxxxe to sql injection in my asp in .xe in t axxxxc   ne injection xd atxxx. how xxxxt i acxxxxxxxh applixxxxxx.  th xxxxxc is? '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 76, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 163, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 243, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 282, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my problem is that i feel the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the attacker can now simply use that hash to get access to the user's information. in (2), the attacker can intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 10, 'articleId': '3', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 161, 'text': 'extract the key from the javascript on the page and use it', 'label': 'ATTACK'}], 'sentText': 'the problem is, that the web app (official website) is also a client of the api itself, thus would have to expose its api key. as a result, some user could just extract the key from the javascript on the page and use it, instead of generating his own key. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 66, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trxxxg to mxxe sure my jenks xxxxxxxe is xxt xxxxxxxxxe with the latest log4j exploitxi e a pipxxxxe xxxxxt thxt , i txxxd foxg this n :[lis is one of my stages xf my e st i get a differxxt xxxr than xxs described here and i'm unsxxe xf i'm xxxxxxxg ths corrxxxxx.  s is the erroxxxxxx] "}
{'sentId': 94, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'construct a css file', 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': 'construct a css file', 'em2Text': "gain access to things like my domain's cookies", 'label': 'None'}, {'em1Text': 'construct a css file', 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': 'inject code into my site', 'em2Text': 'construct a css file', 'label': 'PARENT'}, {'em1Text': 'inject code into my site', 'em2Text': "gain access to things like my domain's cookies", 'label': 'OR'}, {'em1Text': 'inject code into my site', 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'construct a css file', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': 'construct a css file', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': "gain access to things like my domain's cookies", 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'construct a css file', 'label': 'ATTACK'}, {'start': 72, 'text': 'inject code into my site', 'label': 'ATTACK'}, {'start': 110, 'text': "gain access to things like my domain's cookies", 'label': 'ATTACK'}, {'start': 378, 'text': 'xss attack', 'label': 'ATTACK'}], 'sentText': "is there any way someone could construct a css file that would let them inject code into my site or otherwise gain access to things like my domain's cookies?  is this really safe, or do i need to come up with a different solution? no it is unsafe.  [code] and [code] are known ways to cause arbitrary script execution on certain browsers via css.  [link] suffered a very public xss attack that was due to javascript embedded in user-supplied css. "}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'xxe whole point of hashing a password is in xxxe a hacker gets access to the database. xf i store the salt in the db xxxxxn the same xxw as the hashed xxxxxxxx, xxxxt it just xxxe i xm handing the hacxxr the "secxxt code"? i am xxxxxxg up a dxxr xxxh a loxx, and handing the intruder the key. '}
{'sentId': 102, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'sql injection attacks', 'label': 'ATTACK'}], 'sentText': 'by default does asp.net protect against sql injection attacks when using asp controls? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 82, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 99, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 159, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'xxe simply  probm i tag the  s  he tht  axxxxx. xh xe e xt exxxxxxe tacker sixxxy adds a slash n e encoded javascript n  t ima  ge tag w nd ith axxxt box), xh kills the page.  xxxxxe a t e he the  ith   the nd ith  effxxxxe atxxxx.   '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 21, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t to e e cay to sp ddos attacks from a certain ip (or pool of ips). ths s to e t the nx level, rar than y r in the cod. o i d a web appln fire? f so, how o i ine it. '}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'e the verification file is n the web sers root structure, and goe needs to access it to read is cons - tey e d read it if they wanted by going to [link].  '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'lets say we have a typical csrf protection like this onewhat if an attacket uses this code to bypass the csrf token? '}
{'sentId': 4, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': "steal the user's csrf token", 'em2Text': 'via js', 'label': 'PARENT'}, {'em1Text': 'via js', 'em2Text': "steal the user's csrf token", 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "steal the user's csrf token", 'label': 'ATTACK'}, {'start': 58, 'text': 'via js', 'label': 'ATTACK'}], 'sentText': "what prevents the attacker to steal the user's csrf token via js? can't he just find the csrf element and get it's value with js? "}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the mexxxxxs i get in my webhook callback. hoxxxxx, a malxxxxxs usxr can add my bot to a thousand big groups and xxxl poxxxxxy result in denial of service for all other users. exxn if telegram hxxe imxxxxxxxxd some rate limiting such user actions may still rxxxxt in denial of service for all other usexx. '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? i know the referrer can be spoofed, but is there any way for the attacker to do that for the client? i know tokens are the norm, but would this work? '}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 96, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 136, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': 'shd xxxe xxxxs be done at xxe top of txe , the xxxm of e stack xr at exxxy levex?  it ss tht if a malicious user can invoke one method, he could invoke any, so for  exxxxxe secuxxxx, xd xxxd a chxxk on xxy mexxxd (and s a lt xf xxxxa xxxe to write. '}
{'sentId': 31, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'our whole history of changes', 'label': 'AND'}, {'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'copying a single folder', 'label': 'PARENT'}, {'em1Text': 'our whole history of changes', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'our whole history of changes', 'em2Text': 'copying a single folder', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'our whole history of changes', 'label': 'None'}], 'entityMentions': [{'start': 267, 'text': 'steal not only the latest intellectual properly ', 'label': 'ATTACK'}, {'start': 319, 'text': 'our whole history of changes', 'label': 'ATTACK'}, {'start': 359, 'text': 'copying a single folder', 'label': 'ATTACK'}], 'sentText': "  difficult e it's  e gathere xact been difficult to nail  history down  intellectual that   th his exact se steal curity concern but i've gathere on d that it ce o of f but  nter fac nail t s on th not e fact that  it' employee s of  a malicious employee c but ould steal not only the latest intellectual properly but our whole history of changes just a  by copying a single folder. that  "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i t o e e y to stop ddos attacks from a certain ip (or pool of ips). s as xo e xt xxe nx level, r n y r in te x. do i need a web xn fxxxxxxx? if s, w do i ine it. '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 54, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 180, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 271, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked xf xn axxxxxr xxn gain access to the system under the same user account as your code.n oxxxxxe , dxxxt x, t , xxxs an t a xx. if xn xxxxxxxr cn get access as the same user or as root, xxxxxe gxt far bxxxxr xxx. fxr xxxxxxx, txxy xxxxd tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 17, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 105, 'text': 'xss on a httml attribute', 'label': 'ATTACK'}], 'sentText': "i'm having to work on an old web app that a previous developer left. it is using addslashes() to prevent xss on a httml attribute. "}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 68, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 92, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interg g quite fast: they e astonishy ls f attempts o circumvent security and exploit vulnerabilities in standard software packages tt are commonly found n sites, e phpmy, for, etc. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 142, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  xf yu e youxf wrxe pe to e m sx,  you'e g txxt any m txt rs under u t y  n xx) can inject malicious code into the system  site-packages axd obtain root privilege. "}
{'sentId': 92, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'including the  fields in the manifest to have account management access', 'em2Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'None'}, {'em1Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'em2Text': 'including the  fields in the manifest to have account management access', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'including the  fields in the manifest to have account management access', 'label': 'ATTACK'}, {'start': 148, 'text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'ATTACK'}], 'sentText': "due to t, i'm stg to wor what stops an arby s app fm ) including the  fields in the manifest to have account management access, and tn then 2) from iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them. i knw that dug insta, a dialog s up with all te permis t an ap requests to us, but i don't k we can count on te ae ur to reject an p e it requests s permiss. "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this approach provides defense-in-depth. if someone manages to leak the database table, it does not give an attacker an open door for impersonating users. '}
{'sentId': 80, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'create malicious xaml pages', 'em2Text': 'embed html or call remote webpages with malicious content', 'label': 'PARENT'}, {'em1Text': 'embed html or call remote webpages with malicious content', 'em2Text': 'create malicious xaml pages', 'label': 'None'}], 'entityMentions': [{'start': 77, 'text': 'create malicious xaml pages', 'label': 'ATTACK'}, {'start': 203, 'text': 'embed html or call remote webpages with malicious content', 'label': 'ATTACK'}], 'sentText': 'now the question arises, due to my lack of xaml knowledge, is it possible to create malicious xaml pages that when downloaded and used could have other embedded iframes or other elements that could have embed html or call remote webpages with malicious content? i believe this could be the case. '}
{'sentId': 84, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'forge an ajax request', 'em2Text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'label': 'None'}, {'em1Text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'em2Text': 'forge an ajax request', 'label': 'PARENT'}], 'entityMentions': [{'start': 34, 'text': 'forge an ajax request', 'label': 'ATTACK'}, {'start': 61, 'text': "repeatedly submit the 'form_data' array with 100000000000 random elements", 'label': 'ATTACK'}], 'sentText': "however, what if a hacker were to forge an ajax request, and repeatedly submit the 'form_data' array with 100000000000 random elements? the loop would have to iterate through each element, possibly causing a dos (or at least slow down service), correct? "}
{'sentId': 3, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject malicious code', 'em2Text': 'reroute the program logic', 'label': 'OR'}, {'em1Text': 'inject malicious code', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'reroute the program logic', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'reroute the program logic', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'reroute the program logic', 'label': 'None'}], 'entityMentions': [{'start': 45, 'text': 'inject malicious code', 'label': 'ATTACK'}, {'start': 70, 'text': 'reroute the program logic', 'label': 'ATTACK'}, {'start': 139, 'text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'ATTACK'}], 'sentText': 'the  a xt bl to e axx hxxxxn xxxy to hxxxxn  inject malicious code, r reroute the program logic s e reroute ntiy  hxxxxn n beig ae prm  to access memory addresses that fall outside legitimately allocated buffers hxxxxn .  xxt in a  as beig  ix xxx xxx to  t xxx.  lan ike guage  being l texe ike j reroe xx with , this s xxxxxy ixxxxxxxx  x.  xxe ixxxxxxxx  t xxxt cd hxxxxn is a progrm l te with n [ acs xx, xxxxg to a de  nial-xx  x x. x code, xxx. to    being  '}
{'sentId': 19, 'articleId': '3', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineers the app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'AND'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'AND'}, {'em1Text': 'creates his own app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'creates his own app', 'label': 'PARENT'}, {'em1Text': 'puts app in the store', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'PARENT'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'AND'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'reverse engineers the app', 'label': 'ATTACK'}, {'start': 39, 'text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'ATTACK'}, {'start': 139, 'text': 'creates his own app', 'label': 'ATTACK'}, {'start': 160, 'text': "bakes in company's sender id and server registration interface", 'label': 'ATTACK'}, {'start': 224, 'text': 'puts app in the store', 'label': 'ATTACK'}, {'start': 273, 'text': "impersonates company's real app as far as gcm goes", 'label': 'ATTACK'}, {'start': 326, 'text': "it registers to receive messages from company's sender id", 'label': 'ATTACK'}, {'start': 393, 'text': "sends its gcm registration id to company's servers", 'label': 'ATTACK'}], 'sentText': 'attacker reverse engineers the app and extracts both the sender id and the server interface used to receive gcm registration ids. attacker creates his own app, bakes in company\'s sender id and server registration interface, puts app in the store.  the attack app basically impersonates company\'s real app as far as gcm goes:  it registers to receive messages from company\'s sender id and then sends its gcm registration id to company\'s servers just like the "real" app does. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 145, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 191, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings  tabl ar od ed ex, e xr onxe ocess  imxu [c tabl ode], e. that means once y before ou've crext [c  xxxx, ed the [c xxxxxxs you  ode], if another process can dump memory xx. , therxxs no way you can get rid of the data bef xxxxxxs ore [lixx] kic the ks in. "}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 67, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 106, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': " .   if the session identifier were known by an attacker  .  . who had access to  the user's workstation, the logged out session could be accessed us the ing   fter th known e session c the ooki acc their essed e a  fter  ha the   us if the  er ha the d terminated t fter he   e their sess  ion  .  "}
{'sentId': 39, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uploaded svg images on a website', 'em2Text': 'cross-site-script into there', 'label': 'None'}, {'em1Text': 'cross-site-script into there', 'em2Text': 'uploaded svg images on a website', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'uploaded svg images on a website', 'label': 'ATTACK'}, {'start': 178, 'text': 'cross-site-script into there', 'label': 'ATTACK'}], 'sentText': "i want to dispxxy xxxr uploaded svg images on a website, but they're quxxe xxxn to exploits: they serve the uploaded files from a sepxxxxe hostname, specifically [xxxxx. you can cross-site-script into there axl you like but it doesnxt get xxu anxxxxxx: it lives in a dxxxxxxxt origin to [code] and caxxt touch its cxxxxxs or interact with xxs script. "}
{'sentId': 27, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'clickjacking', 'em2Text': 'doing a mitm for these social widgets', 'label': 'PARENT'}, {'em1Text': 'clickjacking', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'clickjacking', 'em2Text': "hijack your users' cookie's", 'label': 'None'}, {'em1Text': 'clickjacking', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': "hijack your users' cookie's", 'label': 'PARENT'}, {'em1Text': 'doing a mitm for these social widgets', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'clickjacking', 'label': 'PARENT'}, {'em1Text': 'xss', 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': 'xss', 'em2Text': "hijack your users' cookie's", 'label': 'None'}, {'em1Text': 'xss', 'em2Text': 'perform [code] against your website', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'xss', 'label': 'None'}, {'em1Text': "hijack your users' cookie's", 'em2Text': 'perform [code] against your website', 'label': 'OR'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'clickjacking', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'doing a mitm for these social widgets', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': 'xss', 'label': 'None'}, {'em1Text': 'perform [code] against your website', 'em2Text': "hijack your users' cookie's", 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'clickjacking', 'label': 'ATTACK'}, {'start': 101, 'text': 'doing a mitm for these social widgets', 'label': 'ATTACK'}, {'start': 186, 'text': 'xss', 'label': 'ATTACK'}, {'start': 291, 'text': "hijack your users' cookie's", 'label': 'ATTACK'}, {'start': 322, 'text': 'perform [code] against your website', 'label': 'ATTACK'}], 'sentText': "what? how!?is this not a massive opportunity for clickjacking, if used maliciously? (imagine someone doing a mitm for these social widgets!) from an attack perspective this is more like xss (cross-site scripting) than ui-redress.  you are giving google access to your website and they could hijack your users' cookie's or perform [code] against your website if they so choose (but then people would sue them for being malicious and wealthy).  "}
{'sentId': 62, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'hackers who are trying to make their url as unreadable as possible', 'em2Text': 'carry out xss attacks', 'label': 'None'}, {'em1Text': 'carry out xss attacks', 'em2Text': 'hackers who are trying to make their url as unreadable as possible', 'label': 'PARENT'}], 'entityMentions': [{'start': 95, 'text': 'hackers who are trying to make their url as unreadable as possible', 'label': 'ATTACK'}, {'start': 165, 'text': 'carry out xss attacks', 'label': 'ATTACK'}], 'sentText': 'what are the possible reasons to encode ascii characters ?? the only reason i can think of are hackers who are trying to make their url as unreadable as possible to carry out xss attacks '}
{'sentId': 105, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': "see data or change settings they shouldn't", 'em2Text': 'touching the blinkenlights', 'label': 'None'}, {'em1Text': 'touching the blinkenlights', 'em2Text': "see data or change settings they shouldn't", 'label': 'None'}], 'entityMentions': [{'start': 89, 'text': "see data or change settings they shouldn't", 'label': 'ATTACK'}, {'start': 367, 'text': 'touching the blinkenlights', 'label': 'ATTACK'}], 'sentText': "we need some way of authenticating a user login/session so that we don't allow people to see data or change settings they shouldn't. the device is not intended to be directly exposed to the internet or be 100% impregnable to serious hacking (network security / separation is the customer's issue*), the security requirement is more about keeping the lower ranks from touching the blinkenlights ;) "}
{'sentId': 9, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 234, 'text': 'injection attack security', 'label': 'ATTACK'}], 'sentText': 'what are the list  best workarounds  s for using a sql [code] clau  placeholder sq not l se with i is nstances of [  code], which is not supported f val or mu for ltiple values due to s workarounds wor ues. karounds  q [code] ues.  l injection attack security issues: one e  [cod [ e] placeholder represents on one e value, rather than a list  not of val sql ues.  best are  '}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 152, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a e spark cluster running on a remote server and i'm new to . it aps t there's o n e protecting the clustr master's ) t by de. e can just simply submit their own code to the cluster without any restrictions. "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 41, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 82, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 147, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the prm s  e t e  alet  sie r  wh simply adds a slash   e im  t n s java  scrt oe encoded javascript  sh n im adds ae tg with tht  alt box e , whh kills the page. s   simpe a that nd ee at.   e  '}
{'sentId': 98, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'allow an attacker to predict boot time of the machine', 'em2Text': 'being able to grant control over it', 'label': 'None'}, {'em1Text': 'being able to grant control over it', 'em2Text': 'allow an attacker to predict boot time of the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 307, 'text': 'allow an attacker to predict boot time of the machine', 'label': 'ATTACK'}, {'start': 366, 'text': 'being able to grant control over it', 'label': 'ATTACK'}], 'sentText': "we've hired a xxxxxxxy consultant to xxxxxxm a pentest on our application's pubxxc ip (kubernetes loadbalancer) and write a rexxxt on our sxxxxxxy flaws and the mxxxxxxxxxxs xxxxxxxd to avoid thex. xxxxr report waxxxd us that we have tcp timxxxxxp xxxxxxx, and fxxm what i've read abxxt the ixxxx, it would allow an attacker to predict boot time of the machine thus being able to grant control over it. "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 221, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 266, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'str of s  txxl  cxn xr od   xd ex kic , e r oe ocess   imxu u [c tabl  xx. odex, e xr sxxxs xxu  oxe r ss . xt mxs once you  y e oe my   ixxu t c   dump  xr x  iu txs , e xr l e d the [c x  xxs y can ou  oxx] prs , if u  another process can dump memory x. , xxxxxxs no way you can get rid of the data   bef xxxxx  s e [lx  x] k xxn ic xxxxxxr   be th ou e ks xx. '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 42, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 102, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'ts apprh provides def. if somee manages o leak the database table, it ds not give an r an open door r impersonating users. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 126, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 281, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 304, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i undexxxd txxy cn z for vus in the app e xxd expxt it, t e xd be soxe indistinct general side channel attack r so. bxt how xxxd xn ar rey go axxxt g to recover those keys?  e e viabxe approas for a xxxxxxxxxd attar o sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 49, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 117, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this aph provs defense-in. if someone manages to leak the database table, it does nt give an attacker an open door r impersonating users. '}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 149, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 177, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 129, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to save a file i defined the following method[code]this returns a hashvalue that is stored in a file. whenever the user wants to access the file, he enters the password, and if the same hash is generated, he can access the file.i suppose this isn't really safe, but how safe it is? how high is the chance that string#hashcode generates the same hash with two different inputs?edit:according to your answers i changed the code:[code]so it should be better now?? "}
{'sentId': 113, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'cookies can be stolen', 'em2Text': 'xss attacks', 'label': 'PARENT'}, {'em1Text': 'cookies can be stolen', 'em2Text': 'csrf', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'csrf', 'label': 'PARENT'}, {'em1Text': 'csrf', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'csrf', 'em2Text': 'xss attacks', 'label': 'None'}], 'entityMentions': [{'start': 4, 'text': 'cookies can be stolen', 'label': 'ATTACK'}, {'start': 30, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 96, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'no. cookies can be stolen via xss attacks (and other vectors)also, this might be susceptible to csrf since a cookie will be submitted automatically with any request. '}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 211, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a standalone spark cluster running on a remote server and i'm new to spark. it appears that there's no authentication scheme protecting the cluster master's (7077) port by default. anyone can just simply submit their own code to the cluster without any restrictions. "}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 106, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 126, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 157, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 268, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 294, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': "t xxc 's p s xt xxxt y s to  s  d yu axd i xxa xxxxxt  sm p e t t mxxxxxxxs e h  xx? xl p s xi to ng i  o take the id axd hc  run it through a mysql query o retrieve 1 record  ur ose l o y it o xxp n t  e p. is xxxxe a  y is y xe xh i h to   u p qy e s hac the r xxxd mess this url up xd rexd  pose a security threat to my application/mysql db? "}
{'sentId': 80, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'multiple php files were modified', 'em2Text': 'this modification injected javascript at the top of the page', 'label': 'None'}, {'em1Text': 'this modification injected javascript at the top of the page', 'em2Text': 'multiple php files were modified', 'label': 'PARENT'}], 'entityMentions': [{'start': 48, 'text': 'multiple php files were modified', 'label': 'ATTACK'}, {'start': 82, 'text': 'this modification injected javascript at the top of the page', 'label': 'ATTACK'}], 'sentText': 'one of our websites was attacked recently where multiple php files were modified. this modification injected javascript at the top of the page but after base64 decoding all of it i came across the following and i have no clue how to proceed.  '}
{'sentId': 64, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 90, 'text': 'directory transversal (aka path transversal) attack', 'label': 'ATTACK'}], 'sentText': 'i have beig  a java webapp w attac  k ep  h   is vue t  encoding transver) . webapp o the directory transversal (aka path transversal) attack vi direcy a url  path . after being authentia trl ted: '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what xxxxt security? mexxe hacker can find the way to change some of my [code] statements, and wxxxe my e wil bxxxx. '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 84, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'bu, we have  ap? a sec ta win ke  r bd ect uy cona api? t ap?  if per ie to ct son  some bad person would take advantage of the indirect access to win api? '}
{'sentId': 163, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'avoid attackers to steal the token from a cookie', 'label': 'ATTACK'}], 'sentText': ' to  to a to dxxxxxxxl quxxxxxx: how to a qxxxxxxx: txa xxxxxxxx:  how ckexs  avoid attackers to steal the token from a cookie? '}
{'sentId': 60, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'AND'}, {'em1Text': 'inspect the requests being made by a legitimate client', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'steal the oauth client_id', 'em2Text': 'construct any request they want to impersonate the legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'inspect the requests being made by a legitimate client', 'label': 'None'}, {'em1Text': 'construct any request they want to impersonate the legitimate client', 'em2Text': 'steal the oauth client_id', 'label': 'PARENT'}], 'entityMentions': [{'start': 22, 'text': 'inspect the requests being made by a legitimate client', 'label': 'ATTACK'}, {'start': 90, 'text': 'steal the oauth client_id', 'label': 'ATTACK'}, {'start': 143, 'text': 'construct any request they want to impersonate the legitimate client', 'label': 'ATTACK'}], 'sentText': 'e r cn i he s tt ae d inspect the requests being made by a legitimate client to the api d steal the oauth client_id. at that t y would be e to construct any request they want to impersonate the legitimate client. '}
{'sentId': 58, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sees in his dictionary that [code]', 'em2Text': 'easily find out the password', 'label': 'None'}, {'em1Text': 'sees in his dictionary that [code]', 'em2Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'label': 'None'}, {'em1Text': 'sees in his dictionary that [code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'easily find out the password', 'em2Text': 'sees in his dictionary that [code]', 'label': 'None'}, {'em1Text': 'easily find out the password', 'em2Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'label': 'PARENT'}, {'em1Text': 'easily find out the password', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'em2Text': 'sees in his dictionary that [code]', 'label': 'AND'}, {'em1Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'em2Text': 'easily find out the password', 'label': 'None'}, {'em1Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': 'sees in his dictionary that [code]', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': 'easily find out the password', 'label': 'PARENT'}, {'em1Text': 'sql injection', 'em2Text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'label': 'None'}], 'entityMentions': [{'start': 188, 'text': 'sees in his dictionary that [code]', 'label': 'ATTACK'}, {'start': 141, 'text': 'easily find out the password', 'label': 'ATTACK'}, {'start': 0, 'text': 'using a dictionary (a list of common words and password) or one of the various sites that offer you that service', 'label': 'ATTACK'}, {'start': 267, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': "using a dictionary (a list of common words and password) or one of the various sites that offer you that service, the attacker (mallory) can easily find out the password is secret when he sees in his dictionary that [code]. if an attacker gets in your database using sql injection, at least the hashes he/she retrieves won't be useful since he/she won't have access to your application configuration. if your server gets rooted, it's pretty much game-over no matter what you do. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 82, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e  browse  rs, appli and catio cov n er ns   set  t settings settings  ings n t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? pretend  "}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 375, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a standa  lone  cluste spark c t lust  i submit er runnin   h that ave g on and  a  t i heir remote server an master's d i'm default.  new  default. to spark. i standalone t app ave ears that ation  there's no authentic restrictions. ation scheme protect just ing the cluste new r master's (707 their 7) p there's ort by def restrictions. ault. anyone can just simply submit their own code to the cluster without any restrictions. "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 124, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': ' code is there any  that w in ay  there protect  to protect encryption  w keys that ay  are be any ing stored in ram from a freezer attack? (sticking  pro code tect the comput to er i keys n a freezer before rebooting   mal attack? i the cious code to acc in ess the contents of  keys ram) '}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 96, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'for secuxxxy reasons, xt is desxxxxxe to check txe integrity of code befoxe execution, avoidxxg tampered software by an attacker. so, my question is '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i undersxxxd they can xxxz for xxxxxxxxxxxxxxs in the app coxe xxd xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or soxxxxxxx. bxt how xxxxd xn attacker really go about xxxxxg to recover those keys?  are thexe vixxxe approaches fxr a determined attaxxxr to sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 211, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but xxw secure is that? can a user executxxg the progrxm easixy set this property to an arbitrary value (usixg a coxxxxxxxxxe argument of the jxx, for exxxxxx) for common ruxxxxe enxxxxxxxxxx? cxn a user exxxxy spoof this user name? '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 47, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 159, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 227, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': 'an in-memory password can be leaked f n axr cn gain access to the system under the same user account as your code.an xe ax, dt u, rxt h, ths n t a . f xn r xn get access as the same user or as root, e gxt far br xx. for e, y d tamper with your code to send all passwords (when they are entered) to them remotely. '}
{'sentId': 34, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'had a validation error caused by a weird and previous unknown script', 'em2Text': '[code]', 'label': 'AND'}, {'em1Text': 'had a validation error caused by a weird and previous unknown script', 'em2Text': 'the site has been compromised', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'had a validation error caused by a weird and previous unknown script', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'the site has been compromised', 'label': 'None'}, {'em1Text': 'the site has been compromised', 'em2Text': 'had a validation error caused by a weird and previous unknown script', 'label': 'None'}, {'em1Text': 'the site has been compromised', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'had a validation error caused by a weird and previous unknown script', 'label': 'ATTACK'}, {'start': 354, 'text': '[code]', 'label': 'ATTACK'}, {'start': 366, 'text': 'the site has been compromised', 'label': 'ATTACK'}], 'sentText': "i validated my client's website to xhtml strict 1.0/css 2.1 standards last week. today when i re-checked, i had a validation error caused by a weird and previous unknown script. i found this in the index.php file of my expressionengine cms. is this a hacking attempt as i suspected? i couldn't help but notice the russian domain encoded in the script... [code] yes. the site has been compromised.  "}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': '  e we  h ly  xxxxt  point f usg s  xxxs is o xxo f id the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes .  xx e ists  ex , it it  only s to be long h  y xxxr our  attack  h  , to lo avoid xg   a exxxxxe txe pos lxxg sibilxy that such a e a a  your ly exi it sts r a  xo speci your fic . '}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 106, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 138, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead an   g to an in ommonly terg g qui e te fast: they e astonishy e  ls e  f  e attempt software s o circumvent security an phpmy, d exploit vulnerabilities in standard software packages tt are c s s oftware  security  e ommonly found n sites,  g  e are  e they  phpmy, for, etc. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 187, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i would like to know if it has any build-in mechanism that would allow limiting the number of concurrent calls to the web service, thus addressing the possibility of a dos attack? something similar to this feature of wcf? "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 26, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 49, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 93, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem s t e xxr siy adds a slash then some encoded javascript n imxe txg with t bo, xh kills the page.  e and xxxxxe att.   '}
{'sentId': 14, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'malicious users visiting the dosomething.ashx page', 'em2Text': 'making false requests', 'label': 'AND'}, {'em1Text': 'making false requests', 'em2Text': 'malicious users visiting the dosomething.ashx page', 'label': 'None'}], 'entityMentions': [{'start': 74, 'text': 'malicious users visiting the dosomething.ashx page', 'label': 'ATTACK'}, {'start': 129, 'text': 'making false requests', 'label': 'ATTACK'}], 'sentText': 'how can i  guarantee that the request came from the local server, to stop malicious users visiting the dosomething.ashx page and making false requests? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how xxxxt an attacker recover the secrets in that flash? i uxxxxxxxxd they can fuzz for vulneraxxxxxxxs in the xxp code and exploit it, txxt xxxxe could be some indistinct general side channel attack or somethixx. but how xxxxd an xxxxxxxr really xo about trying to recover those keys?  are there vxxxxe approacxxs for a determined attaxxxr to sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 39, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'cracking my account and downloading them', 'em2Text': 'give any results to the attacker', 'label': 'None'}, {'em1Text': 'give any results to the attacker', 'em2Text': 'cracking my account and downloading them', 'label': 'PARENT'}], 'entityMentions': [{'start': 71, 'text': 'cracking my account and downloading them', 'label': 'ATTACK'}, {'start': 165, 'text': 'give any results to the attacker', 'label': 'ATTACK'}], 'sentText': ', can the data that s beg word with there be acced somehow (other than cracking my account and downloading them :)), sine obviously opening suh files in browr wil t give any results to the attacker?  '}
{'sentId': 113, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'cookies can be stolen', 'em2Text': 'xss attacks', 'label': 'PARENT'}, {'em1Text': 'cookies can be stolen', 'em2Text': 'csrf', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'csrf', 'label': 'PARENT'}, {'em1Text': 'csrf', 'em2Text': 'cookies can be stolen', 'label': 'None'}, {'em1Text': 'csrf', 'em2Text': 'xss attacks', 'label': 'None'}], 'entityMentions': [{'start': 4, 'text': 'cookies can be stolen', 'label': 'ATTACK'}, {'start': 30, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 96, 'text': 'csrf', 'label': 'ATTACK'}], 'sentText': 'no. cookies can be stolen via xss attacks (and other vectors)also, this might be susceptible to csrf since a cookie will be submitted automatically with any request. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 128, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 168, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "stris  tal r od ed ex, e xr one ocs  imxu [c tal ode], . that means oe y before ou've crt [c  xxxx, ed te [c xxxs you  ode], if another process can dump memory xx. , s no way you can get rid of the data bef xxxxxxs oe ] kic the ks in. "}
{'sentId': 28, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}, {'em1Text': 'post data is sent over curl/ssl', 'em2Text': 'implement this with php ', 'label': 'AND'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'post data is sent over curl/ssl', 'label': 'PARENT'}, {'em1Text': 'intercepted or stolen while in traffic', 'em2Text': 'implement this with php ', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'post data is sent over curl/ssl', 'label': 'None'}, {'em1Text': 'implement this with php ', 'em2Text': 'intercepted or stolen while in traffic', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': 'post data is sent over curl/ssl', 'label': 'ATTACK'}, {'start': 65, 'text': 'intercepted or stolen while in traffic', 'label': 'ATTACK'}, {'start': 195, 'text': 'implement this with php ', 'label': 'ATTACK'}], 'sentText': 'my questn is, since the post data is sent over curl/ssl, n it be intercepted or stolen while in traffic? cxn the hxxxxr vw txe sexn id in pln texxxxxe most t component here)?  xxu xo not want to implement this with php because this is ey d xxxh webxxs alxxx. your sexxxr a hxg xxl ([linxx) xxn act as an [lxx] xxd s a ] to sexxxr b. its a con sep o divide rxxxxxxxxs ben ser. resxxxxh these topics pleas. '}
{'sentId': 124, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 211, 'text': 'submit their own code to the cluster without any restrictions', 'label': 'ATTACK'}], 'sentText': "i have a standalone sxxxk cluster runxxxg on a remoxe servxr and i'm nxw to spxxx. it appxxxs that there's no authentication scheme protecting the cluster masxxxxs (7xxx) port by xxxxxxx. anyoxe xxn juxt sixxxy submit their own code to the cluster without any restrictions. "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is someone sue is  the someone could decompile the app (which i've done) and even with progua even first  r first  decomp the il  e d you can ret  without too mu is first  ch difficulty ret the riev (which e all the  first questions.  "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 291, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 348, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '   ss  rs   xf  m  to y  u e o  ux f  , xf wrx a xxxxxn y e p    e to tx  txt      n n  ino     e m s , x n x   in  xxxe code o x  ux x wrx   xf ,  e  x, g    pe t ny xx   x t e  an e y m x  xf any  e xt xf    rs  xxxs   n ay in   tx r u xxxa x i , n   i    xxxf t y  n xx) ,  ca p   n   m  inject malicious code into the system  site-packages axd obtain root privilege. '}
{'sentId': 38, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 149, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'when g apps t put da to a date is mysxxxxxxxxxxxxxxxxxxxxg and l checking (xxxxxxxxxc xx) n it a xxxx? what about other typxs of attacks differext m sql injection. '}
{'sentId': 141, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 17, 'text': 'an attacker could run old updates', 'label': 'ATTACK'}], 'sentText': "if left enabled, an attacker could run old updates, which in a good scenario would only bog down your site's performance, but in a worst-case scenario could result in data loss or data corruption. "}
{'sentId': 102, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'sql injection attacks', 'label': 'ATTACK'}], 'sentText': 'by default does asp.net protect against sql injection attacks when using asp controls? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 192, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 274, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i ud they xn z fxr vus xn the app e and t it, t e cd e sxxe indistinct general side channel attack r s. but hw wxxd n r ry go about g xo recover those keys?  e e vxxe aps fr a dxxxxd ar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 38, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'clear the whole database', 'em2Text': 'inserting a delete statement', 'label': 'PARENT'}, {'em1Text': 'inserting a delete statement', 'em2Text': 'clear the whole database', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'clear the whole database', 'label': 'ATTACK'}, {'start': 49, 'text': 'inserting a delete statement', 'label': 'ATTACK'}], 'sentText': "i don't want them to clear the whole database by inserting a delete statement.my ideas would be: "}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'wouldnt someone be able to simply change the referrer header to a malicious website? does rails have any sort of prevention measures for this? '}
{'sentId': 59, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}], 'sentText': 'as far as i xxn see xxxs should prevent a man-in-the-middle attack, or am i g something?t point 7 the xxxxxt d knw if someone is xxxxxg to gie txe sexxxr the wrg key to encxxxt w, as no one ele bt te r can dect k. '}
{'sentId': 41, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'set the csrf cookie using set-cookie', 'em2Text': 'supply a matching token in the post form data', 'label': 'None'}, {'em1Text': 'supply a matching token in the post form data', 'em2Text': 'set the csrf cookie using set-cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 19, 'text': 'set the csrf cookie using set-cookie', 'label': 'ATTACK'}, {'start': 66, 'text': 'supply a matching token in the post form data', 'label': 'ATTACK'}], 'sentText': '  the attacker can set the csrf cookie using set-cookie, and then supply a matching token in the post form data. since the site does not tie the session cookies to the csrf cookies, it has no way of determining that the csrf token + cookie are genuine (doing hashing etc. of one of them will not work, as the attacker can just get a valid pair from the site directly, and use that pair in the attack). '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is someone sue is  the someone could decompile the app (which i've done) and even with progua even first  r first  decomp the il  e d you can ret  without too mu is first  ch difficulty ret the riev (which e all the  first questions.  "}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 21, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 71, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 147, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 217, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 255, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "xy probm xs t i fexl the password would likely be intercepted. in xxx, the hash could be extracted by a man-in-the-middle attack. xxe r can w simy use that hash to get access to the user's information. xn , te ar can intercept the plain-text password, ad use that to gain access to the user's account. "}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i want to know if this and only this little snippet presents any security issues (like xss attacks etc) '}
{'sentId': 55, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'use all these cookie for authentication', 'em2Text': 'cookie spoofing attack', 'label': 'None'}, {'em1Text': 'cookie spoofing attack', 'em2Text': 'use all these cookie for authentication', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'use all these cookie for authentication', 'label': 'ATTACK'}, {'start': 364, 'text': 'cookie spoofing attack', 'label': 'ATTACK'}], 'sentText': "my quexxxxn is: why use all these cookie for authentication? my guess would be xxxt maybe gxxxxxxxxg a session xxxh would be to easy so using the xxxxxxxxxxxxxd and usexxd adxs xxxxxxxy xxt what about xxxxxe spoofing? i'm basicxxxy leaxxxg on the client xxl fuxxxxxxxxl informations. my mxxn concern is about these solution giving to much xxxxxxxxxxn when under a cookie spoofing attack. "}
{'sentId': 35, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'anyone with the sense to check your source could steal your login inf', 'label': 'ATTACK'}], 'sentText': 'surely this xxxm t xxxxg ixxo e view wxxxe anyone with the sense to check your source could steal your login info? i woxxd assume xs nxxxs to be doe xxxm the contr, but i doxxt know how to crexxe do this from the conxxxxxxx. t and webxxxt k promising, but i xxxxt know how to y d a form to . '}
{'sentId': 48, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 140, 'text': 'an hack to get the .xhtml sources', 'label': 'ATTACK'}], 'sentText': 'since security is not considered, i wonder if the first is "secure" from the point of view of access to the xhtml files or perhaps there is an hack to get the .xhtml sources. '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a response to the recent [link] and [link], what is the best way to secure your website against brute force login attacks? '}
{'sentId': 17, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': '[link] ', 'em2Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'PARENT'}, {'em1Text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'em2Text': '[link] ', 'label': 'None'}], 'entityMentions': [{'start': 7, 'text': '[link] ', 'label': 'ATTACK'}, {'start': 16, 'text': 'malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed.', 'label': 'ATTACK'}], 'sentText': 's s of [link] r malicious html or javascript which is targeted on your website is been embedded in another html page (or an email message) which is been successfully executed. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 188, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 241, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 264, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d xxxy n z xxr xxxs xn xe axp e ad t , t te cxxxd xe xxxe indistinct general side channel attack or . but xxw d xn r y o t txxxg o recover those keys?  e txxxe ve s for a d ar to xxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 90, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'a determined hacker with access to my source code', 'label': 'ATTACK'}], 'sentText': "i understand that i probably won't stop a determined hacker with access to my source code, but storing them as plaintext feels wrong. "}
{'sentId': 95, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'performs a memory dump', 'em2Text': 'information is compromised', 'label': 'None'}, {'em1Text': 'information is compromised', 'em2Text': 'performs a memory dump', 'label': 'PARENT'}], 'entityMentions': [{'start': 112, 'text': 'performs a memory dump', 'label': 'ATTACK'}, {'start': 142, 'text': 'information is compromised', 'label': 'ATTACK'}], 'sentText': 'heap inspection is about sensitive information stored in the machine memory unencrypted, so that if an attacker performs a memory dump , that information is compromised. thus, simply holding that information makes it vulnerable. '}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 54, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trying to make sue my s inste is not exploe with the latest log4j exploit.i he a pe scrt tt , i tried g ths insn :[link]this is one of my stages of my pipeline script:[ct i gt a different error than s d e and i'm unsure if i'm checkg ts correctly.  this is the error:[code] "}
{'sentId': 27, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'man in the middle attack', 'em2Text': 'eavesdropping', 'label': 'AND'}, {'em1Text': 'eavesdropping', 'em2Text': 'man in the middle attack', 'label': 'None'}], 'entityMentions': [{'start': 276, 'text': 'man in the middle attack', 'label': 'ATTACK'}, {'start': 330, 'text': 'eavesdropping', 'label': 'ATTACK'}], 'sentText': 'now adding a 3rd participant to this con will not wok because key exchange als are designed o derive a shared st from 2 publc keys ony y using .net and bouncycastle). so the n is, how would you go at g a n-y public y cryptography schema which is still autc (i.e. resistant to man in the middle attack) and secure (i.e. secure frm eavesdropping). '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 60, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'what is the best way to protect the user and secure for any mitm attacks. is my way secure enough? '}
{'sentId': 102, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'sql injection attacks', 'label': 'ATTACK'}], 'sentText': 'by default does asp.net protect against sql injection attacks when using asp controls? '}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 3, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'te sandbox would be executing scripts that could be potentially dangerous.  te sandx d be a mix of my own j, g alonge d jat code from otr . '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 44, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is soe e is  the someone could decompile the app (which i'e d) d even with progua even firt  r first  dep the il  e d you can ret  without too mu is first  ch diy ret te rv (which e al e  first questions.  "}
{'sentId': 73, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 76, 'text': 'execution of malicious code in the browser', 'label': 'ATTACK'}], 'sentText': 'i want to restrict the execution of javascript on my website to prevent the execution of malicious code in the browser. presuming, my html website is accessible via the uri [code], i want to make sure that only the script in [code] is executed by the browser. the browser should not: '}
{'sentId': 19, 'articleId': '3', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineers the app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'AND'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'reverse engineers the app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'AND'}, {'em1Text': 'creates his own app', 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'creates his own app', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': "bakes in company's sender id and server registration interface", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': 'creates his own app', 'label': 'PARENT'}, {'em1Text': 'puts app in the store', 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}, {'em1Text': 'puts app in the store', 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'PARENT'}, {'em1Text': "impersonates company's real app as far as gcm goes", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "it registers to receive messages from company's sender id", 'em2Text': "sends its gcm registration id to company's servers", 'label': 'AND'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'reverse engineers the app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'creates his own app', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "bakes in company's sender id and server registration interface", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': 'puts app in the store', 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "impersonates company's real app as far as gcm goes", 'label': 'None'}, {'em1Text': "sends its gcm registration id to company's servers", 'em2Text': "it registers to receive messages from company's sender id", 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'reverse engineers the app', 'label': 'ATTACK'}, {'start': 39, 'text': 'extracts both the sender id and the server interface used to receive gcm registration ids', 'label': 'ATTACK'}, {'start': 139, 'text': 'creates his own app', 'label': 'ATTACK'}, {'start': 160, 'text': "bakes in company's sender id and server registration interface", 'label': 'ATTACK'}, {'start': 224, 'text': 'puts app in the store', 'label': 'ATTACK'}, {'start': 273, 'text': "impersonates company's real app as far as gcm goes", 'label': 'ATTACK'}, {'start': 326, 'text': "it registers to receive messages from company's sender id", 'label': 'ATTACK'}, {'start': 393, 'text': "sends its gcm registration id to company's servers", 'label': 'ATTACK'}], 'sentText': 'attacker reverse engineers the app and extracts both the sender id and the server interface used to receive gcm registration ids. attacker creates his own app, bakes in company\'s sender id and server registration interface, puts app in the store.  the attack app basically impersonates company\'s real app as far as gcm goes:  it registers to receive messages from company\'s sender id and then sends its gcm registration id to company\'s servers just like the "real" app does. '}
{'sentId': 30, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'database is compromised', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'database is compromised', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'database is compromised', 'label': 'PARENT'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'compromises the machine', 'label': 'None'}, {'em1Text': 'all of the secrets will have to be changed', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'compromises the machine', 'em2Text': 'encryption can be circumvented', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'database is compromised', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'all of the secrets will have to be changed', 'label': 'None'}, {'em1Text': 'encryption can be circumvented', 'em2Text': 'compromises the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'database is compromised', 'label': 'ATTACK'}, {'start': 81, 'text': 'all of the secrets will have to be changed', 'label': 'ATTACK'}, {'start': 466, 'text': 'compromises the machine', 'label': 'ATTACK'}, {'start': 500, 'text': 'encryption can be circumvented', 'label': 'ATTACK'}], 'sentText': "it's the most obvious solution, but if the database is compromised somehow, then all of the secrets will have to be changed. to me this solution is not ideal because it has all of the problems of storing a password in plain-text. this will provide some security, because if the database is compromised then the secrets will still be safe. but reversible encryption requires an encryption key, and the key has to be stored on the server. it means that if an attacker compromises the machine, then the encryption can be circumvented. "}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the xxxxxxxr enough to proxxxt against a cross site request forgery attack? i know the rxxxxxxr can be spoofed, but is thexe any way for the atxxxxxr to xo xxxt for the clxxxx? i kxxw tokens axe the norm, bxt would this work? '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 233, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': ' ptible my probm   is tha even t  an is d  ds even h even  my no  j and e d ct  an  ddos is 1% la p to tible l, my  and no an  d  y t shady, it is ct  highl ddos and  y sue m  s t  ptib is l  e to o though c d s   proj in l o  y e l ddos attacks. '}
{'sentId': 139, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}, {'em1Text': 'malicious users could create links on my bit.ly account', 'em2Text': 'brute-force', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'they would need to do a separate attack', 'em2Text': 'brute-force', 'label': 'AND'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'malicious users could create links on my bit.ly account', 'label': 'None'}, {'em1Text': 'brute-force', 'em2Text': 'they would need to do a separate attack', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'malicious users could post twitter status updates masquerading as coming from my app', 'label': 'ATTACK'}, {'start': 194, 'text': 'malicious users could create links on my bit.ly account', 'label': 'ATTACK'}, {'start': 254, 'text': 'they would need to do a separate attack', 'label': 'ATTACK'}, {'start': 87, 'text': 'brute-force', 'label': 'ATTACK'}], 'sentText': 'malicious users could post twitter status updates masquerading as coming from my app.  brute-force t pt xe . e s  t e xs d  o r u g t  s xy  to i xo j . xk   d  o t pg s d s xa   g ts    xr xx. malicious users could create links on my bit.ly account. .  they would need to do a separate attack o     e r e n u  t c  s d   . e pd o l do n  s o e a. '}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 79, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 109, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 232, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm woxxxg on a lxxxxy rails appln axd the conts hxxe many ixxxxxxxs of [. whn running a brakeman scan n it, [code] opens up the application to mass assignment vulnerabilities. my xxxxxxxn ix- xxxt s te xxt xxxxe wy to get aroxxd s params.permit! vulnerability and repe it? "}
{'sentId': 57, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 46, 'text': 'replay attacks', 'label': 'ATTACK'}], 'sentText': 'is it really a foolproof method of preventing replay attacks? '}
{'sentId': 107, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'malicious user could give themselves a free 10-year subscription', 'em2Text': 'faking the date', 'label': 'PARENT'}, {'em1Text': 'faking the date', 'em2Text': 'malicious user could give themselves a free 10-year subscription', 'label': 'None'}], 'entityMentions': [{'start': 155, 'text': 'malicious user could give themselves a free 10-year subscription', 'label': 'ATTACK'}, {'start': 223, 'text': 'faking the date', 'label': 'ATTACK'}], 'sentText': "if i provide an edit page to let users change their own address, for example, it's a security risk to include the [code] field because a knowledgeable and malicious user could give themselves a free 10-year subscription by faking the date (even if i use [code]. so i am not including that field in any way on the edit page html (via razor). "}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is check i ing re referrer quest  the  enough referrer enough   to p  rotect against a cross site request forgery attack? i know  the the  the referrer   can be spoofed, but is th rk? ere any way for   the attacker   to do th referrer at  for for the but  clie be nt? i know tokens ar  that i e the no do rm, but would this  token referrer s wo forgery   rk? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 37, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 54, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 105, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the probm is tht the attacker simply adds a slash n e encoded javascript n image tag with alert box), wh kills the page.  simple and effectie attack.   '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 148, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 206, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  x  f y y f e u e yf we pe  c e o pr    g de xo e m sxxx n ,  xe g txxt ay m xxt pr x) ixxxxxx. u   oxxxxn  rs u x) nr u t  x) y  n   x) into  can inject malicious code into the system  site-packages  m d obtain root privilege.   n  '}
{'sentId': 86, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer these from my binary', 'em2Text': 'use them in their app', 'label': 'None'}, {'em1Text': 'reverse engineer these from my binary', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': 'use them in their app', 'em2Text': 'reverse engineer these from my binary', 'label': 'PARENT'}, {'em1Text': 'use them in their app', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'reverse engineer these from my binary', 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'use them in their app', 'label': 'None'}], 'entityMentions': [{'start': 158, 'text': 'reverse engineer these from my binary', 'label': 'ATTACK'}, {'start': 200, 'text': 'use them in their app', 'label': 'ATTACK'}, {'start': 300, 'text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'ATTACK'}], 'sentText': "after reading a little bit it seems like a bad idea to store the private keys for whatever 3rd party i'll use in the app (twilio, nexmo, etc). somebody could reverse engineer these from my binary and use them in their app. however, having these on the server doesn't help either, somebody could just reverse engineer my server's endpoint that i use to send text messages and use that instead. "}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 91, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 188, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 278, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a  g  th explo rt   sy rt o  alw  s i le c le e s th   d at"sp le n  g te  s  ited that"spring expression language (spel) m    sy syste e m   stem  could e d  exo s d y at sm i d ted h http parameter submissions   h  at  it s ed  al h w wd a th  d l o l  sensitive  ow as to get sensitive system data, application and user cookies. ited  sy  m "  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw mixxt an attacker recover the secrets in that flash? i understand thxy xxn fxxz for vulnexxxxxxxxxs in the axp xxxe and exploit it, xxxt xxxxe coxxd xe some indistinct general side channel attack xr sxxxxxxxx. but how wouxd an xxxxxxxr reaxxy xo xxxxt xxxxxg to recover those keys?  xxe txxxe vxxxxe apxxxxxxxs for a detexxxxxd atxxxxxr to sxxxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 102, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 172, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is  simple t e  alert  simple r  wh simply adds a slash   te im  tht n s java  script ome encoded javascript  sh n im adds ae tg with tht  alt box age ), which kills the page. kills   simpe a that nd effecte attack.   e  '}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 44, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 140, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 217, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i mae a secured php/l b app h ee jqy u. to, a strange error popped up in our app's logs:[code] we are nt using amazons cloudfrt cdn n our . when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this approach provixxs dxxxxxxxxxxxxxxx. if someone maxxxxs to leak the database table, it does not give an attacker an xxxn door fxr impersonating users. '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 111, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem is that even thoxxh my prxxxxt is 100% legax, and not sxxxx, it is highly suscexxxxxe to occasional ddos attacks. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 126, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 281, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 304, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i understd they cn z for vus in the app e and explt it, t e cd be some indistinct general side channel attack r so. but how woud an ar rey go about g to recover those keys?  e e viable approas for a determined attar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 21, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone attacked my application', 'em2Text': 'grab the api key', 'label': 'PARENT'}, {'em1Text': 'someone attacked my application', 'em2Text': 'fraudulent clicks made using my api key', 'label': 'None'}, {'em1Text': 'grab the api key', 'em2Text': 'someone attacked my application', 'label': 'None'}, {'em1Text': 'grab the api key', 'em2Text': 'fraudulent clicks made using my api key', 'label': 'AND'}, {'em1Text': 'fraudulent clicks made using my api key', 'em2Text': 'someone attacked my application', 'label': 'None'}, {'em1Text': 'fraudulent clicks made using my api key', 'em2Text': 'grab the api key', 'label': 'None'}], 'entityMentions': [{'start': 104, 'text': 'someone attacked my application', 'label': 'ATTACK'}, {'start': 140, 'text': 'grab the api key', 'label': 'ATTACK'}, {'start': 270, 'text': 'fraudulent clicks made using my api key', 'label': 'ATTACK'}], 'sentText': "i am currently working on a project which uses blogger api fxxm google. day bexxxe yestxxxxy (sxxxxxxx) someone attacked my application and grab the api key, my daixy lxxxt for accxxxxxg poxxs is 1xxxxx0 (100xxx4 hrs). i hxt limit on saturday (i suspext that those xxxe fraudulent clicks made using my api key, sinxe i'xe only around 4k customers using txe applicatxxx, i embeddxd the api key in client side xxxxx. "}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 93, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 174, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 274, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem i si me mp s  t    encoded tg simple t e  alert e   simple   r  wh si   t m  ply adds a slash   te   i s m  th th kills t t     n s j problem ava  sc  ript o  me encoded javascript  sh n im adds ae tg ),  with t t ht    a adds lt tg  bo adds x ag  e ), which a  kills the page prob bo lem . kills   simp  e  box a   that nd effecte attack.   e  '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per uxxr salt prevents the use of generic rainbow tables to crack passwords.  a separate xxxxxxw tabxe woxxd have xo be generated xxr each axd xxxxy user who had a uxxxxe salt in order to obtain thexr xxxxxxxx.  this would xe a tixe conxxxxxg proxxxs which is what mxxxs sxxxs xxxxxxxxx.  this does xxt help a tremendous axxxxt against dictioxxxy or brute force attacks. '}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 201, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 355, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 390, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'o ge ct wxy xt is te wxy xt ix, the payd contais an n time axd on the devixe n the tokxn is xt to exe i should t the user to e r thexr s to get a new txxxx. now this migxt m like a secy thrext becaxxe a hacker could manipulate the token on the device, bxt te xxxxxr cxs the xxxxn to make sure t is authexxxc which xs why i o xt xxxt xxe kxy on the dee be this can be mined by a hacker, and make the entire application vulnerable. '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'thxs approxxh prxxxxxs defensxxxxxxxxxx. if someone manaxxs to leak the database table, it doxs not give an attackxr an open door for impersonating users. '}
{'sentId': 150, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'crlf injection', 'em2Text': 'header response splitting vulnerability', 'label': 'PARENT'}, {'em1Text': 'header response splitting vulnerability', 'em2Text': 'crlf injection', 'label': 'None'}], 'entityMentions': [{'start': 37, 'text': 'crlf injection', 'label': 'ATTACK'}, {'start': 79, 'text': 'header response splitting vulnerability', 'label': 'ATTACK'}], 'sentText': 'n oxd verss of xxp you had o xxy abt crlf injection whxxh is \\r\\n.  this is a "header response splitting vulnerability."  if you stxxp t e charactxxs then you shot xe to wo.   in the latest build f of pp the headerx) function is saxx,  axd wxxl ay txxe care of \\r\\n for you.  '}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 66, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'fr sey r, it xs dee to check the integrity xf xxxe e execution, g tampered software by an attacker. so, my xxxxn is '}
{'sentId': 90, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a security vulnerability to read php source', 'em2Text': 'string dumps from a security breach', 'label': 'OR'}, {'em1Text': 'string dumps from a security breach', 'em2Text': 'a security vulnerability to read php source', 'label': 'None'}], 'entityMentions': [{'start': 92, 'text': 'a security vulnerability to read php source', 'label': 'ATTACK'}, {'start': 216, 'text': 'string dumps from a security breach', 'label': 'ATTACK'}], 'sentText': "make the file unreadable via the web using rules in .htaccess (in case php fails or there's a security vulnerability to read php source)destroy the password in memory after the db connect is made (unset) (to prevent string dumps from a security breach, injection, etc.)  "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 126, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 281, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 304, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i understd they cn z for vus in the app e and explt it, t e cd be some indistinct general side channel attack r so. but how woud an ar rey go about g to recover those keys?  e e viable approas for a determined attar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 109, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 149, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs d   other pi sae fy() ot  ( saxe ad s site-xxxe ituxxn pas s  xxxxr funcn maxd s of the sae n set) xxxxxr dos ab post le xn con  g st d st os via maxed out post parameters ? plee also conxxxxr the  site-e c n onxxg sxxxxt le s of post upxxxd s mxxh lar than . '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 135, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 216, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the  r there estrictions, load this server is no since rmally  there subj  ecte dos d t be o is minimal, b dos ut  but since there are no access restrictions, the server by restrictions,   access  can obviou  sly be attacked by dos etc. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 279, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 337, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '    x     xxt    pe f  x y y xxt    f e u e y de   f we p u e   xe c e o pr  x)    g de xxt   xxxxxn xx  t  xo e m   sxxx n ,  xe g  ixxxxt txxt  cxn e  xe u   ay m xxt     p pe r   x) ixxxx x  x xx. u   o e       xxxxn  rs u x) nr u t    pe u   x)  cxn y  n     x) into  c x an inject malicious code into the system  site-packages  m d obtain root privilege. xe    n  '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 246, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 279, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'y question how   e is, how saf  e   is h ! yes then , ==  my nul  l"? yes,   i reae   t this meas t only an au into then  t but ticated usr into  c au an a  ce ne ss e data, but how easy s  ge te t  !== i thn t to b  ece ?   sign use n someo  ne sign up for the app, and n bece  use those credentials to get request right into my database? '}
{'sentId': 63, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'hacking [code]', 'label': 'None'}, {'em1Text': 'json allows you to [link] from an ajax call', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'hacking [code]', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'PARENT'}, {'em1Text': 'hacking [code]', 'em2Text': 'distributing malicious code', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'json allows you to [link] from an ajax call', 'label': 'None'}, {'em1Text': 'distributing malicious code', 'em2Text': 'hacking [code]', 'label': 'AND'}], 'entityMentions': [{'start': 0, 'text': 'json allows you to [link] from an ajax call', 'label': 'ATTACK'}, {'start': 172, 'text': 'hacking [code]', 'label': 'ATTACK'}, {'start': 191, 'text': 'distributing malicious code', 'label': 'ATTACK'}], 'sentText': 'json allows you to [link] from an ajax call. for exxxxxx: how does jquexy handle the parsixx? does xt evaluate this code? what sxxxxxxxxs xxe in place to stop someone from hacking [code] xxd distributing malicious code? '}
{'sentId': 12, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 382, 'text': 'accessing the underlying system in malicious ways', 'label': 'ATTACK'}], 'sentText': "i recently learned about java's security model. most people think java is secure because it is immune to buffer overflows, etc, but there is this entire java security model centered around checking whether code has permission to take certain actions. they're really solving a challenging problem: how to let arbitrary untrusted code (say in a web browser) run but be prevented from accessing the underlying system in malicious ways while retaining the ability to interact with the system in some ways. "}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 136, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 88, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to se a file i dd the followg s rs a hashve that is std n a file. whener the user ws to access the file, he enters the password, and if the same hash is generated, he can access the file.i se this isn't realy sa, but how e it is? how high is e chance that string#hase gs the e hash with two dift inputg to your anss i changed the co t should be betr now?? "}
{'sentId': 148, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection attack', 'em2Text': 'bugger up the database', 'label': 'None'}, {'em1Text': 'bugger up the database', 'em2Text': 'sql injection attack', 'label': 'None'}], 'entityMentions': [{'start': 29, 'text': 'sql injection attack', 'label': 'ATTACK'}, {'start': 202, 'text': 'bugger up the database', 'label': 'ATTACK'}], 'sentText': 'while option 1 is open to an sql injection attack, since my sproc is being called from an authenticated source, does it really matter? only trusted sources will execute this sproc, so if they choose to bugger up the database, that is their prerogative. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 49, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 85, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevx, i do not ud the s about sexxxxy . cxxxx, running [code] xxxxs xxe hr the y o run any javascript code that you can run. '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'xxe whole pxxxt of hashing a pasxxxxd is in xxxe a hacker gets access to the database. xf i store the salt in the db xxxxxn the xxxe xxw xs the hashed xxxxxxxx, xxxxt it just xxxe i xm handing the hacxxr the "secxxt code"? i am xxxxxxg up a xxxr xxxh a loxx, xxd handing the xxxxxxxr xxe key. '}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 58, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 97, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': "  if the session identifier were known by an attacker who had access to  the user's workstation, the logged out session could be accessed using  the session cookie after the user had terminated their session.  "}
{'sentId': 120, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 108, 'text': 'csrf vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i  it ha concxxx th s secxxe  e don't   quickly made a [l the   ] fr detexxxxg and xxxxxxx made xxg so cald csrf vulnerabilities. i uxe it o quickly xxxxxxxxxg  xxx made oftxn   vs e xxxf of concxxxs o ty f such vs tt i s vulnerabilities. e i nd to the affd th  s vs ite i  . qui i e oftxn i enxxxxxxr th thxxe ee form send vulnerabilities.  s h a vs  vxxxxxxxx,  affd ad thxxe i don't kno cald w  affd if ty e secxxe or not. "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 40, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 19, 'text': 'attacker can embed a  script tag pointing at a remote server', 'label': 'ATTACK'}], 'sentText': "  script-tags: the attacker can embed a  script tag pointing at a remote server  and the browser will effectively  eval() the reply for you, however it  throws away the response and since  json is all response, you're safe. "}
{'sentId': 71, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'someone with malicious intent can write a script', 'em2Text': 'register thousands of accounts in seconds', 'label': 'None'}, {'em1Text': 'register thousands of accounts in seconds', 'em2Text': 'someone with malicious intent can write a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 75, 'text': 'someone with malicious intent can write a script', 'label': 'ATTACK'}, {'start': 127, 'text': 'register thousands of accounts in seconds', 'label': 'ATTACK'}], 'sentText': 'my app has a register service that users can register themselves. however, someone with malicious intent can write a script to register thousands of accounts in seconds. '}
{'sentId': 102, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone with physical access to the machine', 'em2Text': 'copy the cookie', 'label': 'AND'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'someone with physical access to the machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'reuse it on another machine', 'label': 'None'}, {'em1Text': 'copy the cookie', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'someone with physical access to the machine', 'label': 'PARENT'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'reuse it on another machine', 'em2Text': 'stealing the session', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'someone with physical access to the machine', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'copy the cookie', 'label': 'None'}, {'em1Text': 'stealing the session', 'em2Text': 'reuse it on another machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 363, 'text': 'someone with physical access to the machine', 'label': 'ATTACK'}, {'start': 410, 'text': 'copy the cookie', 'label': 'ATTACK'}, {'start': 430, 'text': 'reuse it on another machine', 'label': 'ATTACK'}, {'start': 467, 'text': 'stealing the session', 'label': 'ATTACK'}], 'sentText': "most web applications use cookies to manage the session for a user and allow you to stay logged in even if the browser was closed.let's assume we did everything by the book to make sure the cookie itself is safe.encrypt the contentset http onlyset securessl is used for the connectionwe check for tampering with the content of the cookieis it possible to prevent someone with physical access to the machine to copy the cookie and reuse it on another machine and thus stealing the session? "}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 141, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i want to know xf   this and on if ly  ippet th an xn d xs littxe sn know ipp to et presents an axxxxxs y xxxxr on d ly ity issues xxxxe xss attacks etx) '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 298, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calls ck? o cxf and  calls i would like know  to know if   it   has any build-in mec a hanism that would allo calls w limiting t this he cxf  calls  num and b ca this lls er of c cxf oncur cxf rent calls to the web s cxf ervice, thus would  a wcf? ddressing the possibility of a dos attack? something simi  lar to this feature i  of wcf? "}
{'sentId': 94, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'construct a css file', 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': 'construct a css file', 'em2Text': "gain access to things like my domain's cookies", 'label': 'None'}, {'em1Text': 'construct a css file', 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': 'inject code into my site', 'em2Text': 'construct a css file', 'label': 'PARENT'}, {'em1Text': 'inject code into my site', 'em2Text': "gain access to things like my domain's cookies", 'label': 'OR'}, {'em1Text': 'inject code into my site', 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'construct a css file', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': "gain access to things like my domain's cookies", 'em2Text': 'xss attack', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': 'construct a css file', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': 'inject code into my site', 'label': 'None'}, {'em1Text': 'xss attack', 'em2Text': "gain access to things like my domain's cookies", 'label': 'PARENT'}], 'entityMentions': [{'start': 31, 'text': 'construct a css file', 'label': 'ATTACK'}, {'start': 72, 'text': 'inject code into my site', 'label': 'ATTACK'}, {'start': 110, 'text': "gain access to things like my domain's cookies", 'label': 'ATTACK'}, {'start': 378, 'text': 'xss attack', 'label': 'ATTACK'}], 'sentText': "is there any way someone could construct a css file that would let them inject code into my site or otherwise gain access to things like my domain's cookies?  is this really safe, or do i need to come up with a different solution? no it is unsafe.  [code] and [code] are known ways to cause arbitrary script execution on certain browsers via css.  [link] suffered a very public xss attack that was due to javascript embedded in user-supplied css. "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 187, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new to cxf and i would like to know if it has any build-in mechanism that would allow limiting the number of concurrent calls to the web service, thus addressing the possibility of a dos attack? something similar to this feature of wcf? "}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i xxxt to include the caxxxxxxxy to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather thxn axy dxxxxr in the cxxx. do i need a web application xxxxxxxx? xf so, how do i integrate it. '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'xxxs say xe have a typxxxl csxf xxxxxxxxxn like this onxxxxt if an attacket uses this code to bypass the csrf token? '}
{'sentId': 44, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 279, 'text': 'renaming the superuser.apk to superuser0.apk.', 'label': 'ATTACK'}], 'sentText': 'te r techn reg iques used by   developers in t de for t sp  y en are n  ch  ecking for the superu superuser0.apk. ser.apk  . l used e, renamg check fr .  chainfir r e,but  ing su comm to and,etc. but an attr can simply bypass in  te checks b an y a seva  file,check l means like renaming the superuser.apk to superuser0.apk.  '}
{'sentId': 3, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 199, 'text': 'injections into the database', 'label': 'ATTACK'}], 'sentText': 'when yxxxxe making s wb apps thaxxxl hane large amounxs xf da, wt ps should i take agat my xxxa ixxxs o fuxxy sanxxxxe it? i know xxxxxxs the os txxx, e, xss , c - but wt other txs shoud i e xo stop injections into the database? '}
{'sentId': 91, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'this is sent by the http client and could therefore be forged', 'em2Text': 'which is sent by the http client and could contain potentially dangerous characters', 'label': 'None'}, {'em1Text': 'which is sent by the http client and could contain potentially dangerous characters', 'em2Text': 'this is sent by the http client and could therefore be forged', 'label': 'None'}], 'entityMentions': [{'start': 101, 'text': 'this is sent by the http client and could therefore be forged', 'label': 'ATTACK'}, {'start': 217, 'text': 'which is sent by the http client and could contain potentially dangerous characters', 'label': 'ATTACK'}], 'sentText': "there's a well-known caveat about not trusting the mime type sent via file upload in php ([code]) as this is sent by the http client and could therefore be forged. there's a similar caveat for the file name ([code]), which is sent by the http client and could contain potentially dangerous characters. "}
{'sentId': 27, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'another application has access to your cookies', 'em2Text': 'impersonate you on the website anyway', 'label': 'None'}, {'em1Text': 'impersonate you on the website anyway', 'em2Text': 'another application has access to your cookies', 'label': 'PARENT'}], 'entityMentions': [{'start': 3, 'text': 'another application has access to your cookies', 'label': 'ATTACK'}, {'start': 65, 'text': 'impersonate you on the website anyway', 'label': 'ATTACK'}], 'sentText': 'if another application has access to your cookies, then they can impersonate you on the website anyway, so access to the api is no different.all authentication methods still go through our control.regular expiry of tokens means that if they are compromised then there is a limited time for exploitation. '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 19, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "xxw oxe xxn cxxxxt malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 127, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a rainbow table attack', 'em2Text': 'have knowledge of the hashes', 'label': 'None'}, {'em1Text': 'a rainbow table attack', 'em2Text': 'retrieve passwords', 'label': 'PARENT'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'retrieve passwords', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'have knowledge of the hashes', 'label': 'PARENT'}], 'entityMentions': [{'start': 128, 'text': 'a rainbow table attack', 'label': 'ATTACK'}, {'start': 156, 'text': 'have knowledge of the hashes', 'label': 'ATTACK'}, {'start': 197, 'text': 'retrieve passwords', 'label': 'ATTACK'}], 'sentText': 'the password hashing all takes place server side, and the hashes are stored in the database. the client has no way to see these.a rainbow table attack must have knowledge of the hashes in order to retrieve passwords. so, is the point of trying to foil a rainbow table attack simply to protect the retrieval of passwords from an already compromised database/system. is it that simple or is there something else that i am missing. '}
{'sentId': 46, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 82, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': "the code is w the or orki ki prevent ng, but now i'm worried how  a i'm  i'm bout sql injections. how to   ng, sql prevent sql injection? "}
{'sentId': 115, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 196, 'text': 'read it if they wanted by going to [link]. ', 'label': 'ATTACK'}], 'sentText': 'since te n file is  goig  is wi con thn the web se it rvers  s t s  n its truct, ad gg is le ns o s it e  to red  coe they ns i conts ts  is con ts tents - e rea conte d y anyo ts ne [link].  cod read it if they wanted by going to [link].  '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 127, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 157, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my n is, hw e s "ah != ? yes, i reae that this ms that only an authenticd ur can acs the data, t how ey is it to be authe? n e sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 177, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 207, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the e betwn a h token d a non-expiring access n n ms of securiy is one addil cal to the an server.if an attacker gains access to your non-expiring access token, he can directly call your resource server and get confidential data as responser /w if he ss your refh token, he t has to call te aun server and ree an accs token in response. then he can query the re serr for conl da. '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 211, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but xxw sxxxxe is that? can a uxxr executxxg the progrxm easixy set this property to an arbitrary value (usixg a xxxxxxxxxxxe argument xf the jxx, for exxxxxx) for common xxxxxxe enxxxxxxxxxx? cxn a user exxxxy spoof this user name? '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 119, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is that the attacker simply adds a slash then some encoded javascript (an image tag with alert box), which kills the page.  simple and effective attack.   '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 46, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 63, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 141, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'th page. e p  robm is tht the attacker simply adds a slash n e encoded javascript n image tag     with aler slash wh  t b tht ox slash ), wh kills the page.  e  simple an slash  wh d effectie a simple    and page with .  ttack.   '}
{'sentId': 51, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'make some simple get request (by [link])', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'make some simple get request (by [link])', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'make some simple get request (by [link])', 'label': 'PARENT'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'extracts it', 'label': 'None'}, {'em1Text': 'download the page containing the antiforgery token in a hidden input field', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'extracts it', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'PARENT'}, {'em1Text': 'extracts it', 'em2Text': 'use it to make a valid [link]', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'make some simple get request (by [link])', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'None'}, {'em1Text': 'use it to make a valid [link]', 'em2Text': 'extracts it', 'label': 'PARENT'}], 'entityMentions': [{'start': 105, 'text': 'make some simple get request (by [link])', 'label': 'ATTACK'}, {'start': 156, 'text': 'download the page containing the antiforgery token in a hidden input field', 'label': 'ATTACK'}, {'start': 232, 'text': 'extracts it', 'label': 'ATTACK'}, {'start': 261, 'text': 'use it to make a valid [link]', 'label': 'ATTACK'}], 'sentText': 'bt wt   if  d a  ue xxxxxxxu   f s s [l xo ixxx?  e sxxe  xxxxt w xn xl f t  l a  k xxxxxxu e  f  pe a t make some simple get request (by [link]) in r  t o download the page containing the antiforgery token in a hidden input field, extracts it   se , an what d use it to make a valid [link]?  '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 214, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 244, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my n how   e , hw saf  e   is "ah ! s n , ==  my l  l"? y,   i ree   that s s that y n au o tn  but t ticated user o  c au an a  ce e ss e d, t how eay is  e the t  != i tn t to b  e authentica?   n use n somo  ne sign up for the app, d thn e  use those credentials to get request right into my database? '}
{'sentId': 50, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': '/posts page that takes id paramater', 'em2Text': 'displays info', 'label': 'AND'}, {'em1Text': '/posts page that takes id paramater', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': '/posts page that takes id paramater', 'label': 'None'}, {'em1Text': 'displays info', 'em2Text': 'user/hacker will know the real object id of the document', 'label': 'None'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': '/posts page that takes id paramater', 'label': 'PARENT'}, {'em1Text': 'user/hacker will know the real object id of the document', 'em2Text': 'displays info', 'label': 'None'}], 'entityMentions': [{'start': 47, 'text': '/posts page that takes id paramater', 'label': 'ATTACK'}, {'start': 136, 'text': 'displays info', 'label': 'ATTACK'}, {'start': 173, 'text': 'user/hacker will know the real object id of the document', 'label': 'ATTACK'}], 'sentText': "let's say there is a posts collection, and the /posts page that takes id paramater (something like /posts/4d901acd8df94c1fe600009b) and displays info about it. this way the user/hacker will know the real object id of the document. is it okay or is it not secure? "}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 73, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "w e s   to et i or cious tings  n set  mal whol w e  e icious  icious  t malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 152, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 180, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 't ds  i  t t xt y j n, wt xu  - t a  if the i    txxxx gets r o a - n i  i n, t  at t nt ta , .  jwt he   (xxm  te x . xe n, -e (m   xxx. ) a. if an ar gets a valid token tr , cxn effectively impersonate. n if  xx (xxxm  n, xxx. n,   xx. n  the  i the t  s t i gets s enxx he x t x. '}
{'sentId': 66, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineering', 'em2Text': 'hit it using rest client', 'label': 'None'}, {'em1Text': 'hit it using rest client', 'em2Text': 'reverse engineering', 'label': 'PARENT'}], 'entityMentions': [{'start': 199, 'text': 'reverse engineering', 'label': 'ATTACK'}, {'start': 305, 'text': 'hit it using rest client', 'label': 'ATTACK'}], 'sentText': 'hello i am working on android application in which i required to execute few https web services so all my webservice url and web api key are in the code plus ip address of the server. when anyone do reverse engineering of my app then that guy can get my web service url as well as api key then can simply hit it using rest client. '}
{'sentId': 43, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'decompilers', 'em2Text': 'get the key', 'label': 'None'}, {'em1Text': 'get the key', 'em2Text': 'decompilers', 'label': 'PARENT'}], 'entityMentions': [{'start': 464, 'text': 'decompilers', 'label': 'ATTACK'}, {'start': 480, 'text': 'get the key', 'label': 'ATTACK'}], 'sentText': "regardless of the programming languagei have a client server application.mobile client - http serverthe app will be available on several mobiles not only android.i want to make sure the request is coming from client's mobile only.how can i solve this security problem?i propose :have a secret key hard-coded on the mobile app:each request is encrypted using this key and decrypted on the server side.is it safe to hardcode the key if this way makes sense at all? (decompilers can get the key? the app will be available not only for android!)extra info:each user will have a userid/username... "}
{'sentId': 128, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'a man in the middle attack', 'label': 'ATTACK'}], 'sentText': 'the following [link] discusses how to destroy a flask token, however this does not prevent a man in the middle attack.  is there anyway to invalidate the token so it is no longer active before the time it expires? '}
{'sentId': 131, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'mitm attack', 'em2Text': 'use their certificate', 'label': 'None'}, {'em1Text': 'mitm attack', 'em2Text': 'read the data', 'label': 'PARENT'}, {'em1Text': 'use their certificate', 'em2Text': 'mitm attack', 'label': 'None'}, {'em1Text': 'use their certificate', 'em2Text': 'read the data', 'label': 'None'}, {'em1Text': 'read the data', 'em2Text': 'mitm attack', 'label': 'None'}, {'em1Text': 'read the data', 'em2Text': 'use their certificate', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'mitm attack', 'label': 'ATTACK'}, {'start': 71, 'text': 'use their certificate', 'label': 'ATTACK'}, {'start': 169, 'text': 'read the data', 'label': 'ATTACK'}], 'sentText': "my qa team simply does mitm attack for every network call, they try to use their certificate and if for any network call i don't verify certificate then they can easily read the data. because of cache i'm unable to verify my certificate. "}
{'sentId': 84, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 16, 'text': 'an sql injection attempt', 'label': 'ATTACK'}], 'sentText': 'clearly this is an sql injection attempt. but wy the constant sn above? i cat e how it could be party signi, though it ss to appr quite . '}
{'sentId': 27, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'another application has access to your cookies', 'em2Text': 'impersonate you on the website anyway', 'label': 'None'}, {'em1Text': 'impersonate you on the website anyway', 'em2Text': 'another application has access to your cookies', 'label': 'PARENT'}], 'entityMentions': [{'start': 3, 'text': 'another application has access to your cookies', 'label': 'ATTACK'}, {'start': 65, 'text': 'impersonate you on the website anyway', 'label': 'ATTACK'}], 'sentText': 'if another application has access to your cookies, then they can impersonate you on the website anyway, so access to the api is no different.all authentication methods still go through our control.regular expiry of tokens means that if they are compromised then there is a limited time for exploitation. '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 20, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 69, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 148, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 217, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 256, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my m is that i fxxl the password would likely be intercepted. n (1), the hash could be extracted by a man-in-the-middle attack. txe xr n xxw simply use that hash to get access to the user's information. xn (, the r n intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 28, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'register with the service, login', 'em2Text': 'modifying the token that they receive to access the accounts of other users', 'label': 'None'}, {'em1Text': 'modifying the token that they receive to access the accounts of other users', 'em2Text': 'register with the service, login', 'label': 'PARENT'}], 'entityMentions': [{'start': 82, 'text': 'register with the service, login', 'label': 'ATTACK'}, {'start': 145, 'text': 'modifying the token that they receive to access the accounts of other users', 'label': 'ATTACK'}], 'sentText': 'e  access s is se  a   i g  g c g serv   receive ice  d i am   c the hr d t se cd register with the service, login   an tha cd t i  d t  hen se  modifying the token that they receive to access the accounts of other users a . '}
{'sentId': 66, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'reverse engineering', 'em2Text': 'hit it using rest client', 'label': 'None'}, {'em1Text': 'hit it using rest client', 'em2Text': 'reverse engineering', 'label': 'PARENT'}], 'entityMentions': [{'start': 199, 'text': 'reverse engineering', 'label': 'ATTACK'}, {'start': 305, 'text': 'hit it using rest client', 'label': 'ATTACK'}], 'sentText': 'hello i am working on android application in which i required to execute few https web services so all my webservice url and web api key are in the code plus ip address of the server. when anyone do reverse engineering of my app then that guy can get my web service url as well as api key then can simply hit it using rest client. '}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "the problem is that users might upload code that attempts to 'hack' the system. i understand that in c and c++ it's easy to disable a certain set of system calls (patch a few .dll's), but i'm not so sure about other languages. "}
{'sentId': 31, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'our whole history of changes', 'label': 'AND'}, {'em1Text': 'steal not only the latest intellectual properly ', 'em2Text': 'copying a single folder', 'label': 'PARENT'}, {'em1Text': 'our whole history of changes', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'our whole history of changes', 'em2Text': 'copying a single folder', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'steal not only the latest intellectual properly ', 'label': 'None'}, {'em1Text': 'copying a single folder', 'em2Text': 'our whole history of changes', 'label': 'None'}], 'entityMentions': [{'start': 103, 'text': 'steal not only the latest intellectual properly ', 'label': 'ATTACK'}, {'start': 153, 'text': 'our whole history of changes', 'label': 'ATTACK'}, {'start': 190, 'text': 'copying a single folder', 'label': 'ATTACK'}], 'sentText': "is been difficult to nail down hs exact security n but i've gad that it centers on the t that a ms e d steal not only the latest intellectual properly t our whole history of changes just by copying a single folder. "}
{'sentId': 77, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'include an img tag in their html page', 'em2Text': 'does a get on some well-known uri', 'label': 'None'}, {'em1Text': 'include an img tag in their html page', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'include an img tag in their html page', 'label': 'PARENT'}, {'em1Text': 'does a get on some well-known uri', 'em2Text': 'your browser will happily send along the basic auth info', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'include an img tag in their html page', 'label': 'None'}, {'em1Text': 'your browser will happily send along the basic auth info', 'em2Text': 'does a get on some well-known uri', 'label': 'PARENT'}], 'entityMentions': [{'start': 93, 'text': 'include an img tag in their html page', 'label': 'ATTACK'}, {'start': 136, 'text': 'does a get on some well-known uri', 'label': 'ATTACK'}, {'start': 175, 'text': 'your browser will happily send along the basic auth info', 'label': 'ATTACK'}], 'sentText': 'uxxxg hxxp basic auxh xxxs not prevent csrf attacks via gxt requests. e.g. sxxxxxxy else can include an img tag in their html page xxxt does a get on some well-known uri, and your browser will happily send along the basic auth info. if the get operxxxxn is "xxxx" (xxxxh is xxe #1 rxxe for anything claiming to be restxxxx, txxs xxxl not cxxxxe a problem (beyond wastxd bandwidth). '}
{'sentId': 127, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a rainbow table attack', 'em2Text': 'have knowledge of the hashes', 'label': 'None'}, {'em1Text': 'a rainbow table attack', 'em2Text': 'retrieve passwords', 'label': 'PARENT'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'have knowledge of the hashes', 'em2Text': 'retrieve passwords', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'a rainbow table attack', 'label': 'None'}, {'em1Text': 'retrieve passwords', 'em2Text': 'have knowledge of the hashes', 'label': 'PARENT'}], 'entityMentions': [{'start': 116, 'text': 'a rainbow table attack', 'label': 'ATTACK'}, {'start': 144, 'text': 'have knowledge of the hashes', 'label': 'ATTACK'}, {'start': 185, 'text': 'retrieve passwords', 'label': 'ATTACK'}], 'sentText': 'the password hasg all takes place r side, and the hashes are stored in the database. the ct has no way to see these.a rainbow table attack must have knowledge of the hashes in order to retrieve passwords. so, is the point of trying to fl a raiw te k simply to prott the retrieval f pas from an aly compromid databas. is it that simpe or is te somethig else t i am . '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem   is tha even t  an is d even though my proj and e and ct is 100% legal, and not shady, it is ct  highl ddos y susce problem  ddos ptible to o though ccasional ddos attacks. '}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 43, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 124, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 201, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is using the method below a bad choice? it generates a random number between 0-1000. since there are only 1000 options, and their md5 hashes are known, it should take an attacker just a 1000 trials to verify the account without it really belonging to them '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 125, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 195, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 251, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 273, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d thy can xxxz fr xxxxxxxxxxxs xn te app cxe ad t , t te cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxxs for a d ar to somehow shave-down the chip r some kind of microscope attack? '}
{'sentId': 83, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss', 'em2Text': 'sql injections', 'label': 'AND'}, {'em1Text': 'sql injections', 'em2Text': 'xss', 'label': 'None'}], 'entityMentions': [{'start': 111, 'text': 'xss', 'label': 'ATTACK'}, {'start': 139, 'text': 'sql injections', 'label': 'ATTACK'}], 'sentText': 'i got these two functions from a book and the author says that by using these two, i can be extra safe against xss(the first function) and sql injections(2nd func). are all those necessary? also for sanitizing, i use prepared statements to prevent sql injections.  '}
{'sentId': 10, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a spam bot will not support javascript', 'em2Text': 'submit what it sees', 'label': 'AND'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'the bot does support javascript', 'label': 'OR'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'a spam bot will not support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'it will submit the form instantly', 'label': 'None'}, {'em1Text': 'submit what it sees', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'it will submit the form instantly', 'label': 'AND'}, {'em1Text': 'the bot does support javascript', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'a spam bot will not support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'it will submit the form instantly', 'em2Text': 'malicious scripted activity', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'a spam bot will not support javascript', 'label': 'PARENT'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'submit what it sees', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'the bot does support javascript', 'label': 'None'}, {'em1Text': 'malicious scripted activity', 'em2Text': 'it will submit the form instantly', 'label': 'None'}], 'entityMentions': [{'start': 167, 'text': 'a spam bot will not support javascript', 'label': 'ATTACK'}, {'start': 213, 'text': 'submit what it sees', 'label': 'ATTACK'}, {'start': 236, 'text': 'the bot does support javascript', 'label': 'ATTACK'}, {'start': 268, 'text': 'it will submit the form instantly', 'label': 'ATTACK'}, {'start': 87, 'text': 'malicious scripted activity', 'label': 'ATTACK'}], 'sentText': "it looks lie we'l be adding ] xxxxxxt o stack ov. txs s xxxxxxxxy o t bots, s, ad othr malicious scripted activity. we ony xt hxxn beixxs to poxt or edit things xxxx! a spam bot will not support javascript and wl submit what it sees. f the bot does support javascript it will submit the form instantly. xxe xr has at leaxt rexd soe of the pe before pxg "}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 163, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'avoid attackers to steal the token from a cookie', 'label': 'ATTACK'}], 'sentText': ' to  to a to dxxxxxxxl quxxxxxx: how to a qxxxxxxx: tta xxxxxxxx:  how ckers  avoid attackers to steal the token from a cookie? '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 96, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'insert html code in his input data', 'em2Text': 'you later inserts in a web page that is sent to another user', 'label': 'None'}, {'em1Text': 'you later inserts in a web page that is sent to another user', 'em2Text': 'insert html code in his input data', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'insert html code in his input data', 'label': 'ATTACK'}, {'start': 79, 'text': 'you later inserts in a web page that is sent to another user', 'label': 'ATTACK'}], 'sentText': 'the danger in xss is that one user may insert html code in his input data that you later inserts in a web page that is sent to another user. '}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 3, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'te sandbox would be executing scripts that could be potentially dangerous.  the sandbox d be a mix of my own j, g alongside und jat code from otr . '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 312, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'hxw xa i n  can i dxxxxxy the "welcome, [r xxxx] n " on   xc xxs e  for autxxxxxt c xd usxxx, v the en f t h o xr hxy ue htxx? of u sxxu [ ld xxx, i wo o u osxe ld lixe to xxxp h oi [ bxe e as xo wo  the sxxxxxxxe s s xxxxxs axx, and i sxxxxd e kep  xxe [   txe cod] xo avoid p ther sexxi shxxxd on xxo xxy re e stealing of the session token. '}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 35, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 105, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 's ah provides defen. if soe mas to leak the database table, it does not give an attackr an open door for impersonating users. '}
{'sentId': 93, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 71, 'text': 'mysql db was dumped and stolen', 'label': 'ATTACK'}], 'sentText': 'so long story short, our company recently had an intrusion wherein our mysql db was dumped and stolen. the execs are really nervous now and in addition to upping other security measures, they are intent on encrypting all customer information (email address, home address, names, and the like) in the db. '}
{'sentId': 138, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': "i have heard that it's possible to trigger xss attacks through css ([link], [link]). "}
{'sentId': 44, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 157, 'text': 'renaming the superuser.apk to superuser0.apk.', 'label': 'ATTACK'}], 'sentText': 'the major tes d by ds in root detection are checkg for the k file,check for chainfire,g su command,etc. t an attacr can simply s these ches by sel means lie renaming the superuser.apk to superuser0.apk.  '}
{'sentId': 2, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hack the database', 'em2Text': 'somehow get access to the encrypted passwords', 'label': 'OR'}, {'em1Text': 'somehow get access to the encrypted passwords', 'em2Text': 'hack the database', 'label': 'None'}], 'entityMentions': [{'start': 60, 'text': 'hack the database', 'label': 'ATTACK'}, {'start': 81, 'text': 'somehow get access to the encrypted passwords', 'label': 'ATTACK'}], 'sentText': "to me, this is a gaping security hole.  if somebody were to hack the database or somehow get access to the encrypted passwords, they wouldn't even need to crack them.  just set your own cookies and go.  am i correct, or just being paranoid? "}
{'sentId': 53, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'malicious user steals the [code] of an other user', 'em2Text': 'impersonate that user', 'label': 'None'}, {'em1Text': 'impersonate that user', 'em2Text': 'malicious user steals the [code] of an other user', 'label': 'PARENT'}], 'entityMentions': [{'start': 28, 'text': 'malicious user steals the [code] of an other user', 'label': 'ATTACK'}, {'start': 123, 'text': 'impersonate that user', 'label': 'ATTACK'}], 'sentText': 'a xxxxxxxy ie may ae xxxn a malicious user steals the [code] of an other user. wit se kind xf check, he will txn be xxxe o impersonate that user. we xxxd to xxd a y to uniquxxy idy the xxxxt xt xxe user). '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 41, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'set the csrf cookie using set-cookie', 'em2Text': 'supply a matching token in the post form data', 'label': 'None'}, {'em1Text': 'supply a matching token in the post form data', 'em2Text': 'set the csrf cookie using set-cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 19, 'text': 'set the csrf cookie using set-cookie', 'label': 'ATTACK'}, {'start': 66, 'text': 'supply a matching token in the post form data', 'label': 'ATTACK'}], 'sentText': '  txe attacker cxn set the csrf cookie using set-cookie, axd xxxn supply a matching token in the post form data. since txe site does not tie the session cookies to the xxxf cookies, it has no way of determxxxxg that the csrf txxxn + cookie xxe genuixe (xxxxg hashing etc. of one of txxm will not work, as xxe attacker can xxxt get a xxxxd xxxr from the site dxxxxxxx, and uxe that pair in the attack). '}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 66, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 97, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 226, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm wog on a legacy rais n and the coxs he may instancxs of [c. n running a brakeman scan on it, [code] opens up the application to mass assignment vulnerabilities. y quesxxxn xx- what xs the moxt exxxxxxxe y to get around xs params.permit! vulnerability d repe it? "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hxw might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities xn the app code and expxxxt it, xxxt there could be some indistinct general side channel attack or sxxxxxxxx. but how wxxxd an atxxxxxr really go about trying to recover those keys?  are thxxe xxxxxe apprxxxxxs for a dxxxxxxxxd attxxxxr to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is w  xh xxxe t rrer eck   way g xe referre xo wd r r enouh en y h  t axe o xxxxxt t a cross site request forgery attack? i xw e xxxxxxxr  the to  n be s  xxxxxx, bu his t xs e any way for te axxxxxxr to the  do that fxr e clien ing t? i  t  his know  te to but xxxs e the  any norm, bu know t wouxd t cg his ? '}
{'sentId': 85, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'whips up an ackermann function and a script', 'em2Text': 'submit it a couple of thousand times to your server.', 'label': 'None'}, {'em1Text': 'submit it a couple of thousand times to your server.', 'em2Text': 'whips up an ackermann function and a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'whips up an ackermann function and a script', 'label': 'ATTACK'}, {'start': 131, 'text': 'submit it a couple of thousand times to your server.', 'label': 'ATTACK'}], 'sentText': 'another thing you need to be aware of is denial-of-service attacks. imagine someone whips up an ackermann function and a script to submit it a couple of thousand times to your server... to prevent this, you should timebox the execution time of any code being submitted. this is essential, because this type of "attack" often happens unintentionally - someone managed to produce an infinite loop. '}
{'sentId': 152, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 110, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'i want to give end users the ability to save html to my backend store.  since this feature could easily cause sql injection, and loads of other issues, does anyone know of a server side library that will clean the input so only the "safe" parts of html can be used? '}
{'sentId': 50, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 136, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': 'oh, and yes i am not referring to other kinds of attacks which use return-to-libc, ptrace etc. ; i just wish to know why the most basic buffer overflow attack is demonstrated in the first way and not the second everywhere. '}
{'sentId': 100, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'pgp or symmetric encryption are equally vulnerable', 'em2Text': 'authentication is not possible', 'label': 'PARENT'}, {'em1Text': 'pgp or symmetric encryption are equally vulnerable', 'em2Text': 'the keys are stolen', 'label': 'None'}, {'em1Text': 'authentication is not possible', 'em2Text': 'pgp or symmetric encryption are equally vulnerable', 'label': 'None'}, {'em1Text': 'authentication is not possible', 'em2Text': 'the keys are stolen', 'label': 'AND'}, {'em1Text': 'the keys are stolen', 'em2Text': 'pgp or symmetric encryption are equally vulnerable', 'label': 'None'}, {'em1Text': 'the keys are stolen', 'em2Text': 'authentication is not possible', 'label': 'None'}], 'entityMentions': [{'start': 130, 'text': 'pgp or symmetric encryption are equally vulnerable', 'label': 'ATTACK'}, {'start': 408, 'text': 'authentication is not possible', 'label': 'ATTACK'}, {'start': 442, 'text': 'the keys are stolen', 'label': 'ATTACK'}], 'sentText': 'pgp requires to store keys on client app.there seems to be no assuring way of securing keys on client app.if the key is out, then pgp or symmetric encryption are equally vulnerable.reverse-engineering pgp keys or symmetic keys is equally hard.in that case pgp is a non-sense burden on the mobile processor.oauth is again useless, since it also have a client key. use simple ssl and cross my fingers ?, since authentication is not possible if the keys are stolen? (only server authentication is possible with this) '}
{'sentId': 34, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'PARENT'}, {'em1Text': "a strange error popped up in our app's logs:[code]", 'em2Text': "the user's user agent string is:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'em2Text': "the user's user agent string is:[code]", 'label': 'AND'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': "a strange error popped up in our app's logs:[code]", 'label': 'None'}, {'em1Text': "the user's user agent string is:[code]", 'em2Text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'None'}], 'entityMentions': [{'start': 71, 'text': "a strange error popped up in our app's logs:[code]", 'label': 'ATTACK'}, {'start': 175, 'text': 'when i go to the url that failed to load, these are the only contents:[code]', 'label': 'ATTACK'}, {'start': 252, 'text': "the user's user agent string is:[code]", 'label': 'ATTACK'}], 'sentText': "i manage a secured php/mysql web app with extensive jquery use. today, a strange error popped up in our app's logs:[code] we are not using amazon's cloudfront cdn in our app. when i go to the url that failed to load, these are the only contents:[code] the user's user agent string is:[code] "}
{'sentId': 10, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 94, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 123, 'text': 'analyzing the time taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryptography, a timing attack is a side channel attack in which the attacker attempts to compromise a cryptosystem by analyzing the time taken to execute cryptographic algorithms. every logical operation in a computer takes time to execute, and the time can differ based on the input; with precise measurements of the time for each operation, an attacker can work backwards to the input. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include e cay to sp ddos attacks from a certain ip (or pool of ips). ths as to be at the nginx level, rar than any r in the cod. do i d a web applicatn firewa? f so, how o i integrae it. '}
{'sentId': 98, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attacks', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': '[code]', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'use this email address to attack the website', 'label': 'PARENT'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'create an email address, such as this one', 'em2Text': '[code]', 'label': 'AND'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 50, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 207, 'text': 'create an email address, such as this one', 'label': 'ATTACK'}, {'start': 250, 'text': '[code]', 'label': 'ATTACK'}, {'start': 266, 'text': 'use this email address to attack the website', 'label': 'ATTACK'}], 'sentText': "i wonder whether an email address can be used for xss attacks.  let's suppose there is a website where one can register and gives his email address. if one wants to attack the given website, he or she might create an email address, such as this one: [code] and then use this email address to attack the website. the email address in your example appears valid.  the only character that is unusual is the quote [code] -- rest others are valid. "}
{'sentId': 6, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'a malicious user can invoke one method', 'em2Text': 'he could invoke any', 'label': 'None'}, {'em1Text': 'he could invoke any', 'em2Text': 'a malicious user can invoke one method', 'label': 'PARENT'}], 'entityMentions': [{'start': 96, 'text': 'a malicious user can invoke one method', 'label': 'ATTACK'}, {'start': 136, 'text': 'he could invoke any', 'label': 'ATTACK'}], 'sentText': 'shd xxxe xxxxs xe xxxe at xxe top of xxe , the xxxm of e stack xr xt exxxy levex?  it ss tht if a malicious user can invoke one method, he could invoke any, so fxr  exxxxxe secuxxxx, xd xxxd a chxxk on xxy mexxxd (and s a lt xf xxxxa xxxe to wxxxx. '}
{'sentId': 10, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'hacker can find the way to change some of my [code] statements', 'label': 'ATTACK'}], 'sentText': 'but what about security? meybe hacker can find the way to change some of my [code] statements, and whole my securite will brake. '}
{'sentId': 84, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 16, 'text': 'an sql injection attempt', 'label': 'ATTACK'}], 'sentText': "clearly this is an sql injection attempt. but why the constant shown above? i can't see how it could be particularly significant, though it seems to appear quite frequently. "}
{'sentId': 138, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': "i have heard that it's possible to trigger xss attacks through css ([link], [link]). "}
{'sentId': 90, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'buffer overflow attack', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'write directly into the memory location for [code]', 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': 'buffer overflow attack', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'PARENT'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'write directly into the memory location for [code]', 'label': 'AND'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': "read into [code] there's no overflow protection", 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'later on when your code tries to call [code]', 'label': 'None'}, {'em1Text': 'write directly into the memory location for [code]', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'write directly into the memory location for [code]', 'label': 'PARENT'}, {'em1Text': 'later on when your code tries to call [code]', 'em2Text': 'jump to where the attacker wants it to jump', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'buffer overflow attack', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': "read into [code] there's no overflow protection", 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'write directly into the memory location for [code]', 'label': 'None'}, {'em1Text': 'jump to where the attacker wants it to jump', 'em2Text': 'later on when your code tries to call [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 54, 'text': 'buffer overflow attack', 'label': 'ATTACK'}, {'start': 91, 'text': "read into [code] there's no overflow protection", 'label': 'ATTACK'}, {'start': 152, 'text': 'write directly into the memory location for [code]', 'label': 'ATTACK'}, {'start': 204, 'text': 'later on when your code tries to call [code]', 'label': 'ATTACK'}, {'start': 258, 'text': 'jump to where the attacker wants it to jump', 'label': 'ATTACK'}], 'sentText': "does such attack needs to be conducted with a kind of buffer overflow attack? and when you read into [code] there's no overflow protection, and you can write directly into the memory location for [code]. later on when your code tries to call [code], it will jump to where the attacker wants it to jump, presumably where they injected executable code into your app. "}
{'sentId': 133, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 70, 'text': 'server-side javascript code injection attacks', 'label': 'ATTACK'}], 'sentText': '  "the ctl00%24txttopqcksearch parameter appears to be vulnerable to  server-side javascript code injection attacks. the submitted value  appears to be placed into a dynamically evaluated javascript  statement, within a single-quoted context.    the payload \'+(function(){if(typeof cb715==="undefined"){var a=new  date();do{var b=new date();}while(b-a&lt;20000);cb715=1;}}())+\' was  submitted in the ctl00%24txttopqcksearch parameter. the application  took 7641 milliseconds to respond to the request, compared with 5625  milliseconds for the original request, indicating that the injected  javascript code caused a time delay.    please note that to manually reproduce this behavior using the  reported request, you will need to change the name of the canary  variable, which is currently cb715." '}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 136, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 88, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to se a file i dd the followg s rs a hashve that is std n a file. whener the user ws to access the file, he enters the password, and if the same hash is generated, he can access the file.i se this isn't realy sa, but how e it is? how high is e chance that string#hase gs the e hash with two dift inputg to your anss i changed the co t should be betr now?? "}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 109, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 149, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'xs d   other pi sae fy() ot  ( saxe ad s site-xxxe ituxxn pas s  xxxxr funcn maxd s of the sae n set) xxxxxr dos ab post le xn con  g st d st os via maxed out post parameters ? plee also conxxxxr the  site-e c n onxxg sxxxxt le s of post upxxxd s mxxh lar than . '}
{'sentId': 13, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'an in-memory password can be leaked', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'PARENT'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'an in-memory password can be leaked', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'get access as the same user or as root', 'label': 'None'}, {'em1Text': 'gain access to the system under the same user account as your code', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'get access as the same user or as root', 'em2Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'an in-memory password can be leaked', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'gain access to the system under the same user account as your code', 'label': 'None'}, {'em1Text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'em2Text': 'get access as the same user or as root', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'an in-memory password can be leaked', 'label': 'ATTACK'}, {'start': 55, 'text': 'gain access to the system under the same user account as your code', 'label': 'ATTACK'}, {'start': 228, 'text': 'get access as the same user or as root', 'label': 'ATTACK'}, {'start': 324, 'text': 'tamper with your code to send all passwords (when they are entered) to them remotely', 'label': 'ATTACK'}], 'sentText': "an in-memory password can be leaked if an attacker can gain access to the system under the same user account as your code.an on-device attacker, different user, root however, there's an important gotcha here. if an attacker can get access as the same user or as root, you've got far bigger problems. for example, they could tamper with your code to send all passwords (when they are entered) to them remotely. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 134, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 232, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 301, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 324, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mt an attacker recover the secrets in that flash? i understand y can fuzz for vuls in the p coe and exploit it, that there d e some indistinct general side channel attack or something. but how would an attr really go abt tryig to recover those keys?  are e viable apps for a determined attackr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 123, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 180, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  f you give yourxxxf write pxxxxxxxe to e m s,  yxe xg tht axy progm thxt runs under yxu (not necessarxxy  python pr) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 19, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are visible via [code]', 'label': 'PARENT'}, {'em1Text': 'env vars are not particularly secure', 'em2Text': 'they are available to any user that can run [code]', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are visible via [code]', 'em2Text': 'they are available to any user that can run [code]', 'label': 'AND'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'env vars are not particularly secure', 'label': 'None'}, {'em1Text': 'they are available to any user that can run [code]', 'em2Text': 'they are visible via [code]', 'label': 'None'}], 'entityMentions': [{'start': 9, 'text': 'env vars are not particularly secure', 'label': 'ATTACK'}, {'start': 54, 'text': 'they are visible via [code]', 'label': 'ATTACK'}, {'start': 90, 'text': 'they are available to any user that can run [code]', 'label': 'ATTACK'}], 'sentText': 'however, env vars are not particularly secure either. they are visible via [code], ad hee they are available to any user that can run [code] co. (of course, any user t has acces to ] on the host o [] a) '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 211, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but xxw secure is that? can a user executxxg the progrxm easixy set this property to an arbitrary value (usixg a coxxxxxxxxxe argument of the jxx, for exxxxxx) for common ruxxxxe enxxxxxxxxxx? cxn a user exxxxy spoof this user name? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 216, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 273, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  if you gie yoursxxf e xxxxxxxxe to the   sxs gxxe xxm i you xxxxxx xxx  t xxxxx t ,  xxr xxm e rixxxxg xxxt   any   x you m th runs t s rixxxxg    u rig nder you (xxt  xxxt give  si   o n if ecey  px give xn ) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is someone could decompile the app  c (which i've  c proguar proguard d ould done) and even with proguard you can qu with   wi the thout too much dif ompile ficulty retrieve all the  ould qu dec the om the pile es can tions.  "}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files  (u (us) s)   (u)  '}
{'sentId': 16, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 25, 'text': 'cookie has been hijacked', 'label': 'ATTACK'}], 'sentText': 'this is important if the cookie has been hijacked. it will be invalidated if the user detects the hijacking, and furthermore because the token is unrelated to the password the hijacker won\'t be able to derive and then change the user\'s account password and "own" the account (assuming you require the existing password before changing passwords, the hijacker doesn\'t own the email account so they can\'t use "forgot my password" etc). '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 251, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 282, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my n how   those , hw saf  e   is "ah ! s then , ==  my l  l"? y,   i realize   that ths s that only an au into tn  but but ticated user into  c au an a  cce e ss the d, but how eay is  ge those t  !== i tn t to b  e authenticat?   n use can somo  ne sign up for the app, d thn be  use those credentials to get request right into my database? '}
{'sentId': 68, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'attacker can read your memory', 'em2Text': 'access to your memory ', 'label': 'None'}, {'em1Text': 'access to your memory ', 'em2Text': 'attacker can read your memory', 'label': 'None'}], 'entityMentions': [{'start': 23, 'text': 'attacker can read your memory', 'label': 'ATTACK'}, {'start': 225, 'text': 'access to your memory ', 'label': 'ATTACK'}], 'sentText': 'some think that "if an attacker can read your memory, you have 100% lost." (comment to [link]), which indicates that whether you store passwords in memory or not might be superfluous, since you\'re screwed anyway if they have access to your memory (see [link], which shows an example of how access to memory in an umnanaged environment can be pretty disastrous). '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 211, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but how secure is that? can a user executing the program easily set this property to an arbitrary value (using a command-line argument of the jvm, for example) for common runtime environments? can a user easily spoof this user name? '}
{'sentId': 115, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 22, 'text': 'cross-site  scripting vulnerability', 'label': 'ATTACK'}], 'sentText': '  the issue here is a cross-site  scripting vulnerability that is  commonly associated with e-commerce  applications. one of the tests  appended a harmless script in a get  request on the end of the your site  url. it flagged as a cross-site  scripting vulnerability because this  same script that was entered by the  user (our scanner) was returned by the  server unsanitized in the header. in  this case, the script was returned in  the header so our scanner flagged the  vulnerability.    here is the test i ran from my  terminal to duplicate this:    get  /?oscsid=%22%3e%3ciframe%20src=foo%3e%3c/iframe%3e  http/1.0      host:(removed) '}
{'sentId': 91, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'crack open the extension', 'em2Text': 'use/abuse my api key', 'label': 'None'}, {'em1Text': 'crack open the extension', 'em2Text': 'get it revoked', 'label': 'None'}, {'em1Text': 'use/abuse my api key', 'em2Text': 'crack open the extension', 'label': 'PARENT'}, {'em1Text': 'use/abuse my api key', 'em2Text': 'get it revoked', 'label': 'None'}, {'em1Text': 'get it revoked', 'em2Text': 'crack open the extension', 'label': 'None'}, {'em1Text': 'get it revoked', 'em2Text': 'use/abuse my api key', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'crack open the extension', 'label': 'ATTACK'}, {'start': 221, 'text': 'use/abuse my api key', 'label': 'ATTACK'}, {'start': 252, 'text': 'get it revoked', 'label': 'ATTACK'}], 'sentText': 'my concern is that any user could just crack open the extension and pull out these values if i include them in the published extension. this may or may not pose a security rise for the user, but he or she could certainly use/abuse my api key and maybe get it revoked. '}
{'sentId': 35, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 49, 'text': 'anyone with the sense to check your source could steal your login inf', 'label': 'ATTACK'}], 'sentText': "surely this form isn't goixg into the view where anyone with the sense to check your source could steal your login info? i xxxxd assxxe thxs needs to be doxe from the coxxxxxxxx, but i dxxxt know xxw to create do xxxs from the conxxxxxxx. httpxxxxxxxxxt and wxxxxxxxt xxxk promising, but i don't know how to acxxxxxy add a form to them. "}
{'sentId': 122, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 141, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'so, i want to know xf   this and on if ly  ippet th an xn d xs littxe sn know ipp to et presents an axxxxxs y xxxxr on d ly ity issues xxxxe xss attacks etx) '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 44, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is soe e is  the someone could decompile the app (which i'e d) d even with progua even firt  r first  dep the il  e d you can ret  without too mu is first  ch diy ret te rv (which e al e  first questions.  "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 50, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the first is someone sue is  the someone could decompile the app (which i've done) and even with progua even first  r first  decomp the il  e d you can ret  without too mu is first  ch difficulty ret the riev (which e all the  first questions.  "}
{'sentId': 86, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 152, 'text': 'snooping in between and intercepting the message', 'label': 'ATTACK'}], 'sentText': "pretty simple and strt forward. evg works fine. but i'm afraid t te websocket connection to s is . when node.js sends a message to the r, i don't wat e snooping in between and intercepting the message. i would like to make sure y users fel safe and trust the see i have buit for the. "}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 66, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am trxxxg to make sure my jenks xxxxxxxe is nxt xxxxxxxxxe with the latest log4j exploit.i e a pipeline xxxxxt that , i trxxd folg this n :[lis is one of my stages of my e st i get a different errr than whs described here and i'm unsure xf i'm xxxxxxxg ths corrxxxxx.  s is the error:[cod] "}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 59, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 137, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 306, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is uxxn since g t he  st xe xxxxxd beo a w a bxd choixx? t generates a random number between 0-1000. since txxxe ae on th y 0 o m p, axd their md5 hashes are known, xt xxxxl iaxs d xxxe  xu an at at xe  c w ker ju wi  bxw to th ju xxt ju ju    xu  a 0-xxxx. n gxxxxxxxs d st a 1000 tr be u xxxxxxg iaxs to verify the account without it really belonging to them '}
{'sentId': 77, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 55, 'text': 'inject javascript and manipulate the variables or access functions', 'label': 'ATTACK'}], 'sentText': 'are there was to p, or e it difficult enough, r some o inject javascript and manipulate the variables or access functions? a t i had is o ce all r names randomy on h reload so e mae scrt wd need o be rewritten every t? or ae te other les pal w? '}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 44, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 216, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'today, our xxxxxxe architect mentxxxxd that a recent vulnerability was discovered in the jre 1.7.  i foxxd an arxxxxe the [xxxxx.  te s xf the latest vy have nxt n made xxxxxx.  howxx, my understanding is that xt oy affects java browser plugins.  te red mxxxxxxxn is to xxxxxxe txe xxxa br .  no mention is made of non-xxxxxn xxx, so i thxxk it is sae to assume that your dev e is not vue sy xy virtue xf haxxxg a 7 . '}
{'sentId': 52, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 23, 'text': 'a hacker modified form data', 'label': 'ATTACK'}], 'sentText': 'before reaching server a hacker modified form data(first name &amp; last name) leaving token info unchanged. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 76, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i xxxt to te  include the capabxx ngi need  need nx xxy to if  if  as  stop ddos attacks from a certain ip (or pool of ips). t xxx. x a xs  i do  as to be at xxe nginx xxxxx, rather txxn   axy  so,  if deeper xn the x web xxx do . do i at   ddos need a web application firxxx xxxxx, xx? if the  so, nginx   xs xxw do i integra certain   te it. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 231, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 272, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': " d process ump  xr strings      t can abl a  r d ed ex, e xr on   ou've xe s   x xx. . imxu c t if al ode, can   rid e. tt strin  gs  mean if s o on e y bee oe crext [c    x  xxx stris ,  strs ed the [c xxxxxx data s you  ode], if another process can dump memory x. , ths no way you can get rid of the data bef s ore [li]    you kic stris  t pro e ce e ss he ks  that i. "}
{'sentId': 79, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 95, 'text': 'cross site issue', 'label': 'ATTACK'}], 'sentText': "i'm doing a plugin to do some transformations to the interface. i keep getting [code] (typical cross site issue) "}
{'sentId': 28, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'register with the service, login', 'em2Text': 'modifying the token that they receive to access the accounts of other users', 'label': 'None'}, {'em1Text': 'modifying the token that they receive to access the accounts of other users', 'em2Text': 'register with the service, login', 'label': 'PARENT'}], 'entityMentions': [{'start': 39, 'text': 'register with the service, login', 'label': 'ATTACK'}, {'start': 81, 'text': 'modifying the token that they receive to access the accounts of other users', 'label': 'ATTACK'}], 'sentText': 'e s is a c g service i am hr d t se cd register with the service, login and then modifying the token that they receive to access the accounts of other users. '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a response to the recent [link] and [link], what is the best way to secure your website against brute force login attacks? '}
{'sentId': 24, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': "this code is vulnerable to a buffer overflow attack, and i'm trying to figure out why. i'm thinking it has to do with [code] being declared a [code] instead of an [code], but i'm not really sure. "}
{'sentId': 70, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'this can be mined by a hacker', 'label': 'None'}, {'em1Text': 'a hacker could manipulate the token on the device', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'this can be mined by a hacker', 'em2Text': 'make the entire application vulnerable', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'a hacker could manipulate the token on the device', 'label': 'None'}, {'em1Text': 'make the entire application vulnerable', 'em2Text': 'this can be mined by a hacker', 'label': 'PARENT'}], 'entityMentions': [{'start': 208, 'text': 'a hacker could manipulate the token on the device', 'label': 'ATTACK'}, {'start': 363, 'text': 'this can be mined by a hacker', 'label': 'ATTACK'}, {'start': 397, 'text': 'make the entire application vulnerable', 'label': 'ATTACK'}], 'sentText': 'to gixe cont wy xt xs the way it is, e xxxd coxxxxxs an expiran tixe and on te devie wn the n is xxxxt to ee i sd prt the user to re er their credexxxxs o gxt a w . now s xxxxt seem lxxe a secy threat becaxe a hacker could manipulate the token on the device, but e server checxs txe token xo mae sure t is auc which is why i do xxt wxxt te key on txe dee because this can be mined by a hacker, xd make the entire application vulnerable. '}
{'sentId': 2, 'articleId': '3', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hack the database', 'em2Text': 'somehow get access to the encrypted passwords', 'label': 'OR'}, {'em1Text': 'somehow get access to the encrypted passwords', 'em2Text': 'hack the database', 'label': 'None'}], 'entityMentions': [{'start': 60, 'text': 'hack the database', 'label': 'ATTACK'}, {'start': 81, 'text': 'somehow get access to the encrypted passwords', 'label': 'ATTACK'}], 'sentText': "to me, this is a gaping security hole.  if somebody were to hack the database or somehow get access to the encrypted passwords, they wouldn't even need to crack them.  just set your own cookies and go.  am i correct, or just being paranoid? "}
{'sentId': 49, 'articleId': '4', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 27, 'text': 'format string vulnerability in c++', 'label': 'ATTACK'}], 'sentText': 'i have xxxxd out about the format string vulnerability in c++, xxt c++ is an old languaxx. i want to know whexxxr the format strxxg vulnerabixxxy xxxxl exists in mxxxxn lxxxxxxxx, xxxe c# and jxxx. '}
{'sentId': 154, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 91, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': 'what is the best way to protect  a p i rotect nd the user and  i   secure for enough?  any mitm attacks. i secu best re s  re my way secure best  enough? '}
{'sentId': 24, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'brute-force/dictionary attacks', 'em2Text': 'attack a single password from a stolen password database', 'label': 'PARENT'}, {'em1Text': 'brute-force/dictionary attacks', 'em2Text': 'try a lot of passwords', 'label': 'None'}, {'em1Text': 'attack a single password from a stolen password database', 'em2Text': 'brute-force/dictionary attacks', 'label': 'None'}, {'em1Text': 'attack a single password from a stolen password database', 'em2Text': 'try a lot of passwords', 'label': 'PARENT'}, {'em1Text': 'try a lot of passwords', 'em2Text': 'brute-force/dictionary attacks', 'label': 'None'}, {'em1Text': 'try a lot of passwords', 'em2Text': 'attack a single password from a stolen password database', 'label': 'None'}], 'entityMentions': [{'start': 109, 'text': 'brute-force/dictionary attacks', 'label': 'ATTACK'}, {'start': 195, 'text': 'attack a single password from a stolen password database', 'label': 'ATTACK'}, {'start': 265, 'text': 'try a lot of passwords', 'label': 'ATTACK'}], 'sentText': "alright, prepending/appending the salt doesn't really make a difference for rainbow tables.hardening against brute-force/dictionary attacks this is what my question is about. if someone wants to attack a single password from a stolen password database, he needs to try a lot of passwords (e.g. dictionary words or [a-za-z0-9] permutations). "}
{'sentId': 28, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile your apk and classes', 'em2Text': 'get the encryption key', 'label': 'None'}, {'em1Text': 'get the encryption key', 'em2Text': 'decompile your apk and classes', 'label': 'PARENT'}], 'entityMentions': [{'start': 396, 'text': 'decompile your apk and classes', 'label': 'ATTACK'}, {'start': 431, 'text': 'get the encryption key', 'label': 'ATTACK'}], 'sentText': "i am going to use oauth to fetch mails and contacts from google. i don't want to ask the user each time to log in to obtain an access token and secret. from what i understood, i need to store them with my application either in a database or [code]. but i am a bit worried about security aspects with that. i read that you can encrypt and decrypt the tokens but it is easy for an attacker to just decompile your apk and classes and get the encryption key.what's the best method to securely store these tokens in android? "}
{'sentId': 99, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 36, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': 'recently i studied a lot related to xss attacks. i was searching for prevention techniques of xss attack.  '}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 291, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  sy recommenda: t is highly recommended tt you do not  hard-code the exact public license key string value as provided by  googe play. instea, you cn construct te whoe publc e key  sg at e from substrings, or e it from an encrypted  s, bee pg it to the const. this aph makes it  more dt fr malicious third-parties to modify the public  license key string n your apk f. '}
{'sentId': 12, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'man-in-middle attacks', 'label': 'ATTACK'}], 'sentText': 'enct my n (s &amp; s->c)do 2-way authentication (s &amp; s->d man-in-middle attacks '}
{'sentId': 40, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'execution of any scripts (php, perl, cgi scripts, whatever i may install in the future) in the upload folder', 'label': 'ATTACK'}], 'sentText': "what i'd like to do is to simply disallow execution of any scripts (php, perl, cgi scripts, whatever i may install in the future) in the upload folder. [link] suggests adding the following line in a [code] file in that folder: "}
{'sentId': 120, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'csrf vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i hae made a [l] fr detexxxxg and xxxxxxxxxg so cald csrf vulnerabilities. i uxe it o quickly xxxe xxxf of concxxxs of such vs tt i send to the affd site . quie oftxn i enxxxxxxr thee forms h a vxxxxxxxx, ad thxxe i don't know if ty e secxxe or not. "}
{'sentId': 157, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'the middle man gets request from victim', 'em2Text': 'he fires https request himself', 'label': 'AND'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'returns content to the user', 'label': 'None'}, {'em1Text': 'the middle man gets request from victim', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'he fires https request himself', 'em2Text': 'returns content to the user', 'label': 'AND'}, {'em1Text': 'he fires https request himself', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'the middle man gets request from victim', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'returns content to the user', 'em2Text': 'mitm attacks', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'the middle man gets request from victim', 'label': 'PARENT'}, {'em1Text': 'mitm attacks', 'em2Text': 'he fires https request himself', 'label': 'None'}, {'em1Text': 'mitm attacks', 'em2Text': 'returns content to the user', 'label': 'None'}], 'entityMentions': [{'start': 38, 'text': 'the middle man gets request from victim', 'label': 'ATTACK'}, {'start': 102, 'text': 'he fires https request himself', 'label': 'ATTACK'}, {'start': 158, 'text': 'returns content to the user', 'label': 'ATTACK'}, {'start': 302, 'text': 'mitm attacks', 'label': 'ATTACK'}], 'sentText': "let's imagine the following scenario: the middle man gets request from victim: http ://site.com. then he fires https request himself to https ://site.com and returns content to the user, stripping the hsts header. all further user input is visible to the attacker. does hsts header really help against mitm attacks? "}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welxxxx, [yoxr nxxxx"  pages they  on pxxxxc pa pagxs xxs fo of r axxxxxxxxa and ted users, even i pages p  f they us  xxxxxd therefore e hxxx? of cours  cours shoxxd e, i wou axxxxxxxc e] a ld  th ages erefore  the like to kee [codx] p the ac xxxxxxxxxa cess to the sensitive p an therefore d ages sxxx, xxd i should  xa xo  txxxxxxxe keep [cod f e] to avoid possibxe stealing of the session token an . '}
{'sentId': 44, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'xsrf', 'label': 'ATTACK'}], 'sentText': "in order to prevent xsrf i force such request to be [code] requests. with [code] it's trivial to generate a xsrf using the following: "}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 110, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': "strings are immutable. that means once you've created the [code], if another process can dump memory, there's no way you can get rid of the data before [link] kicks in. "}
{'sentId': 116, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker knows the pattern', 'em2Text': 'login to jasper server', 'label': 'None'}, {'em1Text': 'login to jasper server', 'em2Text': 'hacker knows the pattern', 'label': 'PARENT'}], 'entityMentions': [{'start': 116, 'text': 'hacker knows the pattern', 'label': 'ATTACK'}, {'start': 163, 'text': 'login to jasper server', 'label': 'ATTACK'}], 'sentText': 'm be y  sometxxxg que knows stion  i is  missing xh looks is ry a secxxxd s xe m kn   , s issing caxs my  ly e as n hacker knows the pattern, e can p ,  pattern y login to jasper server xxo e looks xxxe  issing sxxy cn e coxxxxxxd he.   pn is  knos ,  isxxg am i i jaxr sxxxg something ?   '}
{'sentId': 41, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'database where compromised', 'em2Text': 'going to defeat [code] by enabling the [link]', 'label': 'None'}, {'em1Text': 'going to defeat [code] by enabling the [link]', 'em2Text': 'database where compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 11, 'text': 'database where compromised', 'label': 'ATTACK'}, {'start': 54, 'text': 'going to defeat [code] by enabling the [link]', 'label': 'ATTACK'}], 'sentText': 'but if the database where compromised the attacker is going to defeat [code] by enabling the [link]. '}
{'sentId': 28, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile your apk and classes', 'em2Text': 'get the encryption key', 'label': 'None'}, {'em1Text': 'get the encryption key', 'em2Text': 'decompile your apk and classes', 'label': 'PARENT'}], 'entityMentions': [{'start': 396, 'text': 'decompile your apk and classes', 'label': 'ATTACK'}, {'start': 431, 'text': 'get the encryption key', 'label': 'ATTACK'}], 'sentText': "i am goixg to use oauth to fetch mails and contacts from gxxxxx. i don't want to axk the user each time to log in to oxxxxn xn access token xxd secxxx. frxm what i unxxxxxxxx, i nexd to store them with my applxxxxxxn xxxxxr in a database or [code]. but i xm a bxt woxxxxd about secxxxxy aspects with thax. i read that xxu can encrypt and decrypt the tokexs bxt it is easy for an attacxxr to just decompile your apk and classes and get the encryption key.what's the best methxd to secuxxxy xxxxe these tokens xn android? "}
{'sentId': 16, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 25, 'text': 'cookie has been hijacked', 'label': 'ATTACK'}], 'sentText': 'this is impxxxxxt if the cookie has been hijacked. it will be invalidaxxd if xxe user detects the hijackinx, axd furthermore xxxxxxe the token is unrelated to the password the hijacker won\'t be able to derive and then change the xxxxxs account password and "own" the accxxxt (assuxxxg you rxxxxxe xxe existing password xxxxxe changing passxxxxx, the hijacker dxxxxxt own xxe email account so thxy can\'t use "forgot my passworx" etc). '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 123, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 180, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give f wre privilege to te systm site-packages,  you'e riskig t any m that rus under u (not ny  python program) n inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 25, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 64, 'text': 'users can execute malicious sql on your website', 'label': 'ATTACK'}], 'sentText': 'when you execute a sql query, you have to clean your strings or users can execute malicious sql on your website. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 143, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 237, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 292, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 315, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxd thxy n fxxz fxr vxxxxxxs in xxe app cxxe and ext i, xxxt te xxxxd xe xxxe indistinct general side channel attack or sxxxxxx. bxt hxw xxxxd n axxxxxxr ry go t xxxxxg to recover those keys?  e e ve apxs fr a dd xxxxxxxr to w shave-down the chip or some kind of microscope attack? '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 6, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 123, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 201, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 254, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 277, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw t an attacker recover the secrets in that flash? i xxxxxxd y n fxxz fxr vxxxxxxs n e ap xxxe d et i, xxxt te xxd xe xe indistinct general side channel attack xr sxx. t hxw xxxd n r ry go t xxxxg o recover those keys?  e e ve xxxs xr a dd xxxxxxr o w shave-down the chip xr some kind of microscope attack? '}
{'sentId': 38, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 184, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'when creating apps that put data to a database is mysql_real_escape_string and general checking (is_numeric etc) on input data enough? what about other types of attacks different from sql injection. '}
{'sentId': 21, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss and javascript injection attacks', 'em2Text': 'inject bad web code', 'label': 'None'}, {'em1Text': 'xss and javascript injection attacks', 'em2Text': 'arbitrary strings passed through it', 'label': 'None'}, {'em1Text': 'inject bad web code', 'em2Text': 'xss and javascript injection attacks', 'label': 'None'}, {'em1Text': 'inject bad web code', 'em2Text': 'arbitrary strings passed through it', 'label': 'PARENT'}, {'em1Text': 'arbitrary strings passed through it', 'em2Text': 'xss and javascript injection attacks', 'label': 'None'}, {'em1Text': 'arbitrary strings passed through it', 'em2Text': 'inject bad web code', 'label': 'None'}], 'entityMentions': [{'start': 119, 'text': 'xss and javascript injection attacks', 'label': 'ATTACK'}, {'start': 280, 'text': 'inject bad web code', 'label': 'ATTACK'}, {'start': 308, 'text': 'arbitrary strings passed through it', 'label': 'ATTACK'}], 'sentText': "i have a page where i want to accept an email address in the get parameters. if i use [code], am i still vulnerable to xss and javascript injection attacks, and the like? i'm not asking if it's a good, or good enough, validator of email addresses. i want to know if one can still inject bad web code through arbitrary strings passed through it -- do i need to do additional filtering to prevent that? "}
{'sentId': 153, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'post to the form from another page using some nifty post-to-iframe hack it', 'label': 'ATTACK'}], 'sentText': 'if someone tries to post to the form from another page using some nifty post-to-iframe hack it will be [coxxx, you can throw xt out immxxxxxxxx. '}
{'sentId': 110, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'xss attack', 'label': 'ATTACK'}], 'sentText': 'how can i protect it against xss attack. user table is in an external db, so i cannot trust it. i have tried different approaches using sanitize and h but when i replace in my local db user website by [code], javascript is still being executed when i click on the link. '}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 13, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 148, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 217, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i m g o perm a buffer overflow attack on a program for a class a. both the k m as well as the ve progre is wn by . , i would like to e te ak pre to keep supplying incrementally longer payloads l the proge . so, i d o dynamically generate larger payloads of junks. i m using ] to rey call and test for n abnol e. '}
{'sentId': 14, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'malicious users visiting the dosomething.ashx page', 'em2Text': 'making false requests', 'label': 'AND'}, {'em1Text': 'making false requests', 'em2Text': 'malicious users visiting the dosomething.ashx page', 'label': 'None'}], 'entityMentions': [{'start': 74, 'text': 'malicious users visiting the dosomething.ashx page', 'label': 'ATTACK'}, {'start': 129, 'text': 'making false requests', 'label': 'ATTACK'}], 'sentText': 'how can i  guarantee that the request came from the local server, to stop malicious users visiting the dosomething.ashx page and making false requests? '}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 38, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'ls y we e a tl csf pron le this ot if an attacket uses this code to bypass the csrf token? '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 234, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welcome, [your name]" on public pages for authenticated users, even if they use http? of course, i would like to keep the access to the sensitive pages safe, and i should therefore keep [code] to avoid possible stealing of the session token. '}
{'sentId': 38, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'clear the whole database', 'em2Text': 'inserting a delete statement', 'label': 'PARENT'}, {'em1Text': 'inserting a delete statement', 'em2Text': 'clear the whole database', 'label': 'None'}], 'entityMentions': [{'start': 101, 'text': 'clear the whole database', 'label': 'ATTACK'}, {'start': 129, 'text': 'inserting a delete statement', 'label': 'ATTACK'}], 'sentText': "i  idxxs don't  don't w  xxxxe t an the t h  em   an delete t  cxe the ar w ant xxxm  a t t  ideas o clear the whole database by inserting a delete statement. th ould  statxxxxx. em w xxxe ould te ould  my ide w as delete   w would  t xx: hxm   xx: "}
{'sentId': 95, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 97, 'text': 'an attacket uses this code to bypass the csrf token', 'label': 'ATTACK'}], 'sentText': 'lets y we have a typl csrf o the  this te the ctn like s one h ? av  e w  hat n h to at f bypas  an attacket uses this code to bypass the csrf token an ? '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 119, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 140, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 172, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 301, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 328, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': "xt xxc 's p s ret xxxt ty obvious to  s  and yu and i xxa xxxxxt  sm p e t t mxxxxxxxs e h  db? xl p is xxi to ng i  o take the id and hac  run it through a mysql query xo retrieve 1 record  ur ose l o display it o php n prt  the pxxx. is there a  y is y se th i h to   u p qy oxe s hac there r xxxxd mess this url up and recd  pose a security threat to my application/mysql db? "}
{'sentId': 34, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 110, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'could you please list some strategies or even approaches you have already applied to prevent/protect/minimize ddos attacks upon restful web services? '}
{'sentId': 86, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer these from my binary', 'em2Text': 'use them in their app', 'label': 'None'}, {'em1Text': 'reverse engineer these from my binary', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': 'use them in their app', 'em2Text': 'reverse engineer these from my binary', 'label': 'PARENT'}, {'em1Text': 'use them in their app', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'reverse engineer these from my binary', 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'use them in their app', 'label': 'None'}], 'entityMentions': [{'start': 133, 'text': 'reverse engineer these from my binary', 'label': 'ATTACK'}, {'start': 175, 'text': 'use them in their app', 'label': 'ATTACK'}, {'start': 256, 'text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'ATTACK'}], 'sentText': "after rg a lite bit it s like a bad a o store the prive kes for whatever 3rd party i'l use in the ap (twilio, nex, etc). somebody cd reverse engineer these from my binary and use them in their app. howev, havg e on the servr doesn't hp eithe, soy could jt reverse engineer my server's endpoint that i use to send text messages and ue tt instead. "}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 252, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calxs ck? o cxf xd  calls i would lixe kw  to know if   it   has any build-n mec a xxm tht woud alo calls w lxxg t this xe f  cas  nxm and b ca s xxs er f c cxf onxxr cf rent calls to the wxb s cxf xx, thus would  a w? dg te py of a dos attack? soxxxg sxi  xr to this fxxxxxe i  of wcf? "}
{'sentId': 7, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'leak the database table', 'em2Text': 'impersonating users', 'label': 'PARENT'}, {'em1Text': 'impersonating users', 'em2Text': 'leak the database table', 'label': 'None'}], 'entityMentions': [{'start': 63, 'text': 'leak the database table', 'label': 'ATTACK'}, {'start': 134, 'text': 'impersonating users', 'label': 'ATTACK'}], 'sentText': 'this approach provides defense-in-depth. if someone manages to leak the database table, it does not give an attacker an open door for impersonating users. '}
{'sentId': 62, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'allow community members to supply their own javascript code', 'em2Text': 'a script has control', 'label': 'None'}, {'em1Text': 'a script has control', 'em2Text': 'allow community members to supply their own javascript code', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'allow community members to supply their own javascript code', 'label': 'ATTACK'}, {'start': 333, 'text': 'a script has control', 'label': 'ATTACK'}], 'sentText': "i'd like to be able to allow community members to supply their own javascript code for others to use, because the users' imaginations are collectively far greater than anything i could think of. well createelement('iframe').src='http鈥?//evil.iframeexploitz.ru/aff=2345' is one of the worse attacks you can expect... but really, when a script has control, it can do anything a user can on your site. it can make them post 鈥淚'm a big old paedophile!鈥?a thousand times on your forums and then delete their own account. for example. "}
{'sentId': 58, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'switch back to http for the rest of the session', 'em2Text': 'stay logged in', 'label': 'AND'}, {'em1Text': 'switch back to http for the rest of the session', 'em2Text': 'hijack your session and send whatever requests they want', 'label': 'None'}, {'em1Text': 'stay logged in', 'em2Text': 'switch back to http for the rest of the session', 'label': 'None'}, {'em1Text': 'stay logged in', 'em2Text': 'hijack your session and send whatever requests they want', 'label': 'None'}, {'em1Text': 'hijack your session and send whatever requests they want', 'em2Text': 'switch back to http for the rest of the session', 'label': 'None'}, {'em1Text': 'hijack your session and send whatever requests they want', 'em2Text': 'stay logged in', 'label': 'PARENT'}], 'entityMentions': [{'start': 163, 'text': 'switch back to http for the rest of the session', 'label': 'ATTACK'}, {'start': 403, 'text': 'stay logged in', 'label': 'ATTACK'}, {'start': 449, 'text': 'hijack your session and send whatever requests they want', 'label': 'ATTACK'}], 'sentText': "so you've performed the login using https to prevent man in the middle attacks and make sure your password isn't sent in the clear. good call. but many sites then switch back to http for the rest of the session. once you're exchanging everything in the clear can't a man in the middle begin hijacking your session again? okay, so they don't have your password but they don't need it! for as long as you stay logged in the man in the middle can just hijack your session and send whatever requests they want. can't they? "}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole point of hashing a password is in case a hacker gets access to the database. if i store the salt in the db within the same row as the hashed password, isn\'t it just like i am handing the hacker the "secret code"? i am putting up a door with a lock, and handing the intruder the key. '}
{'sentId': 37, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'session fixation attacks', 'label': 'ATTACK'}], 'sentText': "i'm wondering how to prevent session fixation attacks in asp.net (see [link]) have been doing more digging on this. the best way to prevent session fixation attacks in any web application is to issue a new session identifier when a user logs in. "}
{'sentId': 3, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'inject malicious code', 'em2Text': 'reroute the program logic', 'label': 'OR'}, {'em1Text': 'inject malicious code', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'reroute the program logic', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'reroute the program logic', 'em2Text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'PARENT'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'inject malicious code', 'label': 'None'}, {'em1Text': 'access memory addresses that fall outside legitimately allocated buffers', 'em2Text': 'reroute the program logic', 'label': 'None'}], 'entityMentions': [{'start': 46, 'text': 'inject malicious code', 'label': 'ATTACK'}, {'start': 72, 'text': 'reroute the program logic', 'label': 'ATTACK'}, {'start': 158, 'text': 'access memory addresses that fall outside legitimately allocated buffers', 'label': 'ATTACK'}], 'sentText': 'the  a xxt bl to e axx hxxxxn xxxy to hxxxxn  inject malicious code, or reroute the program logic depenxs e reroute ntirely  hxxxxn on being able program  to access memory addresses that fall outside legitimately allocated buffers hxxxxn .  xxt in a  access being  ix xxx xxx to  inject xxxxx.  lan ike guage  being l texxxxxxe ike j reroute xx with x, this is xxxxxy ixxxxxxxx  x.  xxe ixxxxxxxx  worst xxxt couxd hxxxxn is a program will texxxxxxe with xn [ access xxxxx, xxxxxxg to a de  nial-xx  x x. xxx code, xxxx. to    being  '}
{'sentId': 2, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'spring expression language (spel)', 'em2Text': 'http parameter submissions', 'label': 'AND'}, {'em1Text': 'spring expression language (spel)', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'http parameter submissions', 'em2Text': 'get sensitive system data, application and user cookies', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'spring expression language (spel)', 'label': 'None'}, {'em1Text': 'get sensitive system data, application and user cookies', 'em2Text': 'http parameter submissions', 'label': 'PARENT'}], 'entityMentions': [{'start': 48, 'text': 'spring expression language (spel)', 'label': 'ATTACK'}, {'start': 116, 'text': 'http parameter submissions', 'label': 'ATTACK'}, {'start': 189, 'text': 'get sensitive system data, application and user cookies', 'label': 'ATTACK'}], 'sentText': 'ts a xxxxo xt   sy xt stxxs i le ce xxxxxs that"spring expression language (spel) xy  stem  cxxxd e exo sxxm ited h http parameter submissions   th  at  ited  alw wxd al o low axxxxxxxs to get sensitive system data, application and user cookies. xy "  '}
{'sentId': 106, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'php is gets compromised', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}, {'em1Text': 'php is gets compromised', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}], 'entityMentions': [{'start': 81, 'text': 'php is gets compromised', 'label': 'ATTACK'}, {'start': 304, 'text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'ATTACK'}, {'start': 410, 'text': 'the user has broken the root login of the linux box running php', 'label': 'ATTACK'}], 'sentText': "how to secure database credentials in a web application in case the server where php is gets compromised?assume that in this problem's case we are not talking about shared hosting, vps or anything alike, there's only one person who has access to the box that stores mysql information. how to ensure that malicious user will not be able to obtain the details needed for connection string for mysql? assume that the user has broken the root login of the linux box running php. "}
{'sentId': 94, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running a brakeman scan', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'None'}, {'em1Text': 'running a brakeman scan', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'running a brakeman scan', 'label': 'PARENT'}, {'em1Text': '[code] opens up the application to mass assignment vulnerabilities', 'em2Text': 'params.permit! vulnerability', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': 'running a brakeman scan', 'label': 'None'}, {'em1Text': 'params.permit! vulnerability', 'em2Text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'PARENT'}], 'entityMentions': [{'start': 98, 'text': 'running a brakeman scan', 'label': 'ATTACK'}, {'start': 129, 'text': '[code] opens up the application to mass assignment vulnerabilities', 'label': 'ATTACK'}, {'start': 263, 'text': 'params.permit! vulnerability', 'label': 'ATTACK'}], 'sentText': "i'm working on a legacy rails application and the controllers have many instances of [code]. when running a brakeman scan on it, [code] opens up the application to mass assignment vulnerabilities. my question is- what is the most effective way to get around this params.permit! vulnerability and replace it? "}
{'sentId': 55, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'break [code] ', 'label': 'None'}, {'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'uses an unsafe [code] extension', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'uses an unsafe [code] extension', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'break [code] ', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'uses an unsafe [code] extension', 'label': 'ATTACK'}, {'start': 50, 'text': 'break [code] ', 'label': 'ATTACK'}, {'start': 66, 'text': 'inserting different elements with different [code] instances', 'label': 'ATTACK'}], 'sentText': 'the code below uses an unsafe [code] extension to break [code] by inserting different elements with different [code] instances: '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 112, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 155, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'ss  l ar od ed e, e xr onxe ocess  imxu [c l od, e. that ms e y bee oe crext [c  xxx, ed the [c s you  ode], if another process can dump memory . , therxs no way you can get rid of the data f xxxxxs ore [lix] kc the s in. '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 35, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if yu ae cond with the first case (someone posting malicious data to/as another user) the soln is e sae whetr you are using ajax or not -- yu t have to aue the user thh whar mes is y -- usualy via sessin cookie. '}
{'sentId': 62, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'compromise a cryptosystem', 'em2Text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'PARENT'}, {'em1Text': 'analyzing the time  taken to execute cryptographic algorithms', 'em2Text': 'compromise a cryptosystem', 'label': 'None'}], 'entityMentions': [{'start': 337, 'text': 'compromise a cryptosystem', 'label': 'ATTACK'}, {'start': 427, 'text': 'analyzing the time  taken to execute cryptographic algorithms', 'label': 'ATTACK'}], 'sentText': '  in cryp imin tography, si the d analyzi e  a  h t t   co in mpromise is iming attack is a s  ute ng      compromise ide channel a imin ute aphy,  g ttac al k in   w anal e in xec  ute attack   compromise yzing hic crypt  og a raphic h  analyz ute i  ng th  e  attacker   attempts cryptogr compromise g   i attacker ming  ute aphy,  to compromise a cryptosystem channel   yz   al to gor cryptographi channel c ithms. in  g by analyzing the time  taken to execute cryptographic algorithms. channel  '}
{'sentId': 93, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer my android appliaction code', 'em2Text': 'could see exactly what i do', 'label': 'None'}, {'em1Text': 'could see exactly what i do', 'em2Text': 'reverse engineer my android appliaction code', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'reverse engineer my android appliaction code', 'label': 'ATTACK'}, {'start': 180, 'text': 'could see exactly what i do', 'label': 'ATTACK'}], 'sentText': 'it seems to me that no matter which approach i will choose, someone who wants to hack it, will just need to reverse engineer my android appliaction code (which isn`t very hard) andcould see exactly what i do, wheather i encrypt the data, use hardcoded password or any other solution for that matter. '}
{'sentId': 19, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 126, 'text': 'replay attacks', 'label': 'ATTACK'}], 'sentText': 'some sources says that the web browser generates the session key. now if the web browser generates it then its vulnerable for replay attacks.  '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a response to the recext xxxxx] and [lxxxx, wxxt is the best way to sxxxxe xxxr website against brute force login attacks? '}
{'sentId': 28, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'decompile your apk and classes', 'em2Text': 'get the encryption key', 'label': 'None'}, {'em1Text': 'get the encryption key', 'em2Text': 'decompile your apk and classes', 'label': 'PARENT'}], 'entityMentions': [{'start': 396, 'text': 'decompile your apk and classes', 'label': 'ATTACK'}, {'start': 431, 'text': 'get the encryption key', 'label': 'ATTACK'}], 'sentText': "i am goixg to use oauth to fetch mails and contacts from gxxxxx. i don't want to axk the user each time to log in to oxxxxn xn access token xxd secxxx. frxm what i unxxxxxxxx, i nexd to store them with my applxxxxxxn xxxxxr in a database or [code]. but i xm a bxt woxxxxd about secxxxxy aspects with thax. i read that xxu can encrypt and decrypt the tokexs bxt it is easy for an attacxxr to just decompile your apk and classes and get the encryption key.what's the best methxd to secuxxxy xxxxe these tokens xn android? "}
{'sentId': 134, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 3, 'text': 'sandbox would be executing scripts that could be potentially dangerous', 'label': 'ATTACK'}], 'sentText': 'te sandbox would be executing scripts that could be potentially dangerous. te own   of      executing te sandx d w o potentially f ould  be a mix of my  w ow potentially n d  alonge  j, g alonge d executing  ja   executing t code from otr . '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 7, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 127, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mt an attacker recover the secrets in that flash? i unxd y can xxz for s xn the p coxe xxd xxxxt it, xxxt te coxxd xe some indistinct general side channel attack or s. bxt xxw xxxxd xn ar y go axt xxg to recover those keys?  axe te xxxxxe approas xxr a d attaxxxr to sxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 95, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'just go down to the assemble code', 'label': 'ATTACK'}], 'sentText': 'i know that an attacker could just go down to the assemble code, and at that point there is nothing at all i can do against this (the system has to be able to encrypt / decrypt the data), but is there like a shortcut for c# to get the encryppassword, since it is managed, or does something like this still require you to go down to the assemble code? '}
{'sentId': 93, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'malicious code is being added to the start of the [code] file', 'em2Text': 'rogue files are added to the server', 'label': 'None'}, {'em1Text': 'rogue files are added to the server', 'em2Text': 'malicious code is being added to the start of the [code] file', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': 'malicious code is being added to the start of the [code] file', 'label': 'ATTACK'}, {'start': 61, 'text': 'rogue files are added to the server', 'label': 'ATTACK'}], 'sentText': 'malicious code is being added to the start of the [code] filerogue files are added to the server '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can fuzz for vulnerabilities in the app code and exploit it, that there could be some indistinct general side channel attack or something. but how would an attacker really go about trying to recover those keys?  are there viable approaches for a determined attacker to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 92, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'including the  fields in the manifest to have account management access', 'em2Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'None'}, {'em1Text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'em2Text': 'including the  fields in the manifest to have account management access', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'including the  fields in the manifest to have account management access', 'label': 'ATTACK'}, {'start': 148, 'text': 'iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them', 'label': 'ATTACK'}], 'sentText': "due xo x, i'm stg to wor what stops an arby s app fm ) including the  fields in the manifest to have account management access, xxd tn then 2) xxxm iterating through all accounts of a particular type and calling maccountmanger.getpassword(account) on them. i knw that dug insta, a xxxxxg s up with all te pxxxxs t an ap requexxs xo us, but i xxxxt k we can cxxxt on te xe ur to rexxxt an p e it xxxxxxxs s permiss. "}
{'sentId': 5, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'gets a valid token', 'em2Text': 'effectively impersonate', 'label': 'None'}, {'em1Text': 'effectively impersonate', 'em2Text': 'gets a valid token', 'label': 'PARENT'}], 'entityMentions': [{'start': 112, 'text': 'gets a valid token', 'label': 'ATTACK'}, {'start': 145, 'text': 'effectively impersonate', 'label': 'ATTACK'}], 'sentText': 't does not xt y jwt xu t a the txxxxxr o a - an in-t atta , cx. he te xxe n, -e (xxxm  ) attack. if an attacker gets a valid token ttackxr , cxn effectively impersonate. n if  xxxxx. the  is content i gets s enxxxxx. '}
{'sentId': 55, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 90, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'does named   qu n injection xxxd ery featu not re defixxxg  of hibernate helps to prevent sql injection attack? i am defixxxg nxxxd quer to xxxd  ixs   in x re xxxxxl file  not n in ot xs annotation.<b prevent r/> '}
{'sentId': 88, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'allowing users to supply regular expression', 'em2Text': 'allow for a denial of service attack', 'label': 'None'}, {'em1Text': 'allow for a denial of service attack', 'em2Text': 'allowing users to supply regular expression', 'label': 'PARENT'}], 'entityMentions': [{'start': 8, 'text': 'allowing users to supply regular expression', 'label': 'ATTACK'}, {'start': 61, 'text': 'allow for a denial of service attack', 'label': 'ATTACK'}], 'sentText': 'in mt s allowing users to supply regular expression mes tt u allow for a denial of service attack. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 7, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 136, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 224, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'hxw xt an attacker recover the secrets in that flash? i unxxxxxxd ty xxn xxxz r xs in e app coxe xxd xxxxxxt xx, xt xxxxe couxd xe sxxe indistinct general side channel attack or so. but w d xn atxxxr rxxxxy go abt xxxxxg to recover those keys?  axe e viabxe aps r a d ar to xw shave-down the chip or some kind of microscope attack? '}
{'sentId': 54, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 11, 'text': 'evil people can do bad things if they identify your public key', 'label': 'ATTACK'}], 'sentText': "presumably evil people can do bad things if they identify your public key. google seems to think so, apparently. i can guess what this step does, but i'm not sure i really want to speculate on that in an open forum, and give anyone any ideas.  you want to do it though. "}
{'sentId': 82, 'articleId': '2', 'threatType': 'S', 'relationMentions': [{'em1Text': 'access that endpoint', 'em2Text': 'use the token it provides', 'label': 'None'}, {'em1Text': 'use the token it provides', 'em2Text': 'access that endpoint', 'label': 'PARENT'}], 'entityMentions': [{'start': 302, 'text': 'access that endpoint', 'label': 'ATTACK'}, {'start': 327, 'text': 'use the token it provides', 'label': 'ATTACK'}], 'sentText': 'since i do not hxxe control over how the static websixe is sxxxxx, i cannot generate a csrf txxxn when xxxxxxe loads my static websixe (and insert txe token into forms or send it with my ajax requxxxxx. i couxd create a [code] exxxxxxt to retrieve the xxxxx, but it seems like an attacker cxxxd simply access that endpoint and use the token it provides?   i xxxxd crexxe a gxt endxxxxt to xxxxxxxe the toxxx, but it seems like xn attacker could xxxxxy access xxxt exxxxxxt and xxe the toxxn it provides? '}
{'sentId': 108, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 84, 'text': 'the attacker to pass arbitrary number of arguments', 'label': 'ATTACK'}], 'sentText': '  escapeshellcmd() should be used on the whole command string, and it  still allows the attacker to pass arbitrary number of arguments. for  escaping a single argument escapeshellarg() should be used instead. '}
{'sentId': 24, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 29, 'text': 'buffer overflow attack', 'label': 'ATTACK'}], 'sentText': "this code is vulnerable to a buffer overflow attack, and i'm trying to figure out why. i'm thinking it has to do with [code] being declared a [code] instead of an [code], but i'm not really sure. "}
{'sentId': 14, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'man-in-the-middle attacks', 'em2Text': 'passively listening in on your encrypted traffic', 'label': 'PARENT'}, {'em1Text': 'man-in-the-middle attacks', 'em2Text': 'gain access to your shared symmetric key', 'label': 'None'}, {'em1Text': 'passively listening in on your encrypted traffic', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}, {'em1Text': 'passively listening in on your encrypted traffic', 'em2Text': 'gain access to your shared symmetric key', 'label': 'PARENT'}, {'em1Text': 'gain access to your shared symmetric key', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}, {'em1Text': 'gain access to your shared symmetric key', 'em2Text': 'passively listening in on your encrypted traffic', 'label': 'None'}], 'entityMentions': [{'start': 68, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}, {'start': 401, 'text': 'passively listening in on your encrypted traffic', 'label': 'ATTACK'}, {'start': 477, 'text': 'gain access to your shared symmetric key', 'label': 'ATTACK'}], 'sentText': 'how exactly is this done? what about the process makes it immune to man-in-the-middle attacks?what prevents some random person from setting up their own verification service to use in man-in-the-middle attacks, so everything "looks" secure? note that the certificate authority (ca) is essential to preventing man-in-the-middle attacks.  however, even an unsigned certificate will prevent someone from passively listening in on your encrypted traffic, since they have no way to gain access to your shared symmetric key. '}
{'sentId': 77, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'PARENT'}, {'em1Text': 'hacker see this happening and get those keys', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'hackers will be able to build a hacked version', 'em2Text': 'all the levels pre-downloaded inside', 'label': 'PARENT'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hacker see this happening and get those keys', 'label': 'None'}, {'em1Text': 'all the levels pre-downloaded inside', 'em2Text': 'hackers will be able to build a hacked version', 'label': 'None'}], 'entityMentions': [{'start': 24, 'text': 'hacker see this happening and get those keys', 'label': 'ATTACK'}, {'start': 212, 'text': 'hackers will be able to build a hacked version', 'label': 'ATTACK'}, {'start': 264, 'text': 'all the levels pre-downloaded inside', 'label': 'ATTACK'}], 'sentText': 'is that safe or can the hacker see this happening and get those keys? do i need to protect those keys at all? i am afraid that people will be able to get the files from s3 with out purchasing the levels. or that hackers will be able to build a hacked version with all the levels pre-downloaded inside. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 182, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'e access  load this r i this s nom access y sud to is mi i  can nimal,  to but sie th nimal, e th e are no access restrictions,   restrictions, usly the sr cn obv to o can y  can be attacked by dos etc. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': 's qu o the first issue is somexxe could decompile the app  c (which ixxe  c proguar proguaxd d ould dxxx) and even with proguard you can qu with   wi the thout xxo xxxh dif oxxxxe ficulty retrieve all xxe  ould qu dec the om txe pile xs can tixxx.  '}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in rails, when i want to find by a user given value and avoid sql injection (escape apostrophes and the like) i can do something like this: i know that an unsafe way of doing this (possible sql injection) is this: my question is, does the following method prevent sql injection or not? '}
{'sentId': 65, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 85, 'text': 'brute force login attacks', 'label': 'ATTACK'}], 'sentText': 'as a respe o te recext xxxxx] and [lxxxx, wxxt s the best way to e r website against brute force login attacks? '}
{'sentId': 47, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'em2Text': 'put this code right into the file', 'label': 'PARENT'}, {'em1Text': 'put this code right into the file', 'em2Text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'label': 'None'}], 'entityMentions': [{'start': 15, 'text': 'there was some malicious code at the end, suddenly. the output of my index.php was:[code]', 'label': 'ATTACK'}, {'start': 186, 'text': 'put this code right into the file', 'label': 'ATTACK'}], 'sentText': 'but yesterday, there was some malicious code at the end, suddenly. the output of my index.php was:[code] i opened the file on my webspace (downloaded via ftp) and i saw that someone had put this code right into the file! '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 187, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 233, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my e  sn , w xxxe  i is "au t th e  = x? s e , i   y  n   s re tt this xe xxxn s t y an saxe   s aud r can s e , t w y  e e  is it o b c xt a e auth e xxxo i,   e sxf ca e ? ca i n somee sign up for the app, o  a bee nd n bo use me  use those credentials to get request right into my database? '}
{'sentId': 77, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 209, 'text': 'third party application like google analytic could store in their report such urls and query string', 'label': 'ATTACK'}], 'sentText': 'u report rls with their urls  que in ry and   que strings  coul  d param their   ete log, rs are sav  e que d in web server log, and  with access t  o them analytic  c application ould com in promise security.third party application like google analytic could store in their report such urls and query string. '}
{'sentId': 55, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'use all these cookie for authentication', 'em2Text': 'cookie spoofing attack', 'label': 'None'}, {'em1Text': 'cookie spoofing attack', 'em2Text': 'use all these cookie for authentication', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'use all these cookie for authentication', 'label': 'ATTACK'}, {'start': 364, 'text': 'cookie spoofing attack', 'label': 'ATTACK'}], 'sentText': "my question is: why use all these cookie for authentication? my guess would be that maybe generating a session hash would be to easy so using the hashedpassword and userid adds security but what about cookie spoofing? i'm basically leaving on the client all fundamental informations. my main concern is about these solution giving to much information when under a cookie spoofing attack. "}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': 'if you are concerned with the first case (someone posting malicious data to/as another user) the solution is the same whether you are using ajax or not -- you just have to authenticate the user through whatever means is necessary -- usually via session cookie. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i xxxt to include the capabxxxxy to stop ddos attacks from a certain ip (or pool of ips). txxs as to be at xxe nginx xxxxx, rather txxn axy deeper xn the xxxx. do i need a web application firxxxxx? if so, xxw do i integrate it. '}
{'sentId': 3, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'sql injection', 'em2Text': 'user can input something like [code]', 'label': 'PARENT'}, {'em1Text': 'sql injection', 'em2Text': 'the query becomes:[code]', 'label': 'PARENT'}, {'em1Text': 'user can input something like [code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'user can input something like [code]', 'em2Text': 'the query becomes:[code]', 'label': 'AND'}, {'em1Text': 'the query becomes:[code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'the query becomes:[code]', 'em2Text': 'user can input something like [code]', 'label': 'None'}], 'entityMentions': [{'start': 111, 'text': 'sql injection', 'label': 'ATTACK'}, {'start': 19, 'text': 'user can input something like [code]', 'label': 'ATTACK'}, {'start': 61, 'text': 'the query becomes:[code]', 'label': 'ATTACK'}], 'sentText': "xxxxxs because the user can input something like [code], xxd the query becomes:[code] xxe correct way to avoid sql injection attacks, no matter which databaxe you use, is to separate xxe data from sqx, so that data xxxxs dxxa and will never be interpreted as commands by the sxl parser. it is possible to creaxe sql statement with correcxxy formatted xxxa parts, xxt if xxu don't fully unxxxxxxxd the dexxxxx, you should always xxe prepared staxxxxxxs and paramxxxxxxxd queries.  "}
{'sentId': 57, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'em2Text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'OR'}, {'em1Text': 'compromise the user-experience for other players by, for example, hacking', 'em2Text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'None'}], 'entityMentions': [{'start': 206, 'text': 'sending his/her updated collection of the most malicious viruses in existance to the server/other clients', 'label': 'ATTACK'}, {'start': 325, 'text': 'compromise the user-experience for other players by, for example, hacking', 'label': 'ATTACK'}], 'sentText': 'pois ad insight on security s t i should take io n when g , mainly games, such as te one ded bel. y security i mn checking and de chg that a user doest act in a way not intended. ts could mean behr such as sending his/her updated collection of the most malicious viruses in existance to the server/other clients, r otherwise compromise the user-experience for other players by, for example, hacking. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 105, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 175, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 225, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 247, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d y can z fr s xn te ap e ad t , t e cxxd be xe indistinct general side channel attack r . bt how d n ar y o t tryg o recover those keys?  xe e ve xxs for a d ar to sw shave-down the chip r some kind of microscope attack? '}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 244, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'today, our enterprise architect mentioned that a recent vulnerability was discovered in the jre 1.7.  i found an article the [link].  the details of the latest vulnerability have not been made public.  however, my understanding is that it only affects java browser plugins.  the recommended mitigation is to disable the java browser plugins.  no mention is made of non-plugin java, so i think it is safe to assume that your dev machine is not vulnerable simply by virtue of having java 7 installed. '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  this would be a time consuming process which is what makes salts effective.  this does not help a tremendous amount against dictionary or brute force attacks. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 153, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am usixg cloudfla my xe on my wxxxxxe and   i wan my t to keep  i my s ddos erver's ip (the orig cloudfxa in i cxxxxxxxxe p) private, am   to xo avoxd ddos attacks bei apache, n prixxxx, g sent dxr xxxxxr ectly to    apache, my servxxxs ip. xy server  ip. xxxs  cloud oxxg flare apache, php, my my sxx. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'xxw might an attacker recover the secrets in that flash? i xxxxxxxxxd xxxy can fuzz for vulnxxxxxxxxxxs in txe app cxxe axd expxxxt xx, xxxt thexe xxxxd be sxxe indistinct general side channel attack or somexxxxx. bxt how wouxd an axxxxxxr realxy go axxxt xxxxxg to recover those keys?  axe thxxe viable axxxxxxxxs for a dexxxxxxxd attaxxxr to somexxw shave-down the chip xr some kind of microscope attack? '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'the whole poxxt of haxxxxg a pxxxxxxd is in caxe a hacker gets access to the database. if i store the xxxt in the xb within the xxxe row as the haxxxd passwoxx, isn\'t it just like i am handing the hacxxr the "sexxxt xxxxx? i am putting up a door with a lock, xxd handing the intrxxxr the key. '}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 43, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': 'the whole point of using salts is to avoid the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes . thus, it only needs to be long enough to exclude the possibility that such a table already exists for a specific salt. '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  if you give yourself write privilege to the system site-packages,  you're risking that any program that runs under you (not necessarily  python program) can inject malicious code into the system  site-packages and obtain root privilege. "}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my prm is that n h my project is 1% le, and not shady, it is highly sue to ol ddos attacks. '}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 42, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 287, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  sey reco: t is highy d that you do not  hard-code the exact public license key string value as provided by  googe play. , you n construct the whole pc license key  string at runtime m substrings, or retrieve t from an end  store, befoe passg it to te cons. this h s it  more difft for malicious third-parties to modify the public  license key string in yr apk . '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 135, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 216, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d they can xxxz fxr xxxxxxxxxxxxxxs xn te app cxe ad t xx, t te cxxxd be xxxe indistinct general side channel attack or . but how d an attacker y go t tryig o recover those keys?  xxe txxxe ve xxxs for a d ar to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 37, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 33, 'text': 'buffer overflow attacks', 'label': 'ATTACK'}], 'sentText': 'what are the ideas of preventing buffer overflow attacks? and i heard about stackguard,but until now is this problem completely solved by applying stackguard or combination of it with other techniques?   why do you think that it is so  difficult to provide adequate  defenses for buffer overflow attacks? '}
{'sentId': 88, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 376, 'text': 'coopt our site to request any method', 'label': 'ATTACK'}], 'sentText': 'my quesn is rexxxxd to xxe cor is  accexxxxn s  xy r,  re head api es fro of m the aws i gatexxy accxxxxxo specif nxxxxxxn  , spxxxxxxxxxy te accesn l rxxxxxd y txn xo  response header that s set that  xo axy xxt  "\' * . xxe  xxxs xxe ini xxxxxxn accessn n cate t is in s   th  e s of g the ay x\' spf response ixxxxy  * \'" pxr f ame respxe to  x, nal x\'  s y e  xxxt a \'r can coopt our site to request any method\' on our back-end: ([link]). *  '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 188, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 241, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 264, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d xxxy n z xxr xxxs xn te app e ad t , t te cxxxd xe xxxe indistinct general side channel attack or . but how d an r y o t txxxg o recover those keys?  e txxxe ve s for a d ar to sxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i wat to inclue the capay to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nx level, r than y r in the c. do i need a web appn firewall? if s, how do i integrate it. '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 258, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': 'ixm nxw to cxf and i wxxxd  i i f xxxe to k has now i xxw f it   xxs any buil ssixg dxxn   mxxxxxxxm thxt w to o t xxf o xxd alxxw limiting xxe nuxxe se r  i i  of conxxxxxxt xxxxs xo th a e web sxxxxxx, thus addre th ssing  xxxxxxxxxxy the possixxxxxy xf a dos attack? somxt i hing lxxxxxxg  similxr to th se xxxxxxxg rxxxx, is of  axd  xxxxxxe of wcf? '}
{'sentId': 32, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'any variable that a user can control,  an attacker can also control', 'label': 'ATTACK'}], 'sentText': 'any variable that a user can control,  an attacker can also control and s  ,  an therefore a e of an .    ts   f d   s c s , n      a c ay a of ll s ald  ed a "" vari, and s  can un.  '}
{'sentId': 49, 'articleId': '4', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 27, 'text': 'format string vulnerability in c++', 'label': 'ATTACK'}], 'sentText': 'i have found out about the format string vulnerability in c++, but c++ is an old language. i want to know whether the format string vulnerability still exists in modern languages, like c# and java. '}
{'sentId': 62, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 73, 'text': 'steal these credentials', 'label': 'ATTACK'}], 'sentText': 'however, i still think there are edge cases here where it is possible to steal these credentials, and believe they should be sent via an https post.  is this actually a safe means of sending login/token data? '}
{'sentId': 61, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'creating a forum software using php and mysql backend', 'em2Text': 'user input for forum posts.', 'label': 'None'}, {'em1Text': 'user input for forum posts.', 'em2Text': 'creating a forum software using php and mysql backend', 'label': 'PARENT'}], 'entityMentions': [{'start': 5, 'text': 'creating a forum software using php and mysql backend', 'label': 'ATTACK'}, {'start': 99, 'text': 'user input for forum posts.', 'label': 'ATTACK'}], 'sentText': 'i am creating a forum software using php and mysql backend, xxd xt to w wxt s te t xxxe xy xo xxxe user input for forum posts. '}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 212, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 313, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 397, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': 'but, is there anyway to steal httponly cookies, with xss? (ignoring the question of httponly support?)....the answer is: yes.a subset of xss is known as [link] (or go to the original [link]). this attack has the xss payload send an http trace request to the web server (or [link], forward or reverse), which will echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookies... '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to ixxxxxe the capability to stop ddos attacks from a certain ip (or pool of ips). this as to xe at xxe nxxxx levex, xxxxxr than any deeper in the code. do i need a web applicatixn firewalx? if so, how do i xxxxxxxxe it. '}
{'sentId': 93, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer my android appliaction code', 'em2Text': 'could see exactly what i do', 'label': 'None'}, {'em1Text': 'could see exactly what i do', 'em2Text': 'reverse engineer my android appliaction code', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'reverse engineer my android appliaction code', 'label': 'ATTACK'}, {'start': 180, 'text': 'could see exactly what i do', 'label': 'ATTACK'}], 'sentText': 'it seems to me that no matter which approach i will choose, someone who wants to hack it, will just need to reverse engineer my android appliaction code (which isn`t very hard) andcould see exactly what i do, wheather i encrypt the data, use hardcoded password or any other solution for that matter. '}
{'sentId': 66, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 166, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}], 'sentText': 'while improving the security of an ios application that we are developing, we found the need to pin (the entire or parts of) the ssl certificate of server to prevent man-in-the-middle attacks.  '}
{'sentId': 117, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 252, 'text': 'dos attack', 'label': 'ATTACK'}], 'sentText': "i'm new t att to a calxs ck? o cxf xd  calls i would lixe kw  to know if   it   has any build-n mec a xxm tht woud alo calls w lxxg t this xe f  cas  nxm and b ca s xxs er f c cxf onxxr cf rent calls to the wxb s cxf xx, thus would  a w? dg te py of a dos attack? soxxxg sxi  xr to this fxxxxxe i  of wcf? "}
{'sentId': 106, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'php is gets compromised', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}, {'em1Text': 'php is gets compromised', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'em2Text': 'the user has broken the root login of the linux box running php', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'php is gets compromised', 'label': 'None'}, {'em1Text': 'the user has broken the root login of the linux box running php', 'em2Text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'None'}], 'entityMentions': [{'start': 81, 'text': 'php is gets compromised', 'label': 'ATTACK'}, {'start': 304, 'text': 'malicious user will not be able to obtain the details needed for connection string for mysql', 'label': 'ATTACK'}, {'start': 410, 'text': 'the user has broken the root login of the linux box running php', 'label': 'ATTACK'}], 'sentText': 'how to sxxxxe xxxxxxxe xxxxxxxxxxs in a web axxxxxxxxxn in cxxe txe xxxxxr whxxe php is gets compromised?axxxxe that in this xxxxxxxxs caxe xe are not talking about xxxxxd hostxxx, xxs or anxxxxxg alixx, therexs xxxy one perxxn wxo has acxxxs to the box xxxt stores myxxl informatixx. how to exxxxe thxt malicious user will not be able to obtain the details needed for connection string for mysql? xxxxxe thxt the user has broken the root login of the linux box running php. '}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "so the t is  ould so d) e (h  e is (which te    the s r omeoe  to c (h   ould decompile the app (whi  ch i'e d) d even wi app h p  a even firt  r first   oud first  dep n  t e he il  ould  e d yo too u can ret  without too mu is  (h  h  ch t    ch diy to  o  rt te rv ( (wh  so whh e al e  fit  first qo rt n.  "}
{'sentId': 81, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': '[code]', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 0, 'text': '[code]', 'label': 'ATTACK'}, {'start': 54, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': '[code] will this automatically make my code immune to sql injection? do i have to do something extra? [code] because there is simply no way to pass the tablename itself as a parameter and the desire to do exists sometimes - misguided or not. it seems it is then often overlooked, that tablename (unless maybe only read from a set of static/constant values that do not derive from any input) indeed allows for sql injection. '}
{'sentId': 98, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'allow an attacker to predict boot time of the machine', 'em2Text': 'being able to grant control over it', 'label': 'None'}, {'em1Text': 'being able to grant control over it', 'em2Text': 'allow an attacker to predict boot time of the machine', 'label': 'PARENT'}], 'entityMentions': [{'start': 307, 'text': 'allow an attacker to predict boot time of the machine', 'label': 'ATTACK'}, {'start': 366, 'text': 'being able to grant control over it', 'label': 'ATTACK'}], 'sentText': "we've hired a sexxxxxy conxxxxxxt xo pxxxxxm a pentest on our apxxxxxxxxxxs public xp xxxxxxxxxxs loadbalanxxx) and write a report on our xxxxxxxy flaws and the measurexxxxs required to avoid xxxx. their repxxt waxxxd us that we xxxe tcp timestamp xxxxxxx, xxd from wxxt i've rexd about the issue, it wxxxd allow an attacker to predict boot time of the machine txxs being able to grant control over it. "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 22, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 50, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 292, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it e for someoe to 'hack' an apache server and read php files. i understad that pp is a server-side e and cannot be read from anywe other than the s, but could se hack the server and read thm as f reading a text file? well , if they ever actually hack into the server (s, ftp et, ty my he access to files on the hard disk. a properly confd apae r will nt e raw php s t, it shod alwas process them with the php r first. "}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 132, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'however, i do not understand the concerns about security vulnerabilities. certainly, running [code] gives the hacker the ability to run any javascript code that you can run. '}
{'sentId': 18, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 338, 'text': 'pull data from my database', 'label': 'ATTACK'}], 'sentText': "i will preface this question by saying i am not a web developer, nor do i have much knowledge in this field. i am a business owner and have a low volume website that my customers purchase products on. i've noticed this set of queries a few minutes ago and they appear very suspicious to me, a layperson. it looks as if they are trying to pull data from my database? i could be totally wrong, but someone please let me know what they think is going on here.  "}
{'sentId': 60, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 117, 'text': 'freezer attack', 'label': 'ATTACK'}], 'sentText': 'xs there key  any wxy to protext xo   xxxxxxxr  i exxxxxxxxn keys that are  from being   in wxy xxxxxd in ram from a freezer attack? (sxxxxx key xs s x  g the xxxxx xs xxr i xxxxxxxr n a frexxxr before rebo that oting malicious code x to o ac (s  xxxxxxg cess the contenxs o  f ram) '}
{'sentId': 14, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'sql injections attacks', 'label': 'ATTACK'}], 'sentText': 't the hexe is px   xf a m mr r prxxm i via n the e - it is  string vulnerable to sql injections attacks since   txe  since  via quxxy xs nt parametexx  n i xxd h via  db i and is conxx txe xxd via string xxxxx xf x.   xf you cl the xxi  function  xi xxxs  atts thexe  wa: '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 141, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 191, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 318, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 424, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 463, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my pro to blem  be is in  hash   hash tha the gain   ord  likely  the  pass is w use o  rd (2   password t   would attack. i fee hash  use l the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the attack hash e password, r can no pass and w simply ord w simply use that hash to get access to the user's information t . in (2 interc my ept ), the a interc ttacker can intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 162, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'em2Text': 'spoof that user', 'label': 'None'}, {'em1Text': 'spoof that user', 'em2Text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'anyone can just change their cookie to another reasonable-looking number based on their own', 'label': 'ATTACK'}, {'start': 244, 'text': 'spoof that user', 'label': 'ATTACK'}], 'sentText': 'if your user id is a sequential number, this is pretty insecure as anyone can just change their cookie to another reasonable-looking number based on their own (e.g. if mine is 1274, i could try some other numbers in that range) and immediately spoof that user. '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 70, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 125, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  xf yu e f e pe xo e m xxx,  ye g txxt ay m t rs xxr u t y  n x) can inject malicious code into the system  site-packages d obtain root privilege. '}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 23, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 216, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 303, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i am trying to perform a buffer overflow attack on a program for a class assignment. both the attack program as well as the vulnerable programme is written by me. however, i would like to use the attack programme to keep supplying incrementally longer payloads till the programme crashes. so, i need to dynamically generate larger payloads of junks. i am using [code] to repeatedly call and test for an abnormal exit. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 128, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 203, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'howevxx, i do xt xxxd t vulxxxxxxxx. xe  code s running  how xxxx evxx,  abo about ut xxxxxxxy vulxxxxxxxx. cxxxxxxxx running , running [code] gxx axxx  xxxx xt xxxy xs te hr  code the axxx running y to run any javascript code that you can run vulxxxxxxxx. . run.  '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 62, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 's ci c? g e referrer eng te h o   pe rf is errer ct against a cross site request forgery attack?  to i  pr referrer oe the  kno at w t woul he to  rer can  wo  rk? e spoofed, t is the  way any wy fr  tokens the  the e  attacker to do  checking tha woul t for the clien? i w tos are the no, bt l for d th to is  referrer work? '}
{'sentId': 105, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'call your resource server', 'label': 'None'}, {'em1Text': 'attacker gains access to your non-expiring access token', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'call your resource server', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'PARENT'}, {'em1Text': 'call your resource server', 'em2Text': 'get confidential data as response', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'attacker gains access to your non-expiring access token', 'label': 'None'}, {'em1Text': 'get confidential data as response', 'em2Text': 'call your resource server', 'label': 'PARENT'}], 'entityMentions': [{'start': 79, 'text': 'attacker gains access to your non-expiring access token', 'label': 'ATTACK'}, {'start': 150, 'text': 'call your resource server', 'label': 'ATTACK'}, {'start': 179, 'text': 'get confidential data as response', 'label': 'ATTACK'}], 'sentText': 'the differenxe xn a h n d a nog s n in ms of y is e l l xo xxe axxn serverf an attacker gains access to your non-expiring access token, he n xxxxxxxy call your resource server ad get confidential data as response.<r />xxw if he stxxxs xxxr reh to, he xxxt has to xxxl te authorxxxxxxn sr axd ree an accexs tn xn . then e cn y the e r fr cl x. '}
{'sentId': 95, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 30, 'text': 'just go down to the assemble code', 'label': 'ATTACK'}], 'sentText': 'i knxw xxxt an atxxxxxr could just go down to the assemble code, and at txxt point thxxe is nothixg at all i can do against this (the xxxxxm has to be able to encrypt / decrypt the data), but is there like a xxxxxxxt for c# to get the encrypxxxxxxxx, since it is mxxxxxx, or does somexxxxg like this sxxxl reqxxxe you to xo doxn to the xxxxxxxe code? '}
{'sentId': 71, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'tampered software by an attacker', 'label': 'ATTACK'}], 'sentText': 'xr sey r, xt s dee o chk e integxxxy xf xxxe e ex, g tampered software by an attacker. , my xxxxn is '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 159, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 216, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': '  if you give yourxxxf write pxxxxxxxe to the xxxxxm sitxxxxxxxxxx,  yxxxxe xxxxxxg that axy program thxt runs under yxu (not necessarxxy  python progxxx) xxn inject malicious code into the system  site-packages and obtain root privilege. '}
{'sentId': 1, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'password to be send plaintext over the wire', 'em2Text': 'someone has javascript turned off', 'label': 'PARENT'}, {'em1Text': 'someone has javascript turned off', 'em2Text': 'password to be send plaintext over the wire', 'label': 'None'}], 'entityMentions': [{'start': 270, 'text': 'password to be send plaintext over the wire', 'label': 'ATTACK'}, {'start': 317, 'text': 'someone has javascript turned off', 'label': 'ATTACK'}], 'sentText': 'i choose not to juxt xxxy on jaxxxxxxxx, as the client-side xs never a secure xxxxx. i have gotten into txe habit of writing xxxh the client and serxxxxxxxe code xxr such thixxx. howevxx, for a wxb application that i am wrixxxg that has optional xxxx, i do not want the password to be send plaintext over the wire if someone has javascript turned off. '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 171, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': 'my problem   is tha even t  an is d even though my proj and e and ct is 100% legal, and not shady, it is ct  highl ddos y susce problem  ddos ptible to o though ccasional ddos attacks. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 55, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'break [code] ', 'label': 'None'}, {'em1Text': 'uses an unsafe [code] extension', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'uses an unsafe [code] extension', 'label': 'None'}, {'em1Text': 'break [code] ', 'em2Text': 'inserting different elements with different [code] instances', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'uses an unsafe [code] extension', 'label': 'PARENT'}, {'em1Text': 'inserting different elements with different [code] instances', 'em2Text': 'break [code] ', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'uses an unsafe [code] extension', 'label': 'ATTACK'}, {'start': 43, 'text': 'break [code] ', 'label': 'ATTACK'}, {'start': 58, 'text': 'inserting different elements with different [code] instances', 'label': 'ATTACK'}], 'sentText': 'e ce xw uses an unsafe [code] extension xo break [code] y inserting different elements with different [code] instances: '}
{'sentId': 114, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 99, 'text': 'retrieve the "real" global object', 'label': 'ATTACK'}], 'sentText': 'no matter what you do with your code\'s execution environment using [code], it is still possible to retrieve the "real" global object using the following trick: '}
{'sentId': 155, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 193, 'text': 'keep attackers from defeating ios keychain or such data protection', 'label': 'ATTACK'}], 'sentText': 'i am developing an ios app that it has to store username and password and other sensitive data. i am considering using nsuserdefaults or keychain storage. are there other more secure method to keep attackers from defeating ios keychain or such data protection?  '}
{'sentId': 10, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'take the id', 'em2Text': 'run it through a mysql query ', 'label': 'AND'}, {'em1Text': 'take the id', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'take the id', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'retrieve 1 record', 'label': 'AND'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'run it through a mysql query ', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'mess this url up', 'label': 'None'}, {'em1Text': 'retrieve 1 record', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'mess this url up', 'em2Text': 'retrieve 1 record', 'label': 'PARENT'}, {'em1Text': 'mess this url up', 'em2Text': 'pose a security threat to my application/mysql db', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'take the id', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'run it through a mysql query ', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'retrieve 1 record', 'label': 'None'}, {'em1Text': 'pose a security threat to my application/mysql db', 'em2Text': 'mess this url up', 'label': 'PARENT'}], 'entityMentions': [{'start': 156, 'text': 'take the id', 'label': 'ATTACK'}, {'start': 172, 'text': 'run it through a mysql query ', 'label': 'ATTACK'}, {'start': 204, 'text': 'retrieve 1 record', 'label': 'ATTACK'}, {'start': 324, 'text': 'mess this url up', 'label': 'ATTACK'}, {'start': 345, 'text': 'pose a security threat to my application/mysql db', 'label': 'ATTACK'}], 'sentText': 'ixxs  o pxe xt e  xt  y   xxxe  xxxxxxxy  o xt bxxxxs to you a applicxxxxxxxxs  mexs xxd xl xd  t  it i xp  that the php xs a   xxxx. xxxxg i g  xxxg t  to take the id xxd run it through a mysql query to retrieve 1 record to d  a xy xxxl t xy xt o xd n xxe xxxx. is xd  xxxxe  t axxxxy sxm xxxx. o  e xxxxxxxxs hacxxr cxxxd mess this url up xxd pose a security threat to my application/mysql db? '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  this would be a time consuming process which is what makes salts effective.  this does not help a tremendous amount against dictionary or brute force attacks. '}
{'sentId': 78, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': "users might upload code that attempts to 'hack' the system", 'label': 'ATTACK'}], 'sentText': "the problem is that users might upload code that attempts to 'hack' the system. i understand that in c and c++ it's easy to disable a certain set of system calls (patch a few .dll's), but i'm not so sure about other languages. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 135, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 216, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 277, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 300, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d they can xxxz fxr xxxxxxxxxxxxxxs xn te app cxe ad t xx, t te cxxxd be xxxe indistinct general side channel attack or . but how d an attacker y go t tryig o recover those keys?  xxe txxxe ve xxxs for a d ar to somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 4, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'potential attacker is able to change code', 'em2Text': 'application from being modified', 'label': 'PARENT'}, {'em1Text': 'application from being modified', 'em2Text': 'potential attacker is able to change code', 'label': 'None'}], 'entityMentions': [{'start': 124, 'text': 'potential attacker is able to change code', 'label': 'ATTACK'}, {'start': 287, 'text': 'application from being modified', 'label': 'ATTACK'}], 'sentText': "and also whate  ve to y well sad b y y  cant @inaz to aruk: we protection ver you also   also do to  y code, ou your cod, a potential attacker is able to change code prote there ction  n  ce y  poten b tial wy se or he finds it feasible. u bas tial icay can't p we r ve otect  , l  r b  application from being modified. and any pt code, ecn you in  put in there n be disabl  is can't ed/r. "}
{'sentId': 90, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'a security vulnerability to read php source', 'em2Text': 'string dumps from a security breach', 'label': 'OR'}, {'em1Text': 'string dumps from a security breach', 'em2Text': 'a security vulnerability to read php source', 'label': 'None'}], 'entityMentions': [{'start': 92, 'text': 'a security vulnerability to read php source', 'label': 'ATTACK'}, {'start': 216, 'text': 'string dumps from a security breach', 'label': 'ATTACK'}], 'sentText': "make the file unreadable via the web using rules in .htaccess (in case php fails or there's a security vulnerability to read php source)destroy the password in memory after the db connect is made (unset) (to prevent string dumps from a security breach, injection, etc.)  "}
{'sentId': 85, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'whips up an ackermann function and a script', 'em2Text': 'submit it a couple of thousand times to your server.', 'label': 'None'}, {'em1Text': 'submit it a couple of thousand times to your server.', 'em2Text': 'whips up an ackermann function and a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 84, 'text': 'whips up an ackermann function and a script', 'label': 'ATTACK'}, {'start': 131, 'text': 'submit it a couple of thousand times to your server.', 'label': 'ATTACK'}], 'sentText': 'another thing you need to be aware of is denial-of-service attacks. imagine someone whips up an ackermann function and a script to submit it a couple of thousand times to your server... to prevent this, you should timebox the execution time of any code being submitted. this is essential, because this type of "attack" often happens unintentionally - someone managed to produce an infinite loop. '}
{'sentId': 6, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'enters the password', 'em2Text': 'the same hash is generated', 'label': 'None'}, {'em1Text': 'enters the password', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'the same hash is generated', 'em2Text': 'enters the password', 'label': 'PARENT'}, {'em1Text': 'the same hash is generated', 'em2Text': 'access the file', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'enters the password', 'label': 'None'}, {'em1Text': 'access the file', 'em2Text': 'the same hash is generated', 'label': 'PARENT'}], 'entityMentions': [{'start': 108, 'text': 'enters the password', 'label': 'ATTACK'}, {'start': 136, 'text': 'the same hash is generated', 'label': 'ATTACK'}, {'start': 88, 'text': 'access the file', 'label': 'ATTACK'}], 'sentText': "to se a file i dd the followg s rs a hashve that is std n a file. whener the user ws to access the file, he enters the password, and if the same hash is generated, he can access the file.i se this isn't realy sa, but how e it is? how high is e chance that string#hase gs the e hash with two dift inputg to your anss i changed the co t should be betr now?? "}
{'sentId': 112, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 68, 'text': 'the latest log4j exploit', 'label': 'ATTACK'}], 'sentText': "i am tryig xo make sure my jxxxxxs instxxxe is not xxxxxxxxxxe with the latest log4j exploit.i he a pipexxe scrixt xt runs, i trid folg xxxs instructn :s is oe of xy stages of my pixxxxxe scripxxxxxxt i get a dt error than what's descrxxxd here xd i'm unsue if ixm g this cxxxxxxxx.  this is the errorxxxx] "}
{'sentId': 97, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'circumvent security', 'em2Text': 'exploit vulnerabilities in standard software packages', 'label': 'AND'}, {'em1Text': 'exploit vulnerabilities in standard software packages', 'em2Text': 'circumvent security', 'label': 'None'}], 'entityMentions': [{'start': 89, 'text': 'circumvent security', 'label': 'ATTACK'}, {'start': 113, 'text': 'exploit vulnerabilities in standard software packages', 'label': 'ATTACK'}], 'sentText': 'it lead to an interesting finding quite fast: they are astonishingly lots of attempts to circumvent security and exploit vulnerabilities in standard software packages that are commonly found on sites, like phpmyadmin, forums, etc. '}
{'sentId': 72, 'articleId': '4', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 148, 'text': 'insert backdoor or intentionally alter some security features', 'label': 'ATTACK'}], 'sentText': 'my aim is creating an enviroment for developing applications managing sensible data: credit cards, passwords, and so on...a malicious developer may insert backdoor or intentionally alter some security features. so the access to the source code should be controlled strictly.i must confess that my knowledge of version control systems is poor, so, i fear, customizing svn could be a hard task for me. '}
{'sentId': 104, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'apache log4j vulnerability', 'label': 'ATTACK'}], 'sentText': 'apache log4j vulnerability [link] is impacting a number of cloud services.i am using log4j in my android application.how does it impact it or is there no impact at all?i am assuming since the malicious actor could only run local scripts, it should not be an issue but i wanted to confirm. '}
{'sentId': 103, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'command injection', 'em2Text': 'a variable can contain malicious code', 'label': 'None'}, {'em1Text': 'a variable can contain malicious code', 'em2Text': 'command injection', 'label': 'None'}], 'entityMentions': [{'start': 100, 'text': 'command injection', 'label': 'ATTACK'}, {'start': 267, 'text': 'a variable can contain malicious code', 'label': 'ATTACK'}], 'sentText': 'i was wondering, nowadays with the most recent versions of sh, bash, ksh etc. is it possible to get command injection by executing this (very simple) script? despite of the fact that one can already execute code if they have a shell of course, i am just wondering if a variable can contain malicious code like for example in php:  '}
{'sentId': 15, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'used the eval function for the exploit', 'em2Text': 'run their php code on your site', 'label': 'None'}, {'em1Text': 'run their php code on your site', 'em2Text': 'used the eval function for the exploit', 'label': 'PARENT'}], 'entityMentions': [{'start': 87, 'text': 'used the eval function for the exploit', 'label': 'ATTACK'}, {'start': 162, 'text': 'run their php code on your site', 'label': 'ATTACK'}], 'sentText': ' fender has ane hd t ph to p shell of ainy  m  o l aiy r si php p m t? it  on m et aiy used the eval function for the exploit shl  to . k php ers are al has e to run their php code on your site. '}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 33, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a recent vulnerability was discovered in the jre 1.7', 'em2Text': 'affects java browser plugins', 'label': 'None'}, {'em1Text': 'affects java browser plugins', 'em2Text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'PARENT'}], 'entityMentions': [{'start': 47, 'text': 'a recent vulnerability was discovered in the jre 1.7', 'label': 'ATTACK'}, {'start': 244, 'text': 'affects java browser plugins', 'label': 'ATTACK'}], 'sentText': 'today, our xxxxxxxxxe architect mentxxxxd that a recent vulnerability was discovered in the jre 1.7.  i foxxd an arxxxxe the [xxxxx.  the details xf the latest vulnerabixxxy have nxt been made xxxxxx.  howxxxx, my understanding is that xt only affects java browser plugins.  the recommended mxxxxxxxxn is to xxxxxxe txe xxxa browser pluxxxx.  no mention is made of non-xxxxxn xxxx, so i thxxk it is safe to assume that your dev maxxxxe is not vuxxxxxxxe simxxy xy virtue xf haxxxg java 7 instaxxxx. '}
{'sentId': 22, 'articleId': '4', 'threatType': 'I', 'relationMentions': [{'em1Text': 'hard-code the exact public license key string value', 'em2Text': 'malicious third-parties to modify the public  license key string', 'label': 'None'}, {'em1Text': 'malicious third-parties to modify the public  license key string', 'em2Text': 'hard-code the exact public license key string value', 'label': 'PARENT'}], 'entityMentions': [{'start': 56, 'text': 'hard-code the exact public license key string value', 'label': 'ATTACK'}, {'start': 291, 'text': 'malicious third-parties to modify the public  license key string', 'label': 'ATTACK'}], 'sentText': '  xy xxxxxxxxxx: t is xxxxxy recommxxxxd tt you do not  hard-code the exact public license key string value as provided by  googe play. insxxx, you cn construct te xxxe publc e key  xg at e xxxm sxxxxxxxxx, or e it from xn encrypted  s, bee xg it to the xxxxx. this aph xxxxs it  xxxe xt fr malicious third-parties to modify the public  license key string n yxxr axk f. '}
{'sentId': 18, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 41, 'text': 'ddos attacks from a certain ip (or pool of ips)', 'label': 'ATTACK'}], 'sentText': 'i want to include the capability to stop ddos attacks from a certain ip (or pool of ips). this as to be at the nginx level, rather than any deeper in the code. do i need a web application firewall? if so, how do i integrate it. '}
{'sentId': 22, 'articleId': '6', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 47, 'text': 'sql injection attacks', 'label': 'ATTACK'}], 'sentText': 'it can also give you a fighting chance against sql injection attacks. '}
{'sentId': 80, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'multiple php files were modified', 'em2Text': 'this modification injected javascript at the top of the page', 'label': 'None'}, {'em1Text': 'this modification injected javascript at the top of the page', 'em2Text': 'multiple php files were modified', 'label': 'PARENT'}], 'entityMentions': [{'start': 48, 'text': 'multiple php files were modified', 'label': 'ATTACK'}, {'start': 82, 'text': 'this modification injected javascript at the top of the page', 'label': 'ATTACK'}], 'sentText': 'one of our websites was attacked recently where multiple php files were modified. this modification injected javascript at the top of the page but after base64 decoding all of it i came across the following and i have no clue how to proceed.  '}
{'sentId': 101, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 106, 'text': 'some bad person would take advantage of the indirect access to win api', 'label': 'ATTACK'}], 'sentText': 'but, we have  api? a sec ta win ke  indir bad ect urity concern.wha api? t api?  if per indire to ct son  some bad person would take advantage of the indirect access to win api? '}
{'sentId': 114, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'inject malicious code into the system  site-packages ', 'em2Text': 'obtain root privilege', 'label': 'None'}, {'em1Text': 'obtain root privilege', 'em2Text': 'inject malicious code into the system  site-packages ', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'inject malicious code into the system  site-packages ', 'label': 'ATTACK'}, {'start': 142, 'text': 'obtain root privilege', 'label': 'ATTACK'}], 'sentText': "  xf yu e youxf wrxe pe to e m sx,  you'e g txxt any m txt rs under u t y  n xx) can inject malicious code into the system  site-packages axd obtain root privilege. "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 81, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s pxxe  qu o the o xm mxxxe  fir even st is om sue is som c e progxxxd one could decompile the app  proxxxxd  c (wxxxh ixxe  c p y rog  uar proxxxxd d ouxd doxx) a i've xd ev e ould ven en with progxxxd y qu ou can  e    you qu with     wi xxe t  hout to tions. o muc some hoxt one h dif oxxxxe  even ficulxy retxxxv  can xxxxxxxd e can  all xxe  too  oul fixxxxy d qu dxc the om xxe pile es xxn tions.  "}
{'sentId': 18, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'decompile the app', 'label': 'ATTACK'}], 'sentText': "s qu o the first issue is xxxxxxe could decompile the app  c (which i've  c proxxxr proguard d ould dxxx) and even with proguard you can xu with   wi the thout too mxxh dxf ompile ficulty rexxxxxe all the  ould qu xxc the om the pile es can xxxxx.  "}
{'sentId': 110, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'craft malicious input', 'em2Text': 'do something egregious when the object is unpickled', 'label': 'None'}, {'em1Text': 'craft malicious input', 'em2Text': 'sql injection attempts', 'label': 'PARENT'}, {'em1Text': 'craft malicious input', 'em2Text': 'changing credentials', 'label': 'None'}, {'em1Text': 'craft malicious input', 'em2Text': 'brute force password cracking', 'label': 'None'}, {'em1Text': 'do something egregious when the object is unpickled', 'em2Text': 'craft malicious input', 'label': 'PARENT'}, {'em1Text': 'do something egregious when the object is unpickled', 'em2Text': 'sql injection attempts', 'label': 'None'}, {'em1Text': 'do something egregious when the object is unpickled', 'em2Text': 'changing credentials', 'label': 'None'}, {'em1Text': 'do something egregious when the object is unpickled', 'em2Text': 'brute force password cracking', 'label': 'None'}, {'em1Text': 'sql injection attempts', 'em2Text': 'craft malicious input', 'label': 'None'}, {'em1Text': 'sql injection attempts', 'em2Text': 'do something egregious when the object is unpickled', 'label': 'None'}, {'em1Text': 'sql injection attempts', 'em2Text': 'changing credentials', 'label': 'OR'}, {'em1Text': 'sql injection attempts', 'em2Text': 'brute force password cracking', 'label': 'None'}, {'em1Text': 'changing credentials', 'em2Text': 'craft malicious input', 'label': 'None'}, {'em1Text': 'changing credentials', 'em2Text': 'do something egregious when the object is unpickled', 'label': 'None'}, {'em1Text': 'changing credentials', 'em2Text': 'sql injection attempts', 'label': 'None'}, {'em1Text': 'changing credentials', 'em2Text': 'brute force password cracking', 'label': 'OR'}, {'em1Text': 'brute force password cracking', 'em2Text': 'craft malicious input', 'label': 'None'}, {'em1Text': 'brute force password cracking', 'em2Text': 'do something egregious when the object is unpickled', 'label': 'None'}, {'em1Text': 'brute force password cracking', 'em2Text': 'sql injection attempts', 'label': 'None'}, {'em1Text': 'brute force password cracking', 'em2Text': 'changing credentials', 'label': 'None'}], 'entityMentions': [{'start': 29, 'text': 'craft malicious input', 'label': 'ATTACK'}, {'start': 62, 'text': 'do something egregious when the object is unpickled', 'label': 'ATTACK'}, {'start': 236, 'text': 'sql injection attempts', 'label': 'ATTACK'}, {'start': 263, 'text': 'changing credentials', 'label': 'ATTACK'}, {'start': 285, 'text': 'brute force password cracking', 'label': 'ATTACK'}], 'sentText': "is it possible for a user to craft malicious input that could do something egregious when the object is unpickled? yes - depending on what you plan to do with the information in the object later, a user can do all sorts of things. from sql injection attempts, to changing credentials, brute force password cracking, or anything that should be considered when you're validating user input. but you are probably checking for all this. "}
{'sentId': 59, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'inspect any (user) process memoryread local (user) files', 'label': 'ATTACK'}], 'sentText': 'inspect any (user) process memoryread local (user) files '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 188, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 241, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 264, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d xxxy n z xxr xxxs xn te app e ad t , t te cxxxd xe xxxe indistinct general side channel attack or . but how d an r y o t txxxg o recover those keys?  e txxxe ve s for a d ar to sxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 35, 'articleId': '1', 'threatType': 'I', 'relationMentions': [{'em1Text': 'format string attack', 'em2Text': '%x format specifier can be used to read values from the stack', 'label': 'PARENT'}, {'em1Text': '%x format specifier can be used to read values from the stack', 'em2Text': 'format string attack', 'label': 'None'}], 'entityMentions': [{'start': 109, 'text': 'format string attack', 'label': 'ATTACK'}, {'start': 42, 'text': '%x format specifier can be used to read values from the stack', 'label': 'ATTACK'}], 'sentText': 'i have a small question.  i know that the %x format specifier can be used to read values from the stack in a format string attack. '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 206, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 245, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': ' d process p  xr ss      t can abl a  r d ed ex, e xr n   oue e s   x xx. . imxu c t if l , can   rid e. tt n  gs  men if s o n e y bee oe crext [c    x  xxx strs ,  strs ed the [c xxxxxx a s you  ode], if another process can dump memory x. , s no way you can get rid of the data bef s ore [li]    you kc strs  t o e ce e s he ks  t . '}
{'sentId': 98, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss attacks', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': '[code]', 'label': 'None'}, {'em1Text': 'xss attacks', 'em2Text': 'use this email address to attack the website', 'label': 'PARENT'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'create an email address, such as this one', 'em2Text': '[code]', 'label': 'AND'}, {'em1Text': 'create an email address, such as this one', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': '[code]', 'em2Text': 'use this email address to attack the website', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'xss attacks', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': 'create an email address, such as this one', 'label': 'None'}, {'em1Text': 'use this email address to attack the website', 'em2Text': '[code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 50, 'text': 'xss attacks', 'label': 'ATTACK'}, {'start': 207, 'text': 'create an email address, such as this one', 'label': 'ATTACK'}, {'start': 250, 'text': '[code]', 'label': 'ATTACK'}, {'start': 266, 'text': 'use this email address to attack the website', 'label': 'ATTACK'}], 'sentText': "i wonder whether an email address can be used for xss attacks.  let's suppose there is a website where one can register and gives his email address. if one wants to attack the given website, he or she might create an email address, such as this one: [code] and then use this email address to attack the website. the email address in your example appears valid.  the only character that is unusual is the quote [code] -- rest others are valid. "}
{'sentId': 23, 'articleId': '6', 'threatType': 'D', 'relationMentions': [{'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'None'}, {'em1Text': 'a buffer overflow attack on a program', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'a buffer overflow attack on a program', 'label': 'PARENT'}, {'em1Text': 'keep supplying incrementally longer payloads', 'em2Text': 'dynamically generate larger payloads of junks', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'a buffer overflow attack on a program', 'label': 'None'}, {'em1Text': 'dynamically generate larger payloads of junks', 'em2Text': 'keep supplying incrementally longer payloads', 'label': 'PARENT'}], 'entityMentions': [{'start': 14, 'text': 'a buffer overflow attack on a program', 'label': 'ATTACK'}, {'start': 175, 'text': 'keep supplying incrementally longer payloads', 'label': 'ATTACK'}, {'start': 249, 'text': 'dynamically generate larger payloads of junks', 'label': 'ATTACK'}], 'sentText': 'i m g o perfm a buffer overflow attack on a program for a class as. both the attak progrm as well as the vulnerable programme is wn by . ho, i would like to use te ak proe to keep supplying incrementally longer payloads til the proge c. so, i ned o dynamically generate larger payloads of junks. i m using [co] to repeatedly call and test for an abnormal e. '}
{'sentId': 82, 'articleId': '6', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 104, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': "i am using cloudflare on my website and i want to keep my server's ip (the origin ip) private, to avoid ddos attacks being sent directly to my server's ip. my server uses apache, php, mysql. "}
{'sentId': 88, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 271, 'text': 'coopt our site to request any method', 'label': 'ATTACK'}], 'sentText': 'my question is related to the cors response headers from the aws api gateway endpoint, specifically the access-control-allow-origin response header that is set to any "\' * \'". this article indicates the risks of using the any "\' * \'" parameter, namely that a \'hacker can coopt our site to request any method\' on our back-end: ([link]). '}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'wouxxxt someone be able to simply change the referrer header to a malicious website referrer ? xxxxxxt  does maxxxxxxs  xxxxs hav be e any so xxxxxxx? rt of p abxe r to ev mxxxxxxxs xxxxo to n measxr rails es f for or th a xx? '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 130, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 160, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my quesn i, w safe is "auth = null"? yes, i re that this mes t y an aud user can s the da, bt w y is it o become authe? can somee sign up for the app, and then use those credentials to get request right into my database? '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  a separate raxxxxw txxxe would have to be xxxxxxxxd for each xxd every uxxr who had a unixxe salt in order to xxxxxn their xxxxxxxx.  this woxxd be a time consuming procexs whxxh xs what maxxs salts xxxxxxxxx.  this xxxs not help a tremendous xxxxxt xxxxxxt dictionxxy or brute xxxxe attacks. '}
{'sentId': 71, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'running [code]', 'em2Text': 'run any javascript code that you can run', 'label': 'None'}, {'em1Text': 'run any javascript code that you can run', 'em2Text': 'running [code]', 'label': 'PARENT'}], 'entityMentions': [{'start': 85, 'text': 'running [code]', 'label': 'ATTACK'}, {'start': 132, 'text': 'run any javascript code that you can run', 'label': 'ATTACK'}], 'sentText': 'however, i do not understand the concerns about security vulnerabilities. certainly, running [code] gives the hacker the ability to run any javascript code that you can run. '}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 10, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 161, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 266, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 352, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 375, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how might an attacker recover the secrets in that flash? i understand they can xxxz for xxxxxxxxxxxxxxs in the app coxe and xxxxxxt it, xxxt there couxd be some indistinct general side channel attack or somxxxxxx. but how xxxxd xn attacker really go about trying to recover those keys?  are thexe viabxe approaches for a determined attackxr to somxxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 63, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'access hidden fields', 'em2Text': 'using an intercepting proxy (or any number of tools)', 'label': 'PARENT'}, {'em1Text': 'using an intercepting proxy (or any number of tools)', 'em2Text': 'access hidden fields', 'label': 'None'}], 'entityMentions': [{'start': 48, 'text': 'access hidden fields', 'label': 'ATTACK'}, {'start': 104, 'text': 'using an intercepting proxy (or any number of tools)', 'label': 'ATTACK'}], 'sentText': 'a h numb an s  r  g ac (o numb h er r kr  . can access hidden fields (o  jut as easil t y as g  h vs by using an intercepting proxy (or any number of tools). '}
{'sentId': 130, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'set this property to an arbitrary value', 'em2Text': 'spoof this user name', 'label': 'PARENT'}, {'em1Text': 'spoof this user name', 'em2Text': 'set this property to an arbitrary value', 'label': 'None'}], 'entityMentions': [{'start': 64, 'text': 'set this property to an arbitrary value', 'label': 'ATTACK'}, {'start': 211, 'text': 'spoof this user name', 'label': 'ATTACK'}], 'sentText': 'but xxw xxxxxe xs that? can a user exxxxxxxg the progxxm exxxxy set this property to an arbitrary value (usixg a cxxxxxxxxxxe argument of the jxx, for exxxxxx) for common ruxxxxe enxxxxxxxxxx? cxn a usxr exxxxy spoof this user name? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 182, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 222, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': ' d s ump  xr sts      t cxn xxl a  r d d x, e xr on   e xe s   x . . imxu c t f l x, can   rd . tt strxn  gs  mean xf s o on e y bee e t [c    x  x s ,  sts ed e [c xx da s yu  o, f another process can dump memory x. , xs no way you can get rid of the data bef s oe []    u kc ss  t pro e e e ss xe ks  t . '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 87, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is w  ch refe t rrer eck   way g te referre fo wd r r enouh en y h  t are o protet t a cross site request forgery attack? i kw e referrer  the to  n be s  poofed, bu his t is e any way for te attacker to the  do that for e clien ing t? i  t  his know  te to but kens e the  any norm, bu know t would t cg his ? '}
{'sentId': 32, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 0, 'text': 'any variable that a user can control,  an attacker can also control', 'label': 'ATTACK'}], 'sentText': 'any variable that a user can control,  an attacker can also control and s  ,  an therefore a e of an attack.    ts   f ad   s c s ontr, n      a c any a of ll s alled  ed a "" vari, and is  can un.  '}
{'sentId': 36, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 83, 'text': 'sql injection vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i am in a situation where i inherited a rather large web application that has some sql injection vulnerabilities.  i have found several just by looking through the code for other issues, but i'm wondering if a safe way to find all sql injection vulnerabilities would be to search all files for instances of [code] and then check to see if they are parametrized queries.  is this a solid plan? "}
{'sentId': 129, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'tamper with the queries', 'em2Text': "prevent users from requesting information i don't want them to", 'label': 'OR'}, {'em1Text': "prevent users from requesting information i don't want them to", 'em2Text': 'tamper with the queries', 'label': 'None'}], 'entityMentions': [{'start': 73, 'text': 'tamper with the queries', 'label': 'ATTACK'}, {'start': 270, 'text': "prevent users from requesting information i don't want them to", 'label': 'ATTACK'}], 'sentText': "however my concern is with the security of this method since users could tamper with the queries and do things you don't want them to do or request data you do not want them to see. in an application/plugin like this, what kind of security measures would you suggest to prevent users from requesting information i don't want them to? "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 104, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 182, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'e access  load this r i this s nom access y sud to is mi i  can nimal,  to but sie th nimal, e th e are no access restrictions,   restrictions, usly the sr cn obv to o can y  can be attacked by dos etc. '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 55, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 102, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 172, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the problem is  simple t e  alert  simple r  wh simply adds a slash   te im  tht n s java  script ome encoded javascript  sh n im adds ae tg with tht  alt box age ), which kills the page. kills   simpe a that nd effecte attack.   e  '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 376, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how ca i n  can i dxxxxxy the "welcome, [xxxr name] n " on   pxxxxc xxxxs ossible  for autxxxxxxxt public ed usexx, ev the en if t th to er hey use http? of cou sxxu [ ld rxx, i wo to u ossible ld lixe to keep th ossi [ bxe e acxxxs to wo  the sensitive pages s access afe, and i sxxxxd thexxxxxe keep  osxxxxe [   the code] xo avoid p ther sexxi shxxxd on xxo xxy re ossible stealing of the session token. '}
{'sentId': 8, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'a database is compromised', 'em2Text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'None'}, {'em1Text': 'prevents the use of generic rainbow tables to crack passwords', 'em2Text': 'a database is compromised', 'label': 'PARENT'}], 'entityMentions': [{'start': 9, 'text': 'a database is compromised', 'label': 'ATTACK'}, {'start': 51, 'text': 'prevents the use of generic rainbow tables to crack passwords', 'label': 'ATTACK'}], 'sentText': 'assuming a database is compromised a per uxxr salt prevents the use of generic rainbow tables to crack passwords.  a separate xxxxxxw tabxe woxxd have xo be generated xxr each axd xxxxy user who had a uxxxxe salt in order to obtain thexr xxxxxxxx.  this would xe a tixe conxxxxxg proxxxs which is what mxxxs sxxxs xxxxxxxxx.  this does xxt help a tremendous axxxxt against dictioxxxy or brute force attacks. '}
{'sentId': 28, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'stealing the api key', 'em2Text': 'decompiling the swf', 'label': 'AND'}, {'em1Text': 'stealing the api key', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'stealing the api key', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'send random data', 'label': 'None'}, {'em1Text': 'decompiling the swf', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'send random data', 'label': 'AND'}, {'em1Text': 'create a dummy flash application', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'stealing the api key', 'label': 'PARENT'}, {'em1Text': 'send random data', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'send random data', 'em2Text': 'altering the api itself', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'stealing the api key', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'decompiling the swf', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'create a dummy flash application', 'label': 'None'}, {'em1Text': 'altering the api itself', 'em2Text': 'send random data', 'label': 'None'}], 'entityMentions': [{'start': 16, 'text': 'stealing the api key', 'label': 'ATTACK'}, {'start': 69, 'text': 'decompiling the swf', 'label': 'ATTACK'}, {'start': 115, 'text': 'create a dummy flash application', 'label': 'ATTACK'}, {'start': 152, 'text': 'send random data', 'label': 'ATTACK'}, {'start': 182, 'text': 'altering the api itself', 'label': 'ATTACK'}], 'sentText': 'the big one - e stealing the api key via e xxxe ixxxxx, fe t unlocks.decompiling the swf ad sg txe api g e api y o create a dummy flash application and send random data e highscores.altering the api itself o you t nd to be lxxxxd , etc. '}
{'sentId': 111, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'man-in-the-middle attacks', 'em2Text': 'replay attacks', 'label': 'AND'}, {'em1Text': 'replay attacks', 'em2Text': 'man-in-the-middle attacks', 'label': 'None'}], 'entityMentions': [{'start': 51, 'text': 'man-in-the-middle attacks', 'label': 'ATTACK'}, {'start': 198, 'text': 'replay attacks', 'label': 'ATTACK'}], 'sentText': 'how does challenge-response authentication prevent man-in-the-middle attacks? i read the wiki article but still i cannot understand. where challenge/response protocols really shine is in preventing replay attacks: if alice just sends bob a message along the lines of "please debit my account $5 and credit your account $5", mallory could record the message and replay the message to deplete alice\'s account. '}
{'sentId': 78, 'articleId': '1', 'threatType': 'T', 'relationMentions': [{'em1Text': 'perform an mitm attack', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'AND'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'perform an mitm attack', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'AND'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'intercept all requests to public maven repositories', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'AND'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'injecting malicious bytecode into the jar artifacts', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'recalculating and supplying the sha1 hashes', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'perform an mitm attack', 'label': 'PARENT'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'None'}, {'em1Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'PARENT'}, {'em1Text': 'provide masqueraded library copies of the original', 'em2Text': 'injected with malicious or harmful code', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'perform an mitm attack', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'intercept all requests to public maven repositories', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'injecting malicious bytecode into the jar artifacts', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'recalculating and supplying the sha1 hashes', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'None'}, {'em1Text': 'injected with malicious or harmful code', 'em2Text': 'provide masqueraded library copies of the original', 'label': 'PARENT'}], 'entityMentions': [{'start': 278, 'text': 'perform an mitm attack', 'label': 'ATTACK'}, {'start': 305, 'text': 'intercept all requests to public maven repositories', 'label': 'ATTACK'}, {'start': 368, 'text': 'injecting malicious bytecode into the jar artifacts', 'label': 'ATTACK'}, {'start': 426, 'text': 'recalculating and supplying the sha1 hashes', 'label': 'ATTACK'}, {'start': 58, 'text': 'someone sets up masquerades of maven repositories and/or ip streams', 'label': 'ATTACK'}, {'start': 129, 'text': 'provide masqueraded library copies of the original', 'label': 'ATTACK'}, {'start': 184, 'text': 'injected with malicious or harmful code', 'label': 'ATTACK'}], 'sentText': 'what are the risks and possibilities or scenarios whereby someone sets up masquerades of maven repositories and/or ip streams to provide masqueraded library copies of the original but injected with malicious or harmful code. i suppose a dedicated and resourceful attacker could perform an mitm attack and intercept all requests to public maven repositories, carefully injecting malicious bytecode into the jar artifacts, then recalculating and supplying the sha1 hashes. '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i can filter out the messages i get in my webhook callback. however, a malicious user can add my bot to a thousand big groups and will possibly result in denial of service for all other users. even if telegram have implemented some rate limiting such user actions may still result in denial of service for all other users. '}
{'sentId': 163, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 78, 'text': 'avoid attackers to steal the token from a cookie', 'label': 'ATTACK'}], 'sentText': ' to  to a to dxxxxxxxl quxxxxxx: how to a qxxxxxxx: txa xxxxxxxx:  how ckexs  avoid attackers to steal the token from a cookie? '}
{'sentId': 85, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'whips up an ackermann function and a script', 'em2Text': 'submit it a couple of thousand times to your server.', 'label': 'None'}, {'em1Text': 'submit it a couple of thousand times to your server.', 'em2Text': 'whips up an ackermann function and a script', 'label': 'PARENT'}], 'entityMentions': [{'start': 70, 'text': 'whips up an ackermann function and a script', 'label': 'ATTACK'}, {'start': 117, 'text': 'submit it a couple of thousand times to your server.', 'label': 'ATTACK'}], 'sentText': 'another thing you need to e e of is denial-of-service at. ime someone whips up an ackermann function and a script to submit it a couple of thousand times to your server... o prevet thi, you should timebox the exn time of any code g submitted. this is essential, because ths type of "attack" often happens unintentioy - someone managed to pe an infinite loop. '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 22, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 50, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 292, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it e for someoe to 'hack' an apache server and read php files. i understad that pp is a server-side e and cannot be read from anywe other than the s, but could se hack the server and read thm as f reading a text file? well , if they ever actually hack into the server (s, ftp et, ty my he access to files on the hard disk. a properly confd apae r will nt e raw php s t, it shod alwas process them with the php r first. "}
{'sentId': 81, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 31, 'text': 'the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes', 'label': 'ATTACK'}], 'sentText': 'e e pot of usig ss is to avoid the possibility that someone has already precomputed a dictionary/brute force attack for your password hashes . t, it only needs to be long enough to exclude e possiby that such a table alreay exists for a specifc salt. '}
{'sentId': 89, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'create a 100timessha512 function', 'em2Text': 'dos vulnerability', 'label': 'None'}, {'em1Text': 'dos vulnerability', 'em2Text': 'create a 100timessha512 function', 'label': 'PARENT'}], 'entityMentions': [{'start': 150, 'text': 'create a 100timessha512 function', 'label': 'ATTACK'}, {'start': 267, 'text': 'dos vulnerability', 'label': 'ATTACK'}], 'sentText': 'so, i wonder whether adding it every time adds some strength to the hash. for example, would it be possible that an attacker found some clever way to create a 100timessha512 function which were way faster than simply executing sha512 100 times? yes, it does expose a dos vulnerability, but it also prevents brute force attacks (or at least makes them prohibitively slow).  there is absolutely a tradeoff, but to some the benefits exceed the risks... '}
{'sentId': 89, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'xss injections', 'em2Text': 'sql injection', 'label': 'AND'}, {'em1Text': 'sql injection', 'em2Text': 'xss injections', 'label': 'None'}], 'entityMentions': [{'start': 0, 'text': 'xss injections', 'label': 'ATTACK'}, {'start': 15, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'xss injections sql injection this is only a brief overview of what you can do with sql injection. to protect yourself, use mysql_real_escape_string or pdo or any good db abstraction layer. '}
{'sentId': 120, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 60, 'text': 'csrf vulnerabilities', 'label': 'ATTACK'}], 'sentText': "i have made a [link] for detecting and exploiting so called csrf vulnerabilities. i use it to quickly make proof of concepts of such vulnerabilities that i send to the affected site owners. quite often i encounter these forms with a viewstate, and these i don't know if they are secure or not. "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 126, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 208, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 281, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 304, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'how mit an attacker recover the secrets in that flash? i understd they cn z for vus in the app e and explt it, t e cd be some indistinct general side channel attack r so. but how woud an ar rey go about g to recover those keys?  e e viable approas for a determined attar o somehow shave-down the chip or some kind of microscope attack? '}
{'sentId': 67, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'requires a client', 'em2Text': 'automatically downgrades tls protocol to sslv3', 'label': 'None'}, {'em1Text': 'requires a client', 'em2Text': 'failing to establish a secure channel with a server using higher version protocol advertised by the server', 'label': 'AND'}, {'em1Text': 'automatically downgrades tls protocol to sslv3', 'em2Text': 'requires a client', 'label': 'PARENT'}, {'em1Text': 'automatically downgrades tls protocol to sslv3', 'em2Text': 'failing to establish a secure channel with a server using higher version protocol advertised by the server', 'label': 'None'}, {'em1Text': 'failing to establish a secure channel with a server using higher version protocol advertised by the server', 'em2Text': 'requires a client', 'label': 'None'}, {'em1Text': 'failing to establish a secure channel with a server using higher version protocol advertised by the server', 'em2Text': 'automatically downgrades tls protocol to sslv3', 'label': 'None'}], 'entityMentions': [{'start': 69, 'text': 'requires a client', 'label': 'ATTACK'}, {'start': 92, 'text': 'automatically downgrades tls protocol to sslv3', 'label': 'ATTACK'}, {'start': 144, 'text': 'failing to establish a secure channel with a server using higher version protocol advertised by the server', 'label': 'ATTACK'}], 'sentText': 'regarding the poodle vulnerability, if i understand it correctly, it requires a client that automatically downgrades tls protocol to sslv3 when failing to establish a secure channel with a server using higher version protocol advertised by the server. '}
{'sentId': 117, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'adds a slash', 'em2Text': 'encoded javascript', 'label': 'None'}, {'em1Text': 'adds a slash', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'encoded javascript', 'em2Text': 'adds a slash', 'label': 'PARENT'}, {'em1Text': 'encoded javascript', 'em2Text': 'kills the page', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'adds a slash', 'label': 'None'}, {'em1Text': 'kills the page', 'em2Text': 'encoded javascript', 'label': 'PARENT'}], 'entityMentions': [{'start': 65, 'text': 'adds a slash', 'label': 'ATTACK'}, {'start': 88, 'text': 'encoded javascript', 'label': 'ATTACK'}, {'start': 160, 'text': 'kills the page', 'label': 'ATTACK'}], 'sentText': 'the probm is t b   k a er ox h   image at the a p. ttacker simpy adds a slash then some encoded javascript n imae e  the  tag wi    th a e let bx ks ), whic  h kills the page.  simple and ee att.  s then lash   '}
{'sentId': 7, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'including a [code] tag on your site', 'em2Text': 'src is to any site that is not controlled by you', 'label': 'AND'}, {'em1Text': 'including a [code] tag on your site', 'em2Text': 'start farming user sessions/cookies/data', 'label': 'None'}, {'em1Text': 'src is to any site that is not controlled by you', 'em2Text': 'including a [code] tag on your site', 'label': 'None'}, {'em1Text': 'src is to any site that is not controlled by you', 'em2Text': 'start farming user sessions/cookies/data', 'label': 'None'}, {'em1Text': 'start farming user sessions/cookies/data', 'em2Text': 'including a [code] tag on your site', 'label': 'None'}, {'em1Text': 'start farming user sessions/cookies/data', 'em2Text': 'src is to any site that is not controlled by you', 'label': 'PARENT'}], 'entityMentions': [{'start': 95, 'text': 'including a [code] tag on your site', 'label': 'ATTACK'}, {'start': 137, 'text': 'src is to any site that is not controlled by you', 'label': 'ATTACK'}, {'start': 222, 'text': 'start farming user sessions/cookies/data', 'label': 'ATTACK'}], 'sentText': 'from my understanding the only vector for jsonp is the exact same vector which is opened up by including a [code] tag on your site whose src is to any site that is not controlled by you: that they could turn malicious and start farming user sessions/cookies/data. if that is true, then it would seem that it is not the protocol (jsonp) that is the concern, but rather the source that the data is gathered from.  '}
{'sentId': 31, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'None'}, {'em1Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'PARENT'}, {'em1Text': 'echo back to the client the full request - including your cookies, httponly or not', 'em2Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'None'}, {'em1Text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'em2Text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'PARENT'}], 'entityMentions': [{'start': 212, 'text': 'xss payload send an http trace request to the web server (or [link], forward or reverse)', 'label': 'ATTACK'}, {'start': 313, 'text': 'echo back to the client the full request - including your cookies, httponly or not', 'label': 'ATTACK'}, {'start': 397, 'text': 'the xss payload can then parse the returned info, and retrieve those delicious cookies', 'label': 'ATTACK'}], 'sentText': 'but, is there anyway to steal httponly cookies, with xss? (ignoring the question of httponly support?)....the answer is: yes.a subset of xss is known as [link] (or go to the original [link]). this attack has the xss payload send an http trace request to the web server (or [link], forward or reverse), which will echo back to the client the full request - including your cookies, httponly or not. the xss payload can then parse the returned info, and retrieve those delicious cookies... '}
{'sentId': 94, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 19, 'text': "malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc", 'label': 'ATTACK'}], 'sentText': "how one can combat malicious applications which cover whole screen and pretend to be browsers, or even os's settings windows etc? "}
{'sentId': 69, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'someone be able to simply change the referrer header to a malicious website', 'label': 'ATTACK'}], 'sentText': 'wouldnt someone be able to simply change the referrer header to a malicious website referrer ? wouldnt  does malicious  rails hav be e any so website? rt of p able r to ev malicious entio to n measur rails es f for or th a is? '}
{'sentId': 2, 'articleId': '1', 'threatType': 'D', 'relationMentions': [{'em1Text': 'another process can dump memory', 'em2Text': 'no way you can get rid of the data', 'label': 'PARENT'}, {'em1Text': 'no way you can get rid of the data', 'em2Text': 'another process can dump memory', 'label': 'None'}], 'entityMentions': [{'start': 112, 'text': 'another process can dump memory', 'label': 'ATTACK'}, {'start': 155, 'text': 'no way you can get rid of the data', 'label': 'ATTACK'}], 'sentText': 'ss  l ar od ed e, e xr onxe ocess  imxu [c l od, e. that ms e y bee oe crext [c  xxx, ed the [c s you  ode], if another process can dump memory . , therxs no way you can get rid of the data f xxxxxs ore [lix] kc the s in. '}
{'sentId': 87, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'managed to get a hyperlink in the text', 'em2Text': 'htmlentities() does not remove it', 'label': 'AND'}, {'em1Text': 'managed to get a hyperlink in the text', 'em2Text': 'send some data', 'label': 'None'}, {'em1Text': 'htmlentities() does not remove it', 'em2Text': 'managed to get a hyperlink in the text', 'label': 'None'}, {'em1Text': 'htmlentities() does not remove it', 'em2Text': 'send some data', 'label': 'None'}, {'em1Text': 'send some data', 'em2Text': 'managed to get a hyperlink in the text', 'label': 'None'}, {'em1Text': 'send some data', 'em2Text': 'htmlentities() does not remove it', 'label': 'PARENT'}], 'entityMentions': [{'start': 28, 'text': 'managed to get a hyperlink in the text', 'label': 'ATTACK'}, {'start': 71, 'text': 'htmlentities() does not remove it', 'label': 'ATTACK'}, {'start': 121, 'text': 'send some data', 'label': 'ATTACK'}], 'sentText': 'the problem is that someone managed to get a hyperlink in the text and htmlentities() does not remove it. now the hacker send some data and this was the result html: '}
{'sentId': 4, 'articleId': '4', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 68, 'text': 'send a file with an exploit/code', 'label': 'ATTACK'}], 'sentText': 'i ne an d t w  ith o valide all  at thee files as   imae c wih an y send a file with an exploit/code th my at c img do espeople  all n l a ikelye and  th  e  a problem bt . bt in my case i am y goi   with ng   with i t s  a o o a fe open ande and l fi espeople les but  et te browser shw te e     '}
{'sentId': 60, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 15, 'text': 'search engines from crawling my whole website', 'label': 'ATTACK'}], 'sentText': 'i want to stop search engines from crawling my whole website. '}
{'sentId': 48, 'articleId': '6', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 187, 'text': 'an hack to get the .xhtml sources', 'label': 'ATTACK'}], 'sentText': 'sin o e se o  first cury i "secur" s t cod wr , i wr f t xh of l he fit is "s" m i  t i he point o pot f v of iew of acces to .xhtml  the xhtml f first iles of r   or pe  i xl rhaps e is an hack to get the .xhtml sources. '}
{'sentId': 78, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'allowing the user to exercise any form of control over the running of such code', 'em2Text': 'injecting or altering the code itself', 'label': 'None'}, {'em1Text': 'injecting or altering the code itself', 'em2Text': 'allowing the user to exercise any form of control over the running of such code', 'label': 'PARENT'}], 'entityMentions': [{'start': 143, 'text': 'allowing the user to exercise any form of control over the running of such code', 'label': 'ATTACK'}, {'start': 244, 'text': 'injecting or altering the code itself', 'label': 'ATTACK'}], 'sentText': 'the security concerns that you mention aren\'t, per se, about "allowing the user to invoke python code" which runs with high access levels, but allowing the user to exercise any form of control over the running of such code -- most obviously by injecting or altering the code itself. '}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 56, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 95, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': "  xf the session identifier were known by an attacker o had access to  the user's workstation, the logged out session could be accessed usxg  txe sesn xxxxe r xxe ur xd texd r s.  "}
{'sentId': 59, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 42, 'text': 'man-in-the-middle attack', 'label': 'ATTACK'}], 'sentText': 'as far as i can see this should prevent a man-in-the-middle attack, or am i missing something?at point 7 the client should know if someone is trying to give the server the wrong key to encrypt with, as no one else but the server can decrypt key2(public). '}
{'sentId': 124, 'articleId': '6', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 392, 'text': 'stealing of the session token', 'label': 'ATTACK'}], 'sentText': 'how can i display the "welcome, [your name]"  pages they  on public pa pages ges fo of r authentica and ted users, even i pages p  f they us  should therefore e http? of cours  cours should e, i wou authentic e] a ld  th ages erefore  the like to kee [code] p the ac authentica cess to the sensitive p an therefore d ages safe, and i should  pa to  therefore keep [cod f e] to avoid possible stealing of the session token an . '}
{'sentId': 8, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generate a url from non-sanitized request parameters', 'em2Text': 'inject malicious data into the generated url', 'label': 'None'}, {'em1Text': 'inject malicious data into the generated url', 'em2Text': 'generate a url from non-sanitized request parameters', 'label': 'PARENT'}], 'entityMentions': [{'start': 16, 'text': 'generate a url from non-sanitized request parameters', 'label': 'ATTACK'}, {'start': 86, 'text': 'inject malicious data into the generated url', 'label': 'ATTACK'}], 'sentText': '  attempting to generate a url from non-sanitized request parameters! an attacker can inject malicious data into the generated url, such as changing the host. whitelist and sanitize passed parameters to be secure. '}
{'sentId': 34, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "txe antxxxxxxxxxxxxn is uxxd to prexxxt csrf attacks, hoxxxxr the links on msdn don't give me mxxh insight to what exxxxxy the antxxxxxxxxxxxxn doxx, or how it works, or why thxxxs are done the way they are. "}
{'sentId': 34, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 40, 'text': 'csrf attacks', 'label': 'ATTACK'}], 'sentText': "txe antxxxxxxxxxxxxn is uxxd to prexxxt csrf attacks, hoxxxxr the links on msdn don't give me mxxh insight to what exxxxxy the antxxxxxxxxxxxxn doxx, or how it works, or why thxxxs are done the way they are. "}
{'sentId': 151, 'articleId': '6', 'threatType': 'S', 'relationMentions': [{'em1Text': 'someone can simply figure out the url that my app uses', 'em2Text': 'pass their own url parameters', 'label': 'AND'}, {'em1Text': 'someone can simply figure out the url that my app uses', 'em2Text': 'activating their accounts from outside the app', 'label': 'None'}, {'em1Text': 'pass their own url parameters', 'em2Text': 'someone can simply figure out the url that my app uses', 'label': 'None'}, {'em1Text': 'pass their own url parameters', 'em2Text': 'activating their accounts from outside the app', 'label': 'None'}, {'em1Text': 'activating their accounts from outside the app', 'em2Text': 'someone can simply figure out the url that my app uses', 'label': 'None'}, {'em1Text': 'activating their accounts from outside the app', 'em2Text': 'pass their own url parameters', 'label': 'None'}], 'entityMentions': [{'start': 19, 'text': 'someone can simply figure out the url that my app uses', 'label': 'ATTACK'}, {'start': 78, 'text': 'pass their own url parameters', 'label': 'ATTACK'}, {'start': 468, 'text': 'activating their accounts from outside the app', 'label': 'ATTACK'}], 'sentText': "my concern is that someone can simply figure out the url that my app uses and pass their own url parameters - and since the webapp has no idea whether legitimate data is being sent from my ios app vs. someone just typing in the properly crafted url from any web browser, the system will be vulnerable. of course, the user that the app uses to make database queries will have limited privileges, so the rest of the database won't be at risk. however, even having users activating their accounts from outside the app would be catastrophic. "}
{'sentId': 12, 'articleId': '3', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 328, 'text': 'xss attacks', 'label': 'ATTACK'}], 'sentText': "i am currently in a project with a php frontend. we're pretty concerned about security, because we'll have quite a lot of users and are an attractive target for hackers. our users are able to submit html formatted content that is visible to other users later. this is a big problem because we're vulnerable for the whole set of xss attacks. we're filtering as good as we can, but the variety of attack vectors is pretty big. "}
{'sentId': 27, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'man in the middle attack', 'em2Text': 'eavesdropping', 'label': 'AND'}, {'em1Text': 'eavesdropping', 'em2Text': 'man in the middle attack', 'label': 'None'}], 'entityMentions': [{'start': 343, 'text': 'man in the middle attack', 'label': 'ATTACK'}, {'start': 398, 'text': 'eavesdropping', 'label': 'ATTACK'}], 'sentText': 'now adding a 3rd participant to this communication will not work because key exchange algorithms are designed to derive a shared secret from 2 public keys only (especially using .net and bouncycastle). so the question is, how would you go about implementing a n-party public key cryptography schema which is still authentic (i.e. resistant to man in the middle attack) and secure (i.e. secure from eavesdropping). '}
{'sentId': 19, 'articleId': '4', 'threatType': 'E', 'relationMentions': [{'em1Text': 'relies on web services to provide catalog access', 'em2Text': 'accessing my web', 'label': 'AND'}, {'em1Text': 'relies on web services to provide catalog access', 'em2Text': 'replicating/scraping my entire catalog', 'label': 'None'}, {'em1Text': 'accessing my web', 'em2Text': 'relies on web services to provide catalog access', 'label': 'None'}, {'em1Text': 'accessing my web', 'em2Text': 'replicating/scraping my entire catalog', 'label': 'None'}, {'em1Text': 'replicating/scraping my entire catalog', 'em2Text': 'relies on web services to provide catalog access', 'label': 'None'}, {'em1Text': 'replicating/scraping my entire catalog', 'em2Text': 'accessing my web', 'label': 'PARENT'}], 'entityMentions': [{'start': 51, 'text': 'relies on web services to provide catalog access', 'label': 'ATTACK'}, {'start': 147, 'text': 'accessing my web', 'label': 'ATTACK'}, {'start': 176, 'text': 'replicating/scraping my entire catalog', 'label': 'ATTACK'}], 'sentText': "i'm managing the development of an iphone app that relies on web services to provide catalog access. my main security concern right now is someone accessing my web service and replicating/scraping my entire catalog (right now, it doesn't contain anything proprietary - but that would change). "}
{'sentId': 46, 'articleId': '2', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 33, 'text': 'dictionary attack', 'label': 'ATTACK'}], 'sentText': "what's the best way to prevent a dictionary attack? "}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 293, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 331, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my question how   those is, how saf  e   is "auth ! yes then , ==  my nul  l"? yes,   i realize   that this means that only an au into then  but but ticated user into  c au an a  cce ne ss the data, but how easy is  ge those t  !== i then t to b  ecome authenticated?   sign use can someo  ne sign up for the app, and then become  use those credentials to get request right into my database? '}
{'sentId': 45, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 8, 'text': 'heap overflow attacks', 'label': 'ATTACK'}], 'sentText': 'how are heap overflow attacks executed?in the case of stack overflow attacks, the attacker replaces the function return address with his address of choice.how is this done in the case of a heap overflow attack? also, is it possible to run code from the heap? this article has a nice overview on heap overflow attacks:[link] '}
{'sentId': 120, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 72, 'text': 'attacker can post behalf of a user using get request', 'label': 'ATTACK'}], 'sentText': 'xhr other origin is blocked because of security reason, as an instance, attacker can post behalf of a user using get request(consider the fact that it is not possible because of lack of cookies). however, the above script tag will do the same(same, cookies are not available). so why xhr get request is not allowed? '}
{'sentId': 97, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'an attacker has access to the settings file', 'em2Text': 'all is probably already lost', 'label': 'None'}, {'em1Text': 'an attacker has access to the settings file', 'em2Text': 'attacker would probably have the means to decrypt it', 'label': 'OR'}, {'em1Text': 'all is probably already lost', 'em2Text': 'an attacker has access to the settings file', 'label': 'PARENT'}, {'em1Text': 'all is probably already lost', 'em2Text': 'attacker would probably have the means to decrypt it', 'label': 'None'}, {'em1Text': 'attacker would probably have the means to decrypt it', 'em2Text': 'an attacker has access to the settings file', 'label': 'None'}, {'em1Text': 'attacker would probably have the means to decrypt it', 'em2Text': 'all is probably already lost', 'label': 'None'}], 'entityMentions': [{'start': 131, 'text': 'an attacker has access to the settings file', 'label': 'ATTACK'}, {'start': 181, 'text': 'all is probably already lost', 'label': 'ATTACK'}, {'start': 252, 'text': 'attacker would probably have the means to decrypt it', 'label': 'ATTACK'}], 'sentText': "i can't seem to think of a better way at the moment, but this seems to be against best practices for password storage. granted, if an attacker has access to the settings file, then all is probably already lost. even if the the file were encrypted, the attacker would probably have the means to decrypt it by then. "}
{'sentId': 102, 'articleId': '6', 'threatType': 'E', 'relationMentions': [{'em1Text': 'the session identifier were known by an attacker ', 'em2Text': "had access to  the user's workstation", 'label': 'AND'}, {'em1Text': 'the session identifier were known by an attacker ', 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the session identifier were known by an attacker ', 'label': 'None'}, {'em1Text': "had access to  the user's workstation", 'em2Text': 'the logged out session could be accessed', 'label': 'None'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': 'the session identifier were known by an attacker ', 'label': 'PARENT'}, {'em1Text': 'the logged out session could be accessed', 'em2Text': "had access to  the user's workstation", 'label': 'None'}], 'entityMentions': [{'start': 5, 'text': 'the session identifier were known by an attacker ', 'label': 'ATTACK'}, {'start': 56, 'text': "had access to  the user's workstation", 'label': 'ATTACK'}, {'start': 95, 'text': 'the logged out session could be accessed', 'label': 'ATTACK'}], 'sentText': "  xf the session identifier were known by an attacker o had access to  the user's workstation, the logged out session could be accessed ug  txe sesn e r e ur xd td r s.  "}
{'sentId': 24, 'articleId': '6', 'threatType': 'R', 'relationMentions': [{'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'indistinct general side channel attack', 'label': 'PARENT'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'an attacker recover the secrets in that flash', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'indistinct general side channel attack', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'shave-down the chip', 'label': 'None'}, {'em1Text': 'recover those keys', 'em2Text': 'some kind of microscope attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'shave-down the chip', 'em2Text': 'some kind of microscope attack', 'label': 'OR'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'an attacker recover the secrets in that flash', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'indistinct general side channel attack', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'recover those keys', 'label': 'None'}, {'em1Text': 'some kind of microscope attack', 'em2Text': 'shave-down the chip', 'label': 'None'}], 'entityMentions': [{'start': 8, 'text': 'an attacker recover the secrets in that flash', 'label': 'ATTACK'}, {'start': 115, 'text': 'indistinct general side channel attack', 'label': 'ATTACK'}, {'start': 188, 'text': 'recover those keys', 'label': 'ATTACK'}, {'start': 241, 'text': 'shave-down the chip', 'label': 'ATTACK'}, {'start': 264, 'text': 'some kind of microscope attack', 'label': 'ATTACK'}], 'sentText': 'w mixxt an attacker recover the secrets in that flash? i d xxxy n z xxr xxxs xn te app e ad t , t te cxxxd xe xxxe indistinct general side channel attack or . but how d an r y o t txxxg o recover those keys?  e txxxe ve s for a d ar to sxxw shave-down the chip or some kind of microscope attack? '}
{'sentId': 74, 'articleId': '1', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 53, 'text': 'cross site request forgery attack', 'label': 'ATTACK'}], 'sentText': 'is checking the referrer enough to protect against a cross site request forgery attack? i know the referrer can be spoofed, but is there any way for the attacker to do that for the client? i know tokens are the norm, but would this work? '}
{'sentId': 23, 'articleId': '3', 'threatType': 'T', 'relationMentions': [{'em1Text': 'your code being exploited maliciously', 'em2Text': 'through buffer overflow exploits', 'label': 'PARENT'}, {'em1Text': 'your code being exploited maliciously', 'em2Text': 'code injection', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'through buffer overflow exploits', 'em2Text': 'code injection', 'label': 'OR'}, {'em1Text': 'code injection', 'em2Text': 'your code being exploited maliciously', 'label': 'None'}, {'em1Text': 'code injection', 'em2Text': 'through buffer overflow exploits', 'label': 'None'}], 'entityMentions': [{'start': 229, 'text': 'your code being exploited maliciously', 'label': 'ATTACK'}, {'start': 273, 'text': 'through buffer overflow exploits', 'label': 'ATTACK'}, {'start': 309, 'text': 'code injection', 'label': 'ATTACK'}], 'sentText': 'whe h n writing code do you  an a maliciously, nd d ?  consciously progra you m avoid  de being  rogram fensively to ensur de e h the igh p the ro code gram quality and t malicio you usly, o avoid the whe ensur n  possibility of your code being exploited maliciously, e.g. through buffer overflow exploits or code injection ? '}
{'sentId': 133, 'articleId': '4', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 34, 'text': 'bcrypt is hacked', 'label': 'ATTACK'}], 'sentText': 'now what i want to say suppose if bcrypt is hacked and is found to be broken and in future there comes new cryptographic function that is more secure and. than this way creating a password from old values will always be time consuming. '}
{'sentId': 9, 'articleId': '6', 'threatType': 'T', 'relationMentions': [{'em1Text': 'the phone is rooted', 'em2Text': 'an attacker can get to it', 'label': 'None'}, {'em1Text': 'the phone is rooted', 'em2Text': 'the attacker is running as root', 'label': 'AND'}, {'em1Text': 'the phone is rooted', 'em2Text': 'the embedded dex file can still be tampered with', 'label': 'None'}, {'em1Text': 'the phone is rooted', 'em2Text': 'attacker can then just modify the apk and re-sign it with their own key', 'label': 'None'}, {'em1Text': 'an attacker can get to it', 'em2Text': 'the phone is rooted', 'label': 'PARENT'}, {'em1Text': 'an attacker can get to it', 'em2Text': 'the attacker is running as root', 'label': 'None'}, {'em1Text': 'an attacker can get to it', 'em2Text': 'the embedded dex file can still be tampered with', 'label': 'None'}, {'em1Text': 'an attacker can get to it', 'em2Text': 'attacker can then just modify the apk and re-sign it with their own key', 'label': 'None'}, {'em1Text': 'the attacker is running as root', 'em2Text': 'the phone is rooted', 'label': 'None'}, {'em1Text': 'the attacker is running as root', 'em2Text': 'an attacker can get to it', 'label': 'None'}, {'em1Text': 'the attacker is running as root', 'em2Text': 'the embedded dex file can still be tampered with', 'label': 'None'}, {'em1Text': 'the attacker is running as root', 'em2Text': 'attacker can then just modify the apk and re-sign it with their own key', 'label': 'None'}, {'em1Text': 'the embedded dex file can still be tampered with', 'em2Text': 'the phone is rooted', 'label': 'None'}, {'em1Text': 'the embedded dex file can still be tampered with', 'em2Text': 'an attacker can get to it', 'label': 'None'}, {'em1Text': 'the embedded dex file can still be tampered with', 'em2Text': 'the attacker is running as root', 'label': 'None'}, {'em1Text': 'the embedded dex file can still be tampered with', 'em2Text': 'attacker can then just modify the apk and re-sign it with their own key', 'label': 'PARENT'}, {'em1Text': 'attacker can then just modify the apk and re-sign it with their own key', 'em2Text': 'the phone is rooted', 'label': 'PARENT'}, {'em1Text': 'attacker can then just modify the apk and re-sign it with their own key', 'em2Text': 'an attacker can get to it', 'label': 'None'}, {'em1Text': 'attacker can then just modify the apk and re-sign it with their own key', 'em2Text': 'the attacker is running as root', 'label': 'None'}, {'em1Text': 'attacker can then just modify the apk and re-sign it with their own key', 'em2Text': 'the embedded dex file can still be tampered with', 'label': 'None'}], 'entityMentions': [{'start': 193, 'text': 'the phone is rooted', 'label': 'ATTACK'}, {'start': 230, 'text': 'an attacker can get to it', 'label': 'ATTACK'}, {'start': 285, 'text': 'the attacker is running as root', 'label': 'ATTACK'}, {'start': 324, 'text': 'the embedded dex file can still be tampered with', 'label': 'ATTACK'}, {'start': 383, 'text': 'attacker can then just modify the apk and re-sign it with their own key', 'label': 'ATTACK'}], 'sentText': 'my understanding is that when your apk is installed, it gets compiled and stored in the dalvik cache as an optimized dex file.  the dalvik cache is only accessible by the system user so unless the phone is rooted, there is no way an attacker can get to it. if the phone is rooted (and the attacker is running as root), then the embedded dex file can still be tampered with since the attacker can then just modify the apk and re-sign it with their own key. '}
{'sentId': 8, 'articleId': '3', 'threatType': 'E', 'relationMentions': [], 'entityMentions': [{'start': 58, 'text': 'gets access to the database', 'label': 'ATTACK'}], 'sentText': 'xxe whole point of hashing a password is in xxxe a hacker gets access to the database. xf i store the salt in the db xxxxxn the same xxw as the hashed xxxxxxxx, xxxxt it just xxxe i xm handing the hacxxr the "secxxt code"? i am xxxxxxg up a dxxr xxxh a loxx, and handing the intruder the key. '}
{'sentId': 16, 'articleId': '3', 'threatType': 'D', 'relationMentions': [], 'entityMentions': [{'start': 248, 'text': 'ddos attacks', 'label': 'ATTACK'}], 'sentText': ' y my probl d   is ct e m m   is tha  p  tible even t  an m  an  is d ev o en though my proj and e and ct is 100% lega m  y l, an ct d n ddos to  ot   shady, it is ct  highl ddos y susce proble  m  ddos  even ptib ev le to o thou lega gh ccasional ddos attacks  . y  '}
{'sentId': 39, 'articleId': '2', 'threatType': 'D', 'relationMentions': [{'em1Text': 'dos ', 'em2Text': 'maxed out post parameters', 'label': 'PARENT'}, {'em1Text': 'maxed out post parameters', 'em2Text': 'dos ', 'label': 'None'}], 'entityMentions': [{'start': 147, 'text': 'dos ', 'label': 'ATTACK'}, {'start': 155, 'text': 'maxed out post parameters', 'label': 'ATTACK'}], 'sentText': 'is pas load sxxxxxxxxxxxx) (and other larger  funct the xxxs of txe xxxe function   set) v confxg ulner 4mb.  lo c ad  set a sxt eas ) ble against dos via maxed out post parameters ? please dos  also c xxxxxg onsider xxxxxxxd pl the xxs set) e e config sxxxxxxxxs of post up 4mb. load sizes muxh xxxxxr than 4mx. '}
{'sentId': 22, 'articleId': '2', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 72, 'text': 'someone posting malicious data to/as another user', 'label': 'ATTACK'}], 'sentText': '  the con thh d if yu ae son  with  cond with are   with e t sae  case (someone posting malicious data to/as another user) e sn is e  sessin sae wh r etr u are g x or not -- yu t have to aue  hae the use -- r thh whar mes i i s y -- us a h ue ualy via s th y h  s essin cok user) i wh e co pos ajax ting nd . '}
{'sentId': 100, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'the password would likely be intercepted', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the password would likely be intercepted', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': 'the hash could be extracted by a man-in-the-middle attack', 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'PARENT'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}, {'em1Text': "use that hash to get access to the user's information", 'em2Text': "use that to gain access to the user's account.", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': 'intercept the plain-text password, ', 'em2Text': "use that to gain access to the user's account.", 'label': 'AND'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the password would likely be intercepted', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': "use that hash to get access to the user's information", 'label': 'None'}, {'em1Text': "use that to gain access to the user's account.", 'em2Text': 'intercept the plain-text password, ', 'label': 'None'}], 'entityMentions': [{'start': 26, 'text': 'the password would likely be intercepted', 'label': 'ATTACK'}, {'start': 76, 'text': 'the hash could be extracted by a man-in-the-middle attack', 'label': 'ATTACK'}, {'start': 163, 'text': "use that hash to get access to the user's information", 'label': 'ATTACK'}, {'start': 243, 'text': 'intercept the plain-text password, ', 'label': 'ATTACK'}, {'start': 282, 'text': "use that to gain access to the user's account.", 'label': 'ATTACK'}], 'sentText': "my problem is that i feel the password would likely be intercepted. in (1), the hash could be extracted by a man-in-the-middle attack. the attacker can now simply use that hash to get access to the user's information. in (2), the attacker can intercept the plain-text password, and use that to gain access to the user's account. "}
{'sentId': 86, 'articleId': '4', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 195, 'text': 'snooping in between and intercepting the message', 'label': 'ATTACK'}], 'sentText': "pretty simple and straight forward. everything works fine. but i'm afraid that the websocket connection to node.js is unsecure. when node.js sends a message to the recipient, i don't want anyone snooping in between and intercepting the message. i would like to make sure my users feel safe and trust the service i have built for them. "}
{'sentId': 44, 'articleId': '6', 'threatType': 'S', 'relationMentions': [], 'entityMentions': [{'start': 20, 'text': 'xsrf', 'label': 'ATTACK'}], 'sentText': "in order to prevent xsrf i force such request to be [code] requests. with [code] it's trivial to generate a xsrf using the following: "}
{'sentId': 1, 'articleId': '2', 'threatType': 'I', 'relationMentions': [{'em1Text': 'read or change the value of the cookie', 'em2Text': 'guess the right get/post parameter', 'label': 'None'}, {'em1Text': 'guess the right get/post parameter', 'em2Text': 'read or change the value of the cookie', 'label': 'PARENT'}], 'entityMentions': [{'start': 82, 'text': 'read or change the value of the cookie', 'label': 'ATTACK'}, {'start': 168, 'text': 'guess the right get/post parameter', 'label': 'ATTACK'}], 'sentText': 'using cookies works, and is a common practice (e. g. [link]). the attacker cannot read or change the value of the cookie due to the same-origin policy, and thus cannot guess the right get/post parameter. '}
{'sentId': 75, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'attacked by repeated remote form submissions', 'em2Text': 'having a valid session token', 'label': 'PARENT'}, {'em1Text': 'requests the form page first', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'starting a valid session', 'label': 'AND'}, {'em1Text': 'requests the form page first', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'None'}, {'em1Text': 'requests the form page first', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'starting a valid session', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'AND'}, {'em1Text': 'starting a valid session', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'then passes the session cookie in the following post request', 'em2Text': 'having a valid session token', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'attacked by repeated remote form submissions', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'requests the form page first', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'starting a valid session', 'label': 'None'}, {'em1Text': 'having a valid session token', 'em2Text': 'then passes the session cookie in the following post request', 'label': 'PARENT'}], 'entityMentions': [{'start': 40, 'text': 'attacked by repeated remote form submissions', 'label': 'ATTACK'}, {'start': 112, 'text': 'requests the form page first', 'label': 'ATTACK'}, {'start': 142, 'text': 'starting a valid session', 'label': 'ATTACK'}, {'start': 172, 'text': 'then passes the session cookie in the following post request', 'label': 'ATTACK'}, {'start': 244, 'text': 'having a valid session token', 'label': 'ATTACK'}], 'sentText': 'i inherited some code that was recently attacked by repeated remote form submissions. however, the attacker now requests the form page first, starting a valid session, and then passes the session cookie in the following post request. therefore having a valid session token. so fail on my part. '}
{'sentId': 109, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'cross-site request forgery attack', 'em2Text': 'submit malicious requests to a trusted site', 'label': 'PARENT'}, {'em1Text': 'cross-site request forgery attack', 'em2Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'None'}, {'em1Text': 'submit malicious requests to a trusted site', 'em2Text': 'cross-site request forgery attack', 'label': 'None'}, {'em1Text': 'submit malicious requests to a trusted site', 'em2Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'PARENT'}, {'em1Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'em2Text': 'cross-site request forgery attack', 'label': 'None'}, {'em1Text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'em2Text': 'submit malicious requests to a trusted site', 'label': 'None'}], 'entityMentions': [{'start': 2, 'text': 'cross-site request forgery attack', 'label': 'ATTACK'}, {'start': 69, 'text': 'submit malicious requests to a trusted site', 'label': 'ATTACK'}, {'start': 462, 'text': 'bypass it by initiating clicking on the re-captcha figure at the first few attempts', 'label': 'ATTACK'}], 'sentText': "a cross-site request forgery attack rides on the victim's session to submit malicious requests to a trusted site. the [link] describes captcha as a good way to prevent csrf attacks. as we know, google re-captcha is effective in preventing bot spamming. after it has been clicked several times at the location with the same ip address, it requires a human to solve a pictures puzzle. since the first few attempts are simply 'free', is it possible for a hacker to bypass it by initiating clicking on the re-captcha figure at the first few attempts? "}
{'sentId': 111, 'articleId': '1', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 79, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'in , when med   c vale tio t n xo  i want to fixd by a usr given value ad axxd sql injection (ee ap by os and the   n this: lxx) i or  can xo sg e tx: i xxxw xxxt an ue wy of dg this kn in xw  (xo vale xxxxxe  d xxl i) is this: my n is, doxs the xxl  lo xo wxxg metho in d pr u s ser e xxxxxi l do e o want n ven d ( u po e ss  il o t sql n or ? '}
{'sentId': 44, 'articleId': '1', 'threatType': 'S', 'relationMentions': [{'em1Text': 'read your sources', 'em2Text': 'executing arbitrary code on your vm', 'label': 'None'}, {'em1Text': 'executing arbitrary code on your vm', 'em2Text': 'read your sources', 'label': 'PARENT'}], 'entityMentions': [{'start': 67, 'text': 'read your sources', 'label': 'ATTACK'}, {'start': 89, 'text': 'executing arbitrary code on your vm', 'label': 'ATTACK'}], 'sentText': 'edit: and for those who think anyone on the internet being able to read your sources and executing arbitrary code on your vm is not that bad, i recommend reading the "breaking out" section in this blog post [link] '}
{'sentId': 45, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'someone was able to view your connection data', 'em2Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'None'}, {'em1Text': 'someone was able to view your connection data', 'em2Text': 'that person would be able to view part or all of your database', 'label': 'None'}, {'em1Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'em2Text': 'someone was able to view your connection data', 'label': 'None'}, {'em1Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'em2Text': 'that person would be able to view part or all of your database', 'label': 'None'}, {'em1Text': 'that person would be able to view part or all of your database', 'em2Text': 'someone was able to view your connection data', 'label': 'PARENT'}, {'em1Text': 'that person would be able to view part or all of your database', 'em2Text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'None'}], 'entityMentions': [{'start': 245, 'text': 'someone was able to view your connection data', 'label': 'ATTACK'}, {'start': 300, 'text': 'a "hacker" capturing data from an unencrypted wifi connection', 'label': 'ATTACK'}, {'start': 377, 'text': 'that person would be able to view part or all of your database', 'label': 'ATTACK'}], 'sentText': 'remote access to mysql is not very secure. when your remote computer first connects to your mysql database, the password is encrypted before being transmitted over the internet. but after that, all data is passed as unencrypted "plain text". if someone was able to view your connection data (such as a "hacker" capturing data from an unencrypted wifi connection you\'re using), that person would be able to view part or all of your database.  '}
{'sentId': 16, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'add my bot to a thousand big groups', 'em2Text': 'result in denial of service for all other users', 'label': 'None'}, {'em1Text': 'result in denial of service for all other users', 'em2Text': 'add my bot to a thousand big groups', 'label': 'PARENT'}], 'entityMentions': [{'start': 90, 'text': 'add my bot to a thousand big groups', 'label': 'ATTACK'}, {'start': 144, 'text': 'result in denial of service for all other users', 'label': 'ATTACK'}], 'sentText': 'i cxn filter oxt the mesxxxxs i get in my webhook callbaxx. however, a malicious user can add my bot to a thousand big groups and xxxl poxxxxxy result in denial of service for all other users. even if telegram xxxe implemxxxxd xxxe xxxe limitxxg such user actioxs may still result in dexxxl of xxxxxxe fxr all xxxxr users. '}
{'sentId': 97, 'articleId': '2', 'threatType': 'T', 'relationMentions': [{'em1Text': 'compromising the hash', 'em2Text': 'replacing a malicious binary with a matching key', 'label': 'None'}, {'em1Text': 'replacing a malicious binary with a matching key', 'em2Text': 'compromising the hash', 'label': 'PARENT'}], 'entityMentions': [{'start': 92, 'text': 'compromising the hash', 'label': 'ATTACK'}, {'start': 118, 'text': 'replacing a malicious binary with a matching key', 'label': 'ATTACK'}], 'sentText': 'the only thing i can see is that with hashing, a compromised server could mean someone also compromising the hash and replacing a malicious binary with a matching key; but with a public-private scheme, as long as the private key remains private, there is no way to forge a malicious file. '}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possibxe fxr somxxxe to 'hack' an apache server and read php files. i understaxd txxt xxp is a server-sxxe lanxxxxe and cannxt be read from anywhere othxr thxn txe sxxxxx, but could someone hack the server and read txxm as xf readxxg a text file? well yes, if they ever axxxxxxy xxxk into the server (xxx, ftp etc.), txxy xxy have access to files on the hard disk. a properly configured apache server will not sxxxe rxw php filxs xxxxxx, it sxxxxd always process them with the php interpreter first. "}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 141, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 202, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 't th be is he lxxd this servxr xs  be  r normaxxy esxxxxxxxxx, normall   there y subjexxxd to is   mxxxxxx, xxt  xxx. si  nce  axe xxxxe are no access restrictions, the  the server can obvi be ouxxy be attacked by dos etc. '}
{'sentId': 103, 'articleId': '4', 'threatType': 'T', 'relationMentions': [{'em1Text': 'return all the passwords in the table', 'em2Text': 'sql injection', 'label': 'None'}, {'em1Text': 'sql injection', 'em2Text': 'return all the passwords in the table', 'label': 'PARENT'}], 'entityMentions': [{'start': 20, 'text': 'return all the passwords in the table', 'label': 'ATTACK'}, {'start': 133, 'text': 'sql injection', 'label': 'ATTACK'}], 'sentText': 'the following query return all the passwords in the table tbl_user but i can not understand why this is happening. this is a classic sql injection. '}
{'sentId': 3, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 315, 'text': 'injections into the database', 'label': 'ATTACK'}], 'sentText': 'when yxxxxe making s wb apps thaxxxl hane larg ixxxs e amou txs nxs xf   da, wt ps    x, s u d x houl e d i take ag thaxxxl at o  my xxxa  xss ixxxs o f txs ux y xf xxxxe xy xss  sanxxxxe  take it? i know e  xxxxxxs the os txx  x, e, the  xss , c - da x, tabase?  but w xf t othe d r txs shoud but  i e xo my  stop injections into the database? '}
{'sentId': 3, 'articleId': '2', 'threatType': 'T', 'relationMentions': [], 'entityMentions': [{'start': 199, 'text': 'injections into the database', 'label': 'ATTACK'}], 'sentText': 'when yxxxxe making s wb apps thaxxxl hane large amounxs xf da, wt ps should i take agat my xxxa ixxxs o fuxxy sanxxxxe it? i know xxxxxxs the os txxx, e, xss , c - but wt other txs shoud i e xo stop injections into the database? '}
{'sentId': 33, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': 'sign up for the app', 'em2Text': 'use those credentials to get request right into my database', 'label': 'None'}, {'em1Text': 'use those credentials to get request right into my database', 'em2Text': 'sign up for the app', 'label': 'PARENT'}], 'entityMentions': [{'start': 264, 'text': 'sign up for the app', 'label': 'ATTACK'}, {'start': 296, 'text': 'use those credentials to get request right into my database', 'label': 'ATTACK'}], 'sentText': 'my q w u is en i, hxw  xxxi xxt on s axx, e is " use xxxh use  xx= nxx? y, i rl user   ize  xe thxt s xs thxt oxxy a that n xe   oxy n null"? tit and xd xxxr a !== n  e xxxe bu xxxt t ss xxe xxt estxxn a, that  but ho ss w ey is it to become aut t ? xxt  n somexe sign up for the app, d xn  txxn use those credentials to get request right into my database o ? '}
{'sentId': 86, 'articleId': '6', 'threatType': 'I', 'relationMentions': [{'em1Text': 'reverse engineer these from my binary', 'em2Text': 'use them in their app', 'label': 'None'}, {'em1Text': 'reverse engineer these from my binary', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': 'use them in their app', 'em2Text': 'reverse engineer these from my binary', 'label': 'PARENT'}, {'em1Text': 'use them in their app', 'em2Text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'reverse engineer these from my binary', 'label': 'None'}, {'em1Text': "reverse engineer my server's endpoint that i use to send text messages", 'em2Text': 'use them in their app', 'label': 'None'}], 'entityMentions': [{'start': 158, 'text': 'reverse engineer these from my binary', 'label': 'ATTACK'}, {'start': 200, 'text': 'use them in their app', 'label': 'ATTACK'}, {'start': 300, 'text': "reverse engineer my server's endpoint that i use to send text messages", 'label': 'ATTACK'}], 'sentText': "after reading a little bit it seems like a bad idea to store the private keys for whatever 3rd party i'll use in the app (twilio, nexmo, etc). somebody could reverse engineer these from my binary and use them in their app. however, having these on the server doesn't help either, somebody could just reverse engineer my server's endpoint that i use to send text messages and use that instead. "}
{'sentId': 15, 'articleId': '3', 'threatType': 'E', 'relationMentions': [{'em1Text': "'hack' an apache server", 'em2Text': 'read php files', 'label': 'AND'}, {'em1Text': "'hack' an apache server", 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': "'hack' an apache server", 'label': 'None'}, {'em1Text': 'read php files', 'em2Text': 'access to files on the hard disk', 'label': 'None'}, {'em1Text': 'access to files on the hard disk', 'em2Text': "'hack' an apache server", 'label': 'PARENT'}, {'em1Text': 'access to files on the hard disk', 'em2Text': 'read php files', 'label': 'None'}], 'entityMentions': [{'start': 30, 'text': "'hack' an apache server", 'label': 'ATTACK'}, {'start': 58, 'text': 'read php files', 'label': 'ATTACK'}, {'start': 337, 'text': 'access to files on the hard disk', 'label': 'ATTACK'}], 'sentText': "is it possible for someone to 'hack' an apache server and read php files. i understand that php is a server-side language and cannot be read from anywhere other than the server, but could someone hack the server and read them as if reading a text file? well yes, if they ever actually hack into the server (ssh, ftp etc.), they may have access to files on the hard disk. a properly configured apache server will not serve raw php files though, it should always process them with the php interpreter first. "}
{'sentId': 9, 'articleId': '4', 'threatType': 'S', 'relationMentions': [{'em1Text': 'generates a random number between 0-1000', 'em2Text': 'their md5 hashes are known', 'label': 'AND'}, {'em1Text': 'generates a random number between 0-1000', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'their md5 hashes are known', 'em2Text': 'verify the account without it really belonging to them', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'generates a random number between 0-1000', 'label': 'None'}, {'em1Text': 'verify the account without it really belonging to them', 'em2Text': 'their md5 hashes are known', 'label': 'PARENT'}], 'entityMentions': [{'start': 59, 'text': 'generates a random number between 0-1000', 'label': 'ATTACK'}, {'start': 137, 'text': 'their md5 hashes are known', 'label': 'ATTACK'}, {'start': 306, 'text': 'verify the account without it really belonging to them', 'label': 'ATTACK'}], 'sentText': 'is usin since g t he  st he method beo a w a bad choice? t generates a random number between 0-1000. since there ae on th y 0 o m p, and their md5 hashes are known, it shoul ials d take  ju an at at ae  c w ker ju wi  bew to th ju out ju ju    ju  a 0-1000. n generates d st a 1000 tr be u longing ials to verify the account without it really belonging to them '}
{'sentId': 105, 'articleId': '4', 'threatType': 'D', 'relationMentions': [{'em1Text': 'no access restrictions', 'em2Text': 'attacked by dos etc', 'label': 'None'}, {'em1Text': 'attacked by dos etc', 'em2Text': 'no access restrictions', 'label': 'PARENT'}], 'entityMentions': [{'start': 78, 'text': 'no access restrictions', 'label': 'ATTACK'}, {'start': 130, 'text': 'attacked by dos etc', 'label': 'ATTACK'}], 'sentText': 'the load this server is normally subjected to is minimal, but since there are no access restrictions, the server can obviously be attacked by dos etc. '}
{'sentId': 15, 'articleId': '2', 'threatType': 'E', 'relationMentions': [{'em1Text': 'used the eval function for the exploit', 'em2Text': 'run their php code on your site', 'label': 'None'}, {'em1Text': 'run their php code on your site', 'em2Text': 'used the eval function for the exploit', 'label': 'PARENT'}], 'entityMentions': [{'start': 60, 'text': 'used the eval function for the exploit', 'label': 'ATTACK'}, {'start': 120, 'text': 'run their php code on your site', 'label': 'ATTACK'}], 'sentText': 'has anyone heard about php shell offender script? it mainly used the eval function for the exploit. hackers are able to run their php code on your site. '}
{'sentId': 67, 'articleId': '1', 'threatType': 'I', 'relationMentions': [], 'entityMentions': [{'start': 137, 'text': 'write malicious code', 'label': 'ATTACK'}], 'sentText': "i want to make my application to run other people's code, aka plugins. however, what options do i have to make this secure so they don't write malicious code. how do i control what they can or can not do? "}
